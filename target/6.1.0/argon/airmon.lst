
c:/Users/TannerOleksiuk/Documents/Projects/Air-Monitor/airmon/target/6.1.0/argon/airmon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c88  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b9ca8  000b9ca8  00009ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b9cb0  000b9cb0  00009cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000070  2003e5d4  000b9cd4  0000e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  2003e644  2003e644  0001e644  2**2
                  ALLOC
  7 .backup       00000004  2003f400  000b9d44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b9d48  000b9d48  00019d48  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b9d4e  000b9d4e  00019d4e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b9d72  000b9d72  00019d72  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   001cf293  00000000  00000000  00019d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00019bd6  00000000  00000000  001e9009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00066c8a  00000000  00000000  00202bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036e8  00000000  00000000  00269869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000fb80  00000000  00000000  0026cf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044248  00000000  00000000  0027cad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005eaec  00000000  00000000  002c0d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c773b  00000000  00000000  0031f805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a694  00000000  00000000  004e6f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2f>:
   b4948:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b494c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4950:	bf24      	itt	cs
   b4952:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4956:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b495a:	d90d      	bls.n	b4978 <__aeabi_d2f+0x30>
   b495c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4960:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4964:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4968:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b496c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4970:	bf08      	it	eq
   b4972:	f020 0001 	biceq.w	r0, r0, #1
   b4976:	4770      	bx	lr
   b4978:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b497c:	d121      	bne.n	b49c2 <__aeabi_d2f+0x7a>
   b497e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4982:	bfbc      	itt	lt
   b4984:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4988:	4770      	bxlt	lr
   b498a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b498e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4992:	f1c2 0218 	rsb	r2, r2, #24
   b4996:	f1c2 0c20 	rsb	ip, r2, #32
   b499a:	fa10 f30c 	lsls.w	r3, r0, ip
   b499e:	fa20 f002 	lsr.w	r0, r0, r2
   b49a2:	bf18      	it	ne
   b49a4:	f040 0001 	orrne.w	r0, r0, #1
   b49a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49b4:	ea40 000c 	orr.w	r0, r0, ip
   b49b8:	fa23 f302 	lsr.w	r3, r3, r2
   b49bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49c0:	e7cc      	b.n	b495c <__aeabi_d2f+0x14>
   b49c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49c6:	d107      	bne.n	b49d8 <__aeabi_d2f+0x90>
   b49c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49cc:	bf1e      	ittt	ne
   b49ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49d6:	4770      	bxne	lr
   b49d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49e4:	4770      	bx	lr
   b49e6:	bf00      	nop

000b49e8 <__aeabi_frsub>:
   b49e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b49ec:	e002      	b.n	b49f4 <__addsf3>
   b49ee:	bf00      	nop

000b49f0 <__aeabi_fsub>:
   b49f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b49f4 <__addsf3>:
   b49f4:	0042      	lsls	r2, r0, #1
   b49f6:	bf1f      	itttt	ne
   b49f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b49fc:	ea92 0f03 	teqne	r2, r3
   b4a00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b4a04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a08:	d06a      	beq.n	b4ae0 <__addsf3+0xec>
   b4a0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b4a0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b4a12:	bfc1      	itttt	gt
   b4a14:	18d2      	addgt	r2, r2, r3
   b4a16:	4041      	eorgt	r1, r0
   b4a18:	4048      	eorgt	r0, r1
   b4a1a:	4041      	eorgt	r1, r0
   b4a1c:	bfb8      	it	lt
   b4a1e:	425b      	neglt	r3, r3
   b4a20:	2b19      	cmp	r3, #25
   b4a22:	bf88      	it	hi
   b4a24:	4770      	bxhi	lr
   b4a26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b4a2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b4a32:	bf18      	it	ne
   b4a34:	4240      	negne	r0, r0
   b4a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4a3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b4a3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b4a42:	bf18      	it	ne
   b4a44:	4249      	negne	r1, r1
   b4a46:	ea92 0f03 	teq	r2, r3
   b4a4a:	d03f      	beq.n	b4acc <__addsf3+0xd8>
   b4a4c:	f1a2 0201 	sub.w	r2, r2, #1
   b4a50:	fa41 fc03 	asr.w	ip, r1, r3
   b4a54:	eb10 000c 	adds.w	r0, r0, ip
   b4a58:	f1c3 0320 	rsb	r3, r3, #32
   b4a5c:	fa01 f103 	lsl.w	r1, r1, r3
   b4a60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4a64:	d502      	bpl.n	b4a6c <__addsf3+0x78>
   b4a66:	4249      	negs	r1, r1
   b4a68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4a6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4a70:	d313      	bcc.n	b4a9a <__addsf3+0xa6>
   b4a72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4a76:	d306      	bcc.n	b4a86 <__addsf3+0x92>
   b4a78:	0840      	lsrs	r0, r0, #1
   b4a7a:	ea4f 0131 	mov.w	r1, r1, rrx
   b4a7e:	f102 0201 	add.w	r2, r2, #1
   b4a82:	2afe      	cmp	r2, #254	; 0xfe
   b4a84:	d251      	bcs.n	b4b2a <__addsf3+0x136>
   b4a86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4a8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4a8e:	bf08      	it	eq
   b4a90:	f020 0001 	biceq.w	r0, r0, #1
   b4a94:	ea40 0003 	orr.w	r0, r0, r3
   b4a98:	4770      	bx	lr
   b4a9a:	0049      	lsls	r1, r1, #1
   b4a9c:	eb40 0000 	adc.w	r0, r0, r0
   b4aa0:	3a01      	subs	r2, #1
   b4aa2:	bf28      	it	cs
   b4aa4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4aa8:	d2ed      	bcs.n	b4a86 <__addsf3+0x92>
   b4aaa:	fab0 fc80 	clz	ip, r0
   b4aae:	f1ac 0c08 	sub.w	ip, ip, #8
   b4ab2:	ebb2 020c 	subs.w	r2, r2, ip
   b4ab6:	fa00 f00c 	lsl.w	r0, r0, ip
   b4aba:	bfaa      	itet	ge
   b4abc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4ac0:	4252      	neglt	r2, r2
   b4ac2:	4318      	orrge	r0, r3
   b4ac4:	bfbc      	itt	lt
   b4ac6:	40d0      	lsrlt	r0, r2
   b4ac8:	4318      	orrlt	r0, r3
   b4aca:	4770      	bx	lr
   b4acc:	f092 0f00 	teq	r2, #0
   b4ad0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4ad4:	bf06      	itte	eq
   b4ad6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4ada:	3201      	addeq	r2, #1
   b4adc:	3b01      	subne	r3, #1
   b4ade:	e7b5      	b.n	b4a4c <__addsf3+0x58>
   b4ae0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4ae8:	bf18      	it	ne
   b4aea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4aee:	d021      	beq.n	b4b34 <__addsf3+0x140>
   b4af0:	ea92 0f03 	teq	r2, r3
   b4af4:	d004      	beq.n	b4b00 <__addsf3+0x10c>
   b4af6:	f092 0f00 	teq	r2, #0
   b4afa:	bf08      	it	eq
   b4afc:	4608      	moveq	r0, r1
   b4afe:	4770      	bx	lr
   b4b00:	ea90 0f01 	teq	r0, r1
   b4b04:	bf1c      	itt	ne
   b4b06:	2000      	movne	r0, #0
   b4b08:	4770      	bxne	lr
   b4b0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4b0e:	d104      	bne.n	b4b1a <__addsf3+0x126>
   b4b10:	0040      	lsls	r0, r0, #1
   b4b12:	bf28      	it	cs
   b4b14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4b18:	4770      	bx	lr
   b4b1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4b1e:	bf3c      	itt	cc
   b4b20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4b24:	4770      	bxcc	lr
   b4b26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4b2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4b32:	4770      	bx	lr
   b4b34:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4b38:	bf16      	itet	ne
   b4b3a:	4608      	movne	r0, r1
   b4b3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4b40:	4601      	movne	r1, r0
   b4b42:	0242      	lsls	r2, r0, #9
   b4b44:	bf06      	itte	eq
   b4b46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4b4a:	ea90 0f01 	teqeq	r0, r1
   b4b4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b52:	4770      	bx	lr

000b4b54 <__aeabi_ui2f>:
   b4b54:	f04f 0300 	mov.w	r3, #0
   b4b58:	e004      	b.n	b4b64 <__aeabi_i2f+0x8>
   b4b5a:	bf00      	nop

000b4b5c <__aeabi_i2f>:
   b4b5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4b60:	bf48      	it	mi
   b4b62:	4240      	negmi	r0, r0
   b4b64:	ea5f 0c00 	movs.w	ip, r0
   b4b68:	bf08      	it	eq
   b4b6a:	4770      	bxeq	lr
   b4b6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4b70:	4601      	mov	r1, r0
   b4b72:	f04f 0000 	mov.w	r0, #0
   b4b76:	e01c      	b.n	b4bb2 <__aeabi_l2f+0x2a>

000b4b78 <__aeabi_ul2f>:
   b4b78:	ea50 0201 	orrs.w	r2, r0, r1
   b4b7c:	bf08      	it	eq
   b4b7e:	4770      	bxeq	lr
   b4b80:	f04f 0300 	mov.w	r3, #0
   b4b84:	e00a      	b.n	b4b9c <__aeabi_l2f+0x14>
   b4b86:	bf00      	nop

000b4b88 <__aeabi_l2f>:
   b4b88:	ea50 0201 	orrs.w	r2, r0, r1
   b4b8c:	bf08      	it	eq
   b4b8e:	4770      	bxeq	lr
   b4b90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4b94:	d502      	bpl.n	b4b9c <__aeabi_l2f+0x14>
   b4b96:	4240      	negs	r0, r0
   b4b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b9c:	ea5f 0c01 	movs.w	ip, r1
   b4ba0:	bf02      	ittt	eq
   b4ba2:	4684      	moveq	ip, r0
   b4ba4:	4601      	moveq	r1, r0
   b4ba6:	2000      	moveq	r0, #0
   b4ba8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4bac:	bf08      	it	eq
   b4bae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4bb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4bb6:	fabc f28c 	clz	r2, ip
   b4bba:	3a08      	subs	r2, #8
   b4bbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4bc0:	db10      	blt.n	b4be4 <__aeabi_l2f+0x5c>
   b4bc2:	fa01 fc02 	lsl.w	ip, r1, r2
   b4bc6:	4463      	add	r3, ip
   b4bc8:	fa00 fc02 	lsl.w	ip, r0, r2
   b4bcc:	f1c2 0220 	rsb	r2, r2, #32
   b4bd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4bd4:	fa20 f202 	lsr.w	r2, r0, r2
   b4bd8:	eb43 0002 	adc.w	r0, r3, r2
   b4bdc:	bf08      	it	eq
   b4bde:	f020 0001 	biceq.w	r0, r0, #1
   b4be2:	4770      	bx	lr
   b4be4:	f102 0220 	add.w	r2, r2, #32
   b4be8:	fa01 fc02 	lsl.w	ip, r1, r2
   b4bec:	f1c2 0220 	rsb	r2, r2, #32
   b4bf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4bf4:	fa21 f202 	lsr.w	r2, r1, r2
   b4bf8:	eb43 0002 	adc.w	r0, r3, r2
   b4bfc:	bf08      	it	eq
   b4bfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4c02:	4770      	bx	lr

000b4c04 <__aeabi_ldivmod>:
   b4c04:	b97b      	cbnz	r3, b4c26 <__aeabi_ldivmod+0x22>
   b4c06:	b972      	cbnz	r2, b4c26 <__aeabi_ldivmod+0x22>
   b4c08:	2900      	cmp	r1, #0
   b4c0a:	bfbe      	ittt	lt
   b4c0c:	2000      	movlt	r0, #0
   b4c0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4c12:	e006      	blt.n	b4c22 <__aeabi_ldivmod+0x1e>
   b4c14:	bf08      	it	eq
   b4c16:	2800      	cmpeq	r0, #0
   b4c18:	bf1c      	itt	ne
   b4c1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4c1e:	f04f 30ff 	movne.w	r0, #4294967295
   b4c22:	f000 b9a7 	b.w	b4f74 <__aeabi_idiv0>
   b4c26:	f1ad 0c08 	sub.w	ip, sp, #8
   b4c2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4c2e:	2900      	cmp	r1, #0
   b4c30:	db09      	blt.n	b4c46 <__aeabi_ldivmod+0x42>
   b4c32:	2b00      	cmp	r3, #0
   b4c34:	db1a      	blt.n	b4c6c <__aeabi_ldivmod+0x68>
   b4c36:	f000 f835 	bl	b4ca4 <__udivmoddi4>
   b4c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c42:	b004      	add	sp, #16
   b4c44:	4770      	bx	lr
   b4c46:	4240      	negs	r0, r0
   b4c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c4c:	2b00      	cmp	r3, #0
   b4c4e:	db1b      	blt.n	b4c88 <__aeabi_ldivmod+0x84>
   b4c50:	f000 f828 	bl	b4ca4 <__udivmoddi4>
   b4c54:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c5c:	b004      	add	sp, #16
   b4c5e:	4240      	negs	r0, r0
   b4c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c64:	4252      	negs	r2, r2
   b4c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c6a:	4770      	bx	lr
   b4c6c:	4252      	negs	r2, r2
   b4c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c72:	f000 f817 	bl	b4ca4 <__udivmoddi4>
   b4c76:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c7e:	b004      	add	sp, #16
   b4c80:	4240      	negs	r0, r0
   b4c82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c86:	4770      	bx	lr
   b4c88:	4252      	negs	r2, r2
   b4c8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c8e:	f000 f809 	bl	b4ca4 <__udivmoddi4>
   b4c92:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c9a:	b004      	add	sp, #16
   b4c9c:	4252      	negs	r2, r2
   b4c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4ca2:	4770      	bx	lr

000b4ca4 <__udivmoddi4>:
   b4ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4ca8:	9d08      	ldr	r5, [sp, #32]
   b4caa:	4604      	mov	r4, r0
   b4cac:	468e      	mov	lr, r1
   b4cae:	2b00      	cmp	r3, #0
   b4cb0:	d14d      	bne.n	b4d4e <__udivmoddi4+0xaa>
   b4cb2:	428a      	cmp	r2, r1
   b4cb4:	4694      	mov	ip, r2
   b4cb6:	d969      	bls.n	b4d8c <__udivmoddi4+0xe8>
   b4cb8:	fab2 f282 	clz	r2, r2
   b4cbc:	b152      	cbz	r2, b4cd4 <__udivmoddi4+0x30>
   b4cbe:	fa01 f302 	lsl.w	r3, r1, r2
   b4cc2:	f1c2 0120 	rsb	r1, r2, #32
   b4cc6:	fa20 f101 	lsr.w	r1, r0, r1
   b4cca:	fa0c fc02 	lsl.w	ip, ip, r2
   b4cce:	ea41 0e03 	orr.w	lr, r1, r3
   b4cd2:	4094      	lsls	r4, r2
   b4cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4cd8:	0c21      	lsrs	r1, r4, #16
   b4cda:	fbbe f6f8 	udiv	r6, lr, r8
   b4cde:	fa1f f78c 	uxth.w	r7, ip
   b4ce2:	fb08 e316 	mls	r3, r8, r6, lr
   b4ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4cea:	fb06 f107 	mul.w	r1, r6, r7
   b4cee:	4299      	cmp	r1, r3
   b4cf0:	d90a      	bls.n	b4d08 <__udivmoddi4+0x64>
   b4cf2:	eb1c 0303 	adds.w	r3, ip, r3
   b4cf6:	f106 30ff 	add.w	r0, r6, #4294967295
   b4cfa:	f080 811f 	bcs.w	b4f3c <__udivmoddi4+0x298>
   b4cfe:	4299      	cmp	r1, r3
   b4d00:	f240 811c 	bls.w	b4f3c <__udivmoddi4+0x298>
   b4d04:	3e02      	subs	r6, #2
   b4d06:	4463      	add	r3, ip
   b4d08:	1a5b      	subs	r3, r3, r1
   b4d0a:	b2a4      	uxth	r4, r4
   b4d0c:	fbb3 f0f8 	udiv	r0, r3, r8
   b4d10:	fb08 3310 	mls	r3, r8, r0, r3
   b4d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4d18:	fb00 f707 	mul.w	r7, r0, r7
   b4d1c:	42a7      	cmp	r7, r4
   b4d1e:	d90a      	bls.n	b4d36 <__udivmoddi4+0x92>
   b4d20:	eb1c 0404 	adds.w	r4, ip, r4
   b4d24:	f100 33ff 	add.w	r3, r0, #4294967295
   b4d28:	f080 810a 	bcs.w	b4f40 <__udivmoddi4+0x29c>
   b4d2c:	42a7      	cmp	r7, r4
   b4d2e:	f240 8107 	bls.w	b4f40 <__udivmoddi4+0x29c>
   b4d32:	4464      	add	r4, ip
   b4d34:	3802      	subs	r0, #2
   b4d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4d3a:	1be4      	subs	r4, r4, r7
   b4d3c:	2600      	movs	r6, #0
   b4d3e:	b11d      	cbz	r5, b4d48 <__udivmoddi4+0xa4>
   b4d40:	40d4      	lsrs	r4, r2
   b4d42:	2300      	movs	r3, #0
   b4d44:	e9c5 4300 	strd	r4, r3, [r5]
   b4d48:	4631      	mov	r1, r6
   b4d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d4e:	428b      	cmp	r3, r1
   b4d50:	d909      	bls.n	b4d66 <__udivmoddi4+0xc2>
   b4d52:	2d00      	cmp	r5, #0
   b4d54:	f000 80ef 	beq.w	b4f36 <__udivmoddi4+0x292>
   b4d58:	2600      	movs	r6, #0
   b4d5a:	e9c5 0100 	strd	r0, r1, [r5]
   b4d5e:	4630      	mov	r0, r6
   b4d60:	4631      	mov	r1, r6
   b4d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d66:	fab3 f683 	clz	r6, r3
   b4d6a:	2e00      	cmp	r6, #0
   b4d6c:	d14a      	bne.n	b4e04 <__udivmoddi4+0x160>
   b4d6e:	428b      	cmp	r3, r1
   b4d70:	d302      	bcc.n	b4d78 <__udivmoddi4+0xd4>
   b4d72:	4282      	cmp	r2, r0
   b4d74:	f200 80f9 	bhi.w	b4f6a <__udivmoddi4+0x2c6>
   b4d78:	1a84      	subs	r4, r0, r2
   b4d7a:	eb61 0303 	sbc.w	r3, r1, r3
   b4d7e:	2001      	movs	r0, #1
   b4d80:	469e      	mov	lr, r3
   b4d82:	2d00      	cmp	r5, #0
   b4d84:	d0e0      	beq.n	b4d48 <__udivmoddi4+0xa4>
   b4d86:	e9c5 4e00 	strd	r4, lr, [r5]
   b4d8a:	e7dd      	b.n	b4d48 <__udivmoddi4+0xa4>
   b4d8c:	b902      	cbnz	r2, b4d90 <__udivmoddi4+0xec>
   b4d8e:	deff      	udf	#255	; 0xff
   b4d90:	fab2 f282 	clz	r2, r2
   b4d94:	2a00      	cmp	r2, #0
   b4d96:	f040 8092 	bne.w	b4ebe <__udivmoddi4+0x21a>
   b4d9a:	eba1 010c 	sub.w	r1, r1, ip
   b4d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4da2:	fa1f fe8c 	uxth.w	lr, ip
   b4da6:	2601      	movs	r6, #1
   b4da8:	0c20      	lsrs	r0, r4, #16
   b4daa:	fbb1 f3f7 	udiv	r3, r1, r7
   b4dae:	fb07 1113 	mls	r1, r7, r3, r1
   b4db2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4db6:	fb0e f003 	mul.w	r0, lr, r3
   b4dba:	4288      	cmp	r0, r1
   b4dbc:	d908      	bls.n	b4dd0 <__udivmoddi4+0x12c>
   b4dbe:	eb1c 0101 	adds.w	r1, ip, r1
   b4dc2:	f103 38ff 	add.w	r8, r3, #4294967295
   b4dc6:	d202      	bcs.n	b4dce <__udivmoddi4+0x12a>
   b4dc8:	4288      	cmp	r0, r1
   b4dca:	f200 80cb 	bhi.w	b4f64 <__udivmoddi4+0x2c0>
   b4dce:	4643      	mov	r3, r8
   b4dd0:	1a09      	subs	r1, r1, r0
   b4dd2:	b2a4      	uxth	r4, r4
   b4dd4:	fbb1 f0f7 	udiv	r0, r1, r7
   b4dd8:	fb07 1110 	mls	r1, r7, r0, r1
   b4ddc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4de0:	fb0e fe00 	mul.w	lr, lr, r0
   b4de4:	45a6      	cmp	lr, r4
   b4de6:	d908      	bls.n	b4dfa <__udivmoddi4+0x156>
   b4de8:	eb1c 0404 	adds.w	r4, ip, r4
   b4dec:	f100 31ff 	add.w	r1, r0, #4294967295
   b4df0:	d202      	bcs.n	b4df8 <__udivmoddi4+0x154>
   b4df2:	45a6      	cmp	lr, r4
   b4df4:	f200 80bb 	bhi.w	b4f6e <__udivmoddi4+0x2ca>
   b4df8:	4608      	mov	r0, r1
   b4dfa:	eba4 040e 	sub.w	r4, r4, lr
   b4dfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4e02:	e79c      	b.n	b4d3e <__udivmoddi4+0x9a>
   b4e04:	f1c6 0720 	rsb	r7, r6, #32
   b4e08:	40b3      	lsls	r3, r6
   b4e0a:	fa22 fc07 	lsr.w	ip, r2, r7
   b4e0e:	ea4c 0c03 	orr.w	ip, ip, r3
   b4e12:	fa20 f407 	lsr.w	r4, r0, r7
   b4e16:	fa01 f306 	lsl.w	r3, r1, r6
   b4e1a:	431c      	orrs	r4, r3
   b4e1c:	40f9      	lsrs	r1, r7
   b4e1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4e22:	fa00 f306 	lsl.w	r3, r0, r6
   b4e26:	fbb1 f8f9 	udiv	r8, r1, r9
   b4e2a:	0c20      	lsrs	r0, r4, #16
   b4e2c:	fa1f fe8c 	uxth.w	lr, ip
   b4e30:	fb09 1118 	mls	r1, r9, r8, r1
   b4e34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4e38:	fb08 f00e 	mul.w	r0, r8, lr
   b4e3c:	4288      	cmp	r0, r1
   b4e3e:	fa02 f206 	lsl.w	r2, r2, r6
   b4e42:	d90b      	bls.n	b4e5c <__udivmoddi4+0x1b8>
   b4e44:	eb1c 0101 	adds.w	r1, ip, r1
   b4e48:	f108 3aff 	add.w	sl, r8, #4294967295
   b4e4c:	f080 8088 	bcs.w	b4f60 <__udivmoddi4+0x2bc>
   b4e50:	4288      	cmp	r0, r1
   b4e52:	f240 8085 	bls.w	b4f60 <__udivmoddi4+0x2bc>
   b4e56:	f1a8 0802 	sub.w	r8, r8, #2
   b4e5a:	4461      	add	r1, ip
   b4e5c:	1a09      	subs	r1, r1, r0
   b4e5e:	b2a4      	uxth	r4, r4
   b4e60:	fbb1 f0f9 	udiv	r0, r1, r9
   b4e64:	fb09 1110 	mls	r1, r9, r0, r1
   b4e68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4e6c:	fb00 fe0e 	mul.w	lr, r0, lr
   b4e70:	458e      	cmp	lr, r1
   b4e72:	d908      	bls.n	b4e86 <__udivmoddi4+0x1e2>
   b4e74:	eb1c 0101 	adds.w	r1, ip, r1
   b4e78:	f100 34ff 	add.w	r4, r0, #4294967295
   b4e7c:	d26c      	bcs.n	b4f58 <__udivmoddi4+0x2b4>
   b4e7e:	458e      	cmp	lr, r1
   b4e80:	d96a      	bls.n	b4f58 <__udivmoddi4+0x2b4>
   b4e82:	3802      	subs	r0, #2
   b4e84:	4461      	add	r1, ip
   b4e86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4e8a:	fba0 9402 	umull	r9, r4, r0, r2
   b4e8e:	eba1 010e 	sub.w	r1, r1, lr
   b4e92:	42a1      	cmp	r1, r4
   b4e94:	46c8      	mov	r8, r9
   b4e96:	46a6      	mov	lr, r4
   b4e98:	d356      	bcc.n	b4f48 <__udivmoddi4+0x2a4>
   b4e9a:	d053      	beq.n	b4f44 <__udivmoddi4+0x2a0>
   b4e9c:	b15d      	cbz	r5, b4eb6 <__udivmoddi4+0x212>
   b4e9e:	ebb3 0208 	subs.w	r2, r3, r8
   b4ea2:	eb61 010e 	sbc.w	r1, r1, lr
   b4ea6:	fa01 f707 	lsl.w	r7, r1, r7
   b4eaa:	fa22 f306 	lsr.w	r3, r2, r6
   b4eae:	40f1      	lsrs	r1, r6
   b4eb0:	431f      	orrs	r7, r3
   b4eb2:	e9c5 7100 	strd	r7, r1, [r5]
   b4eb6:	2600      	movs	r6, #0
   b4eb8:	4631      	mov	r1, r6
   b4eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ebe:	f1c2 0320 	rsb	r3, r2, #32
   b4ec2:	40d8      	lsrs	r0, r3
   b4ec4:	fa0c fc02 	lsl.w	ip, ip, r2
   b4ec8:	fa21 f303 	lsr.w	r3, r1, r3
   b4ecc:	4091      	lsls	r1, r2
   b4ece:	4301      	orrs	r1, r0
   b4ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4ed4:	fa1f fe8c 	uxth.w	lr, ip
   b4ed8:	fbb3 f0f7 	udiv	r0, r3, r7
   b4edc:	fb07 3610 	mls	r6, r7, r0, r3
   b4ee0:	0c0b      	lsrs	r3, r1, #16
   b4ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4ee6:	fb00 f60e 	mul.w	r6, r0, lr
   b4eea:	429e      	cmp	r6, r3
   b4eec:	fa04 f402 	lsl.w	r4, r4, r2
   b4ef0:	d908      	bls.n	b4f04 <__udivmoddi4+0x260>
   b4ef2:	eb1c 0303 	adds.w	r3, ip, r3
   b4ef6:	f100 38ff 	add.w	r8, r0, #4294967295
   b4efa:	d22f      	bcs.n	b4f5c <__udivmoddi4+0x2b8>
   b4efc:	429e      	cmp	r6, r3
   b4efe:	d92d      	bls.n	b4f5c <__udivmoddi4+0x2b8>
   b4f00:	3802      	subs	r0, #2
   b4f02:	4463      	add	r3, ip
   b4f04:	1b9b      	subs	r3, r3, r6
   b4f06:	b289      	uxth	r1, r1
   b4f08:	fbb3 f6f7 	udiv	r6, r3, r7
   b4f0c:	fb07 3316 	mls	r3, r7, r6, r3
   b4f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4f14:	fb06 f30e 	mul.w	r3, r6, lr
   b4f18:	428b      	cmp	r3, r1
   b4f1a:	d908      	bls.n	b4f2e <__udivmoddi4+0x28a>
   b4f1c:	eb1c 0101 	adds.w	r1, ip, r1
   b4f20:	f106 38ff 	add.w	r8, r6, #4294967295
   b4f24:	d216      	bcs.n	b4f54 <__udivmoddi4+0x2b0>
   b4f26:	428b      	cmp	r3, r1
   b4f28:	d914      	bls.n	b4f54 <__udivmoddi4+0x2b0>
   b4f2a:	3e02      	subs	r6, #2
   b4f2c:	4461      	add	r1, ip
   b4f2e:	1ac9      	subs	r1, r1, r3
   b4f30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4f34:	e738      	b.n	b4da8 <__udivmoddi4+0x104>
   b4f36:	462e      	mov	r6, r5
   b4f38:	4628      	mov	r0, r5
   b4f3a:	e705      	b.n	b4d48 <__udivmoddi4+0xa4>
   b4f3c:	4606      	mov	r6, r0
   b4f3e:	e6e3      	b.n	b4d08 <__udivmoddi4+0x64>
   b4f40:	4618      	mov	r0, r3
   b4f42:	e6f8      	b.n	b4d36 <__udivmoddi4+0x92>
   b4f44:	454b      	cmp	r3, r9
   b4f46:	d2a9      	bcs.n	b4e9c <__udivmoddi4+0x1f8>
   b4f48:	ebb9 0802 	subs.w	r8, r9, r2
   b4f4c:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4f50:	3801      	subs	r0, #1
   b4f52:	e7a3      	b.n	b4e9c <__udivmoddi4+0x1f8>
   b4f54:	4646      	mov	r6, r8
   b4f56:	e7ea      	b.n	b4f2e <__udivmoddi4+0x28a>
   b4f58:	4620      	mov	r0, r4
   b4f5a:	e794      	b.n	b4e86 <__udivmoddi4+0x1e2>
   b4f5c:	4640      	mov	r0, r8
   b4f5e:	e7d1      	b.n	b4f04 <__udivmoddi4+0x260>
   b4f60:	46d0      	mov	r8, sl
   b4f62:	e77b      	b.n	b4e5c <__udivmoddi4+0x1b8>
   b4f64:	3b02      	subs	r3, #2
   b4f66:	4461      	add	r1, ip
   b4f68:	e732      	b.n	b4dd0 <__udivmoddi4+0x12c>
   b4f6a:	4630      	mov	r0, r6
   b4f6c:	e709      	b.n	b4d82 <__udivmoddi4+0xde>
   b4f6e:	4464      	add	r4, ip
   b4f70:	3802      	subs	r0, #2
   b4f72:	e742      	b.n	b4dfa <__udivmoddi4+0x156>

000b4f74 <__aeabi_idiv0>:
   b4f74:	4770      	bx	lr
   b4f76:	bf00      	nop

000b4f78 <strlen>:
   b4f78:	4603      	mov	r3, r0
   b4f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4f7e:	2a00      	cmp	r2, #0
   b4f80:	d1fb      	bne.n	b4f7a <strlen+0x2>
   b4f82:	1a18      	subs	r0, r3, r0
   b4f84:	3801      	subs	r0, #1
   b4f86:	4770      	bx	lr

000b4f88 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f88:	4809      	ldr	r0, [pc, #36]	; (b4fb0 <module_user_pre_init+0x28>)
   b4f8a:	490a      	ldr	r1, [pc, #40]	; (b4fb4 <module_user_pre_init+0x2c>)
   b4f8c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4f8e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f90:	d005      	beq.n	b4f9e <module_user_pre_init+0x16>
   b4f92:	4a09      	ldr	r2, [pc, #36]	; (b4fb8 <module_user_pre_init+0x30>)
   b4f94:	4282      	cmp	r2, r0
   b4f96:	d002      	beq.n	b4f9e <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4f98:	1a12      	subs	r2, r2, r0
   b4f9a:	f004 f9a1 	bl	b92e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4f9e:	4807      	ldr	r0, [pc, #28]	; (b4fbc <module_user_pre_init+0x34>)
   b4fa0:	4a07      	ldr	r2, [pc, #28]	; (b4fc0 <module_user_pre_init+0x38>)
   b4fa2:	2100      	movs	r1, #0
   b4fa4:	1a12      	subs	r2, r2, r0
   b4fa6:	f004 f9a9 	bl	b92fc <memset>
    return &link_global_data_start;
}
   b4faa:	4801      	ldr	r0, [pc, #4]	; (b4fb0 <module_user_pre_init+0x28>)
   b4fac:	bd08      	pop	{r3, pc}
   b4fae:	bf00      	nop
   b4fb0:	2003e5d4 	.word	0x2003e5d4
   b4fb4:	000b9cd4 	.word	0x000b9cd4
   b4fb8:	2003e644 	.word	0x2003e644
   b4fbc:	2003e644 	.word	0x2003e644
   b4fc0:	2003e7fc 	.word	0x2003e7fc

000b4fc4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4fc4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4fc6:	4e07      	ldr	r6, [pc, #28]	; (b4fe4 <module_user_init+0x20>)
   b4fc8:	4c07      	ldr	r4, [pc, #28]	; (b4fe8 <module_user_init+0x24>)
    module_user_init_hook();
   b4fca:	f002 fa23 	bl	b7414 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4fce:	1ba4      	subs	r4, r4, r6
   b4fd0:	08a4      	lsrs	r4, r4, #2
   b4fd2:	2500      	movs	r5, #0
   b4fd4:	42ac      	cmp	r4, r5
   b4fd6:	d100      	bne.n	b4fda <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4fd8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4fda:	f856 3b04 	ldr.w	r3, [r6], #4
   b4fde:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4fe0:	3501      	adds	r5, #1
   b4fe2:	e7f7      	b.n	b4fd4 <module_user_init+0x10>
   b4fe4:	000b9c84 	.word	0x000b9c84
   b4fe8:	000b9ca8 	.word	0x000b9ca8

000b4fec <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4fec:	f000 b83a 	b.w	b5064 <setup>

000b4ff0 <module_user_loop>:
}

void module_user_loop() {
   b4ff0:	b508      	push	{r3, lr}
    loop();
   b4ff2:	f000 fbd5 	bl	b57a0 <loop>
    _post_loop();
}
   b4ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4ffa:	f002 b9c3 	b.w	b7384 <_post_loop>

000b4ffe <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ffe:	f001 beb5 	b.w	b6d6c <malloc>

000b5002 <_Znaj>:
   b5002:	f001 beb3 	b.w	b6d6c <malloc>

000b5006 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b5006:	f001 beb9 	b.w	b6d7c <free>

000b500a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b500a:	7800      	ldrb	r0, [r0, #0]
   b500c:	fab0 f080 	clz	r0, r0
   b5010:	0940      	lsrs	r0, r0, #5
   b5012:	4770      	bx	lr

000b5014 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b5014:	2301      	movs	r3, #1
   b5016:	7003      	strb	r3, [r0, #0]
   b5018:	4770      	bx	lr
	...

000b501c <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   b501c:	b510      	push	{r4, lr}
   b501e:	4b03      	ldr	r3, [pc, #12]	; (b502c <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   b5020:	6003      	str	r3, [r0, #0]
   b5022:	4604      	mov	r4, r0
   b5024:	f001 f960 	bl	b62e8 <_ZN10JsonWriterD1Ev>
   b5028:	4620      	mov	r0, r4
   b502a:	bd10      	pop	{r4, pc}
   b502c:	000b9670 	.word	0x000b9670

000b5030 <_ZN16JsonWriterStaticILj256EED0Ev>:
   b5030:	b510      	push	{r4, lr}
   b5032:	4604      	mov	r4, r0
   b5034:	f7ff fff2 	bl	b501c <_ZN16JsonWriterStaticILj256EED1Ev>
   b5038:	4620      	mov	r0, r4
   b503a:	f44f 7198 	mov.w	r1, #304	; 0x130
   b503e:	f7ff ffe2 	bl	b5006 <_ZdlPvj>
   b5042:	4620      	mov	r0, r4
   b5044:	bd10      	pop	{r4, pc}

000b5046 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5046:	b40e      	push	{r1, r2, r3}
   b5048:	b503      	push	{r0, r1, lr}
   b504a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b504c:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b504e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5052:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b5054:	f002 f8fd 	bl	b7252 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5058:	b002      	add	sp, #8
   b505a:	f85d eb04 	ldr.w	lr, [sp], #4
   b505e:	b003      	add	sp, #12
   b5060:	4770      	bx	lr
	...

000b5064 <setup>:
void createEventPayload(float temp, float humidity, float pressure, String airQuality, float current_v, float delta_v);
void updateDisplay(int temp, int humidity, int pressure, String airQuality, float voltage, int batt_percent, bool charging);
int volt_to_percent(float voltage);

void setup()
{
   b5064:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b5066:	f002 fd75 	bl	b7b54 <_Z16_fetch_usbserialv>
   b506a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b506e:	f002 fd65 	bl	b7b3c <_ZN9USBSerial5beginEl>
  delay(50);
   b5072:	2032      	movs	r0, #50	; 0x32
   b5074:	f002 f95a 	bl	b732c <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
   b5078:	2100      	movs	r1, #0
   b507a:	2004      	movs	r0, #4
   b507c:	f002 ffc8 	bl	b8010 <pinMode>
  pinMode(BATT, AN_INPUT);
   b5080:	2106      	movs	r1, #6
   b5082:	2021      	movs	r0, #33	; 0x21
   b5084:	f002 ffc4 	bl	b8010 <pinMode>
  pinMode(CHG, INPUT);
   b5088:	2100      	movs	r1, #0
   b508a:	2023      	movs	r0, #35	; 0x23
   b508c:	f002 ffc0 	bl	b8010 <pinMode>
  pinMode(PWR, INPUT);
   b5090:	2022      	movs	r0, #34	; 0x22
   b5092:	2100      	movs	r1, #0
   b5094:	f002 ffbc 	bl	b8010 <pinMode>


  if (aqSensor.init())
   b5098:	4834      	ldr	r0, [pc, #208]	; (b516c <setup+0x108>)
   b509a:	f001 fa7a 	bl	b6592 <_ZN16AirQualitySensor4initEv>
   b509e:	2800      	cmp	r0, #0
   b50a0:	d05b      	beq.n	b515a <setup+0xf6>
  {
    Serial.println("Air Quality Sensor ready.");
   b50a2:	f002 fd57 	bl	b7b54 <_Z16_fetch_usbserialv>
   b50a6:	4932      	ldr	r1, [pc, #200]	; (b5170 <setup+0x10c>)
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
   b50a8:	f002 f8ab 	bl	b7202 <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
   b50ac:	f003 f862 	bl	b8174 <_Z19__fetch_global_Wirev>
   b50b0:	f002 fe26 	bl	b7d00 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   b50b4:	482f      	ldr	r0, [pc, #188]	; (b5174 <setup+0x110>)
   b50b6:	f001 fae5 	bl	b6684 <_ZN9SeeedOLED4initEv>

  // Rotate Screen
  SeeedOled.sendCommand(0xC8);
   b50ba:	482e      	ldr	r0, [pc, #184]	; (b5174 <setup+0x110>)
   b50bc:	21c8      	movs	r1, #200	; 0xc8
   b50be:	f001 faf3 	bl	b66a8 <_ZN9SeeedOLED11sendCommandEh>
  SeeedOled.sendCommand(0xA1);
   b50c2:	482c      	ldr	r0, [pc, #176]	; (b5174 <setup+0x110>)
   b50c4:	21a1      	movs	r1, #161	; 0xa1
   b50c6:	f001 faef 	bl	b66a8 <_ZN9SeeedOLED11sendCommandEh>
  SeeedOled.setBrightness(0x00);
   b50ca:	2100      	movs	r1, #0
   b50cc:	4829      	ldr	r0, [pc, #164]	; (b5174 <setup+0x110>)
   b50ce:	f001 fb03 	bl	b66d8 <_ZN9SeeedOLED13setBrightnessEh>
  SeeedOled.clearDisplay();
   b50d2:	4828      	ldr	r0, [pc, #160]	; (b5174 <setup+0x110>)
   b50d4:	f001 fb5a 	bl	b678c <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   b50d8:	4826      	ldr	r0, [pc, #152]	; (b5174 <setup+0x110>)
   b50da:	f001 fc07 	bl	b68ec <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   b50de:	4825      	ldr	r0, [pc, #148]	; (b5174 <setup+0x110>)
   b50e0:	f001 fb04 	bl	b66ec <_ZN9SeeedOLED11setPageModeEv>
  SeeedOled.setTextXY(0, 0);
   b50e4:	2200      	movs	r2, #0
   b50e6:	4611      	mov	r1, r2
   b50e8:	4822      	ldr	r0, [pc, #136]	; (b5174 <setup+0x110>)
   b50ea:	f001 fb0a 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>

  SeeedOled.setTextXY(2, 0);
   b50ee:	2200      	movs	r2, #0
   b50f0:	4820      	ldr	r0, [pc, #128]	; (b5174 <setup+0x110>)
   b50f2:	2102      	movs	r1, #2
   b50f4:	f001 fb05 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   b50f8:	491f      	ldr	r1, [pc, #124]	; (b5178 <setup+0x114>)
   b50fa:	481e      	ldr	r0, [pc, #120]	; (b5174 <setup+0x110>)
   b50fc:	f001 fb67 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   b5100:	2200      	movs	r2, #0
   b5102:	481c      	ldr	r0, [pc, #112]	; (b5174 <setup+0x110>)
   b5104:	2103      	movs	r1, #3
   b5106:	f001 fafc 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Air Quality");
   b510a:	491c      	ldr	r1, [pc, #112]	; (b517c <setup+0x118>)
   b510c:	4819      	ldr	r0, [pc, #100]	; (b5174 <setup+0x110>)
   b510e:	f001 fb5e 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   b5112:	2200      	movs	r2, #0
   b5114:	4817      	ldr	r0, [pc, #92]	; (b5174 <setup+0x110>)
   b5116:	2104      	movs	r1, #4
   b5118:	f001 faf3 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Monitor");
   b511c:	4918      	ldr	r1, [pc, #96]	; (b5180 <setup+0x11c>)
   b511e:	4815      	ldr	r0, [pc, #84]	; (b5174 <setup+0x110>)
   b5120:	f001 fb55 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(7,0);
   b5124:	2200      	movs	r2, #0
   b5126:	4813      	ldr	r0, [pc, #76]	; (b5174 <setup+0x110>)
   b5128:	2107      	movs	r1, #7
   b512a:	f001 faea 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("VER. ");
   b512e:	4915      	ldr	r1, [pc, #84]	; (b5184 <setup+0x120>)
   b5130:	4810      	ldr	r0, [pc, #64]	; (b5174 <setup+0x110>)
   b5132:	f001 fb4c 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putString(VER_NUM);
   b5136:	480f      	ldr	r0, [pc, #60]	; (b5174 <setup+0x110>)
   b5138:	4913      	ldr	r1, [pc, #76]	; (b5188 <setup+0x124>)
   b513a:	f001 fb48 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
   b513e:	4813      	ldr	r0, [pc, #76]	; (b518c <setup+0x128>)
   b5140:	f001 f8a7 	bl	b6292 <_ZN15Adafruit_BME2805beginEv>
   b5144:	b168      	cbz	r0, b5162 <setup+0xfe>
  {
    Serial.println("BME280 Sensor ready.");
   b5146:	f002 fd05 	bl	b7b54 <_Z16_fetch_usbserialv>
   b514a:	4911      	ldr	r1, [pc, #68]	; (b5190 <setup+0x12c>)
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
   b514c:	f002 f859 	bl	b7202 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5150:	f001 fc20 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
  }

  lastInterval = millis();
   b5154:	4b0f      	ldr	r3, [pc, #60]	; (b5194 <setup+0x130>)
   b5156:	6018      	str	r0, [r3, #0]
}
   b5158:	bd08      	pop	{r3, pc}
    Serial.println("Air Quality Sensor ERROR!");
   b515a:	f002 fcfb 	bl	b7b54 <_Z16_fetch_usbserialv>
   b515e:	490e      	ldr	r1, [pc, #56]	; (b5198 <setup+0x134>)
   b5160:	e7a2      	b.n	b50a8 <setup+0x44>
    Serial.println("BME280 Sensor ERROR!");
   b5162:	f002 fcf7 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5166:	490d      	ldr	r1, [pc, #52]	; (b519c <setup+0x138>)
   b5168:	e7f0      	b.n	b514c <setup+0xe8>
   b516a:	bf00      	nop
   b516c:	2003e648 	.word	0x2003e648
   b5170:	000b9484 	.word	0x000b9484
   b5174:	2003e6cc 	.word	0x2003e6cc
   b5178:	000b94b8 	.word	0x000b94b8
   b517c:	000b94c1 	.word	0x000b94c1
   b5180:	000b94cd 	.word	0x000b94cd
   b5184:	000b94d5 	.word	0x000b94d5
   b5188:	000b94db 	.word	0x000b94db
   b518c:	2003e664 	.word	0x2003e664
   b5190:	000b94e3 	.word	0x000b94e3
   b5194:	2003e6b0 	.word	0x2003e6b0
   b5198:	000b949e 	.word	0x000b949e
   b519c:	000b94f8 	.word	0x000b94f8

000b51a0 <_Z15volt_to_percentf>:
    lastInterval = millis();
  }
}

int volt_to_percent(float voltage)
{
   b51a0:	b538      	push	{r3, r4, r5, lr}
   b51a2:	ee10 0a10 	vmov	r0, s0
  if(voltage < 3.1)
   b51a6:	f7ff f89f 	bl	b42e8 <__aeabi_f2d>
   b51aa:	a312      	add	r3, pc, #72	; (adr r3, b51f4 <_Z15volt_to_percentf+0x54>)
   b51ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51b0:	4604      	mov	r4, r0
   b51b2:	460d      	mov	r5, r1
   b51b4:	f7ff fb62 	bl	b487c <__aeabi_dcmplt>
   b51b8:	b9a8      	cbnz	r0, b51e6 <_Z15volt_to_percentf+0x46>
  {
    return 0;
  }
  if(voltage > 4.1)
   b51ba:	a310      	add	r3, pc, #64	; (adr r3, b51fc <_Z15volt_to_percentf+0x5c>)
   b51bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51c0:	4620      	mov	r0, r4
   b51c2:	4629      	mov	r1, r5
   b51c4:	f7ff fb78 	bl	b48b8 <__aeabi_dcmpgt>
   b51c8:	b978      	cbnz	r0, b51ea <_Z15volt_to_percentf+0x4a>
  {
    return 100;
  }
  return (int)((voltage-3.1)*100);
   b51ca:	a30a      	add	r3, pc, #40	; (adr r3, b51f4 <_Z15volt_to_percentf+0x54>)
   b51cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51d0:	4620      	mov	r0, r4
   b51d2:	4629      	mov	r1, r5
   b51d4:	f7fe ff28 	bl	b4028 <__aeabi_dsub>
   b51d8:	4b05      	ldr	r3, [pc, #20]	; (b51f0 <_Z15volt_to_percentf+0x50>)
   b51da:	2200      	movs	r2, #0
   b51dc:	f7ff f8dc 	bl	b4398 <__aeabi_dmul>
   b51e0:	f7ff fb8a 	bl	b48f8 <__aeabi_d2iz>
}
   b51e4:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b51e6:	2000      	movs	r0, #0
   b51e8:	e7fc      	b.n	b51e4 <_Z15volt_to_percentf+0x44>
    return 100;
   b51ea:	2064      	movs	r0, #100	; 0x64
   b51ec:	e7fa      	b.n	b51e4 <_Z15volt_to_percentf+0x44>
   b51ee:	bf00      	nop
   b51f0:	40590000 	.word	0x40590000
   b51f4:	cccccccd 	.word	0xcccccccd
   b51f8:	4008cccc 	.word	0x4008cccc
   b51fc:	66666666 	.word	0x66666666
   b5200:	40106666 	.word	0x40106666

000b5204 <_Z13getAirQualityv>:

String getAirQuality()
{
   b5204:	b538      	push	{r3, r4, r5, lr}
   b5206:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
   b5208:	4811      	ldr	r0, [pc, #68]	; (b5250 <_Z13getAirQualityv+0x4c>)
   b520a:	f001 f9f1 	bl	b65f0 <_ZN16AirQualitySensor5slopeEv>
  String qual = "None";
   b520e:	4911      	ldr	r1, [pc, #68]	; (b5254 <_Z13getAirQualityv+0x50>)
  int quality = aqSensor.slope();
   b5210:	4605      	mov	r5, r0
  String qual = "None";
   b5212:	4620      	mov	r0, r4
   b5214:	f001 ff5f 	bl	b70d6 <_ZN6StringC1EPK19__FlashStringHelper>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
   b5218:	4b0f      	ldr	r3, [pc, #60]	; (b5258 <_Z13getAirQualityv+0x54>)
   b521a:	681b      	ldr	r3, [r3, #0]
   b521c:	42ab      	cmp	r3, r5
   b521e:	d105      	bne.n	b522c <_Z13getAirQualityv+0x28>
  {
    qual = "Danger";
   b5220:	490e      	ldr	r1, [pc, #56]	; (b525c <_Z13getAirQualityv+0x58>)
  {
    qual = "Low Pollution";
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
  {
    qual = "Fresh Air";
   b5222:	4620      	mov	r0, r4
   b5224:	f001 ff85 	bl	b7132 <_ZN6StringaSEPKc>
  }

  return qual;
}
   b5228:	4620      	mov	r0, r4
   b522a:	bd38      	pop	{r3, r4, r5, pc}
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
   b522c:	4b0c      	ldr	r3, [pc, #48]	; (b5260 <_Z13getAirQualityv+0x5c>)
   b522e:	681b      	ldr	r3, [r3, #0]
   b5230:	42ab      	cmp	r3, r5
   b5232:	d101      	bne.n	b5238 <_Z13getAirQualityv+0x34>
    qual = "High Pollution";
   b5234:	490b      	ldr	r1, [pc, #44]	; (b5264 <_Z13getAirQualityv+0x60>)
   b5236:	e7f4      	b.n	b5222 <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::LOW_POLLUTION)
   b5238:	4b0b      	ldr	r3, [pc, #44]	; (b5268 <_Z13getAirQualityv+0x64>)
   b523a:	681b      	ldr	r3, [r3, #0]
   b523c:	42ab      	cmp	r3, r5
   b523e:	d101      	bne.n	b5244 <_Z13getAirQualityv+0x40>
    qual = "Low Pollution";
   b5240:	490a      	ldr	r1, [pc, #40]	; (b526c <_Z13getAirQualityv+0x68>)
   b5242:	e7ee      	b.n	b5222 <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::FRESH_AIR)
   b5244:	4b0a      	ldr	r3, [pc, #40]	; (b5270 <_Z13getAirQualityv+0x6c>)
   b5246:	681b      	ldr	r3, [r3, #0]
   b5248:	42ab      	cmp	r3, r5
   b524a:	d1ed      	bne.n	b5228 <_Z13getAirQualityv+0x24>
    qual = "Fresh Air";
   b524c:	4909      	ldr	r1, [pc, #36]	; (b5274 <_Z13getAirQualityv+0x70>)
   b524e:	e7e8      	b.n	b5222 <_Z13getAirQualityv+0x1e>
   b5250:	2003e648 	.word	0x2003e648
   b5254:	000b950d 	.word	0x000b950d
   b5258:	000b96fc 	.word	0x000b96fc
   b525c:	000b9512 	.word	0x000b9512
   b5260:	000b9704 	.word	0x000b9704
   b5264:	000b9519 	.word	0x000b9519
   b5268:	000b9700 	.word	0x000b9700
   b526c:	000b9528 	.word	0x000b9528
   b5270:	000b9708 	.word	0x000b9708
   b5274:	000b9536 	.word	0x000b9536

000b5278 <_Z12getBMEValuesRfS_S_>:

int getBMEValues(float &temp, float &pressure, float &humidity)
{
   b5278:	b570      	push	{r4, r5, r6, lr}
   b527a:	4606      	mov	r6, r0
  temp = bme.readTemperature();
   b527c:	480b      	ldr	r0, [pc, #44]	; (b52ac <_Z12getBMEValuesRfS_S_+0x34>)
{
   b527e:	460d      	mov	r5, r1
   b5280:	4614      	mov	r4, r2
  temp = bme.readTemperature();
   b5282:	f000 fe63 	bl	b5f4c <_ZN15Adafruit_BME28015readTemperatureEv>
  pressure = (bme.readPressure() / 100.0F);
   b5286:	4809      	ldr	r0, [pc, #36]	; (b52ac <_Z12getBMEValuesRfS_S_+0x34>)
  temp = bme.readTemperature();
   b5288:	ed86 0a00 	vstr	s0, [r6]
  pressure = (bme.readPressure() / 100.0F);
   b528c:	f000 fed8 	bl	b6040 <_ZN15Adafruit_BME28012readPressureEv>
   b5290:	ed9f 7a07 	vldr	s14, [pc, #28]	; b52b0 <_Z12getBMEValuesRfS_S_+0x38>
  humidity = bme.readHumidity();
   b5294:	4805      	ldr	r0, [pc, #20]	; (b52ac <_Z12getBMEValuesRfS_S_+0x34>)
  pressure = (bme.readPressure() / 100.0F);
   b5296:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b529a:	edc5 7a00 	vstr	s15, [r5]
  humidity = bme.readHumidity();
   b529e:	f000 fe85 	bl	b5fac <_ZN15Adafruit_BME28012readHumidityEv>

  return 1;
}
   b52a2:	2001      	movs	r0, #1
  humidity = bme.readHumidity();
   b52a4:	ed84 0a00 	vstr	s0, [r4]
}
   b52a8:	bd70      	pop	{r4, r5, r6, pc}
   b52aa:	bf00      	nop
   b52ac:	2003e664 	.word	0x2003e664
   b52b0:	42c80000 	.word	0x42c80000
   b52b4:	00000000 	.word	0x00000000

000b52b8 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   b52b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b52bc:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   b52c0:	4c49      	ldr	r4, [pc, #292]	; (b53e8 <_Z21getDustSensorReadingsv+0x130>)
   b52c2:	4b4a      	ldr	r3, [pc, #296]	; (b53ec <_Z21getDustSensorReadingsv+0x134>)
   b52c4:	6822      	ldr	r2, [r4, #0]
   b52c6:	2a00      	cmp	r2, #0
   b52c8:	d177      	bne.n	b53ba <_Z21getDustSensorReadingsv+0x102>
  {
    lowpulseoccupancy = last_lpo;
   b52ca:	681b      	ldr	r3, [r3, #0]
   b52cc:	6023      	str	r3, [r4, #0]
  {
    // Store previous LPO incase of 0 value
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   b52ce:	6820      	ldr	r0, [r4, #0]
   b52d0:	4d47      	ldr	r5, [pc, #284]	; (b53f0 <_Z21getDustSensorReadingsv+0x138>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   b52d2:	f8df a130 	ldr.w	sl, [pc, #304]	; b5404 <_Z21getDustSensorReadingsv+0x14c>
  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   b52d6:	f7fe ffe5 	bl	b42a4 <__aeabi_ui2d>
   b52da:	a339      	add	r3, pc, #228	; (adr r3, b53c0 <_Z21getDustSensorReadingsv+0x108>)
   b52dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52e0:	f7ff f984 	bl	b45ec <__aeabi_ddiv>
   b52e4:	f7ff fb30 	bl	b4948 <__aeabi_d2f>
   b52e8:	6028      	str	r0, [r5, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b52ea:	f7fe fffd 	bl	b42e8 <__aeabi_f2d>
   b52ee:	ed9f 1b36 	vldr	d1, [pc, #216]	; b53c8 <_Z21getDustSensorReadingsv+0x110>
   b52f2:	ec41 0b10 	vmov	d0, r0, r1
   b52f6:	f002 fffb 	bl	b82f0 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   b52fa:	ed95 8a00 	vldr	s16, [r5]
   b52fe:	ee18 0a10 	vmov	r0, s16
   b5302:	ec57 6b10 	vmov	r6, r7, d0
   b5306:	f7fe ffef 	bl	b42e8 <__aeabi_f2d>
   b530a:	a331      	add	r3, pc, #196	; (adr r3, b53d0 <_Z21getDustSensorReadingsv+0x118>)
   b530c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5310:	4680      	mov	r8, r0
   b5312:	4689      	mov	r9, r1
   b5314:	4630      	mov	r0, r6
   b5316:	4639      	mov	r1, r7
   b5318:	f7ff f83e 	bl	b4398 <__aeabi_dmul>
   b531c:	4642      	mov	r2, r8
   b531e:	4606      	mov	r6, r0
   b5320:	460f      	mov	r7, r1
   b5322:	464b      	mov	r3, r9
   b5324:	4640      	mov	r0, r8
   b5326:	4649      	mov	r1, r9
   b5328:	f7ff f836 	bl	b4398 <__aeabi_dmul>
   b532c:	a32a      	add	r3, pc, #168	; (adr r3, b53d8 <_Z21getDustSensorReadingsv+0x120>)
   b532e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5332:	f7ff f831 	bl	b4398 <__aeabi_dmul>
   b5336:	4602      	mov	r2, r0
   b5338:	460b      	mov	r3, r1
   b533a:	4630      	mov	r0, r6
   b533c:	4639      	mov	r1, r7
   b533e:	f7fe fe73 	bl	b4028 <__aeabi_dsub>
   b5342:	eddf 7a2c 	vldr	s15, [pc, #176]	; b53f4 <_Z21getDustSensorReadingsv+0x13c>
   b5346:	ee68 7a27 	vmul.f32	s15, s16, s15
   b534a:	4606      	mov	r6, r0
   b534c:	ee17 0a90 	vmov	r0, s15
   b5350:	460f      	mov	r7, r1
   b5352:	f7fe ffc9 	bl	b42e8 <__aeabi_f2d>
   b5356:	4602      	mov	r2, r0
   b5358:	460b      	mov	r3, r1
   b535a:	4630      	mov	r0, r6
   b535c:	4639      	mov	r1, r7
   b535e:	f7fe fe65 	bl	b402c <__adddf3>
   b5362:	a31f      	add	r3, pc, #124	; (adr r3, b53e0 <_Z21getDustSensorReadingsv+0x128>)
   b5364:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5368:	f7fe fe60 	bl	b402c <__adddf3>
   b536c:	f7ff faec 	bl	b4948 <__aeabi_d2f>
   b5370:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %lu", lowpulseoccupancy);
   b5374:	f002 fbee 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5378:	6822      	ldr	r2, [r4, #0]
   b537a:	491f      	ldr	r1, [pc, #124]	; (b53f8 <_Z21getDustSensorReadingsv+0x140>)
   b537c:	f7ff fe63 	bl	b5046 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   b5380:	f002 fbe8 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5384:	4604      	mov	r4, r0
   b5386:	6828      	ldr	r0, [r5, #0]
   b5388:	f7fe ffae 	bl	b42e8 <__aeabi_f2d>
   b538c:	4602      	mov	r2, r0
   b538e:	460b      	mov	r3, r1
   b5390:	4620      	mov	r0, r4
   b5392:	491a      	ldr	r1, [pc, #104]	; (b53fc <_Z21getDustSensorReadingsv+0x144>)
   b5394:	f7ff fe57 	bl	b5046 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   b5398:	f002 fbdc 	bl	b7b54 <_Z16_fetch_usbserialv>
   b539c:	4604      	mov	r4, r0
   b539e:	f8da 0000 	ldr.w	r0, [sl]
   b53a2:	f7fe ffa1 	bl	b42e8 <__aeabi_f2d>
   b53a6:	4602      	mov	r2, r0
   b53a8:	460b      	mov	r3, r1
   b53aa:	4620      	mov	r0, r4
   b53ac:	4914      	ldr	r1, [pc, #80]	; (b5400 <_Z21getDustSensorReadingsv+0x148>)
   b53ae:	f7ff fe4a 	bl	b5046 <_ZN5Print8printlnfEPKcz>
}
   b53b2:	ecbd 8b02 	vpop	{d8}
   b53b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    last_lpo = lowpulseoccupancy;
   b53ba:	601a      	str	r2, [r3, #0]
   b53bc:	e787      	b.n	b52ce <_Z21getDustSensorReadingsv+0x16>
   b53be:	bf00      	nop
   b53c0:	00000000 	.word	0x00000000
   b53c4:	41224f80 	.word	0x41224f80
   b53c8:	00000000 	.word	0x00000000
   b53cc:	40080000 	.word	0x40080000
   b53d0:	9999999a 	.word	0x9999999a
   b53d4:	3ff19999 	.word	0x3ff19999
   b53d8:	66666666 	.word	0x66666666
   b53dc:	400e6666 	.word	0x400e6666
   b53e0:	3d70a3d7 	.word	0x3d70a3d7
   b53e4:	3fe3d70a 	.word	0x3fe3d70a
   b53e8:	2003e6b8 	.word	0x2003e6b8
   b53ec:	2003e6b4 	.word	0x2003e6b4
   b53f0:	2003e6bc 	.word	0x2003e6bc
   b53f4:	44020000 	.word	0x44020000
   b53f8:	000b9540 	.word	0x000b9540
   b53fc:	000b9549 	.word	0x000b9549
   b5400:	000b9555 	.word	0x000b9555
   b5404:	2003e6a8 	.word	0x2003e6a8

000b5408 <_Z13updateDisplayiii6Stringfib>:

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality, float voltage, int batt_percent, bool charging)
{
   b5408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b540c:	ed2d 8b02 	vpush	{d8}
   b5410:	4698      	mov	r8, r3
   b5412:	4607      	mov	r7, r0
  SeeedOled.clearDisplay();
   b5414:	4855      	ldr	r0, [pc, #340]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
{
   b5416:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   b541a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b541e:	eeb0 8a40 	vmov.f32	s16, s0
   b5422:	4615      	mov	r5, r2
   b5424:	460e      	mov	r6, r1
  SeeedOled.clearDisplay();
   b5426:	f001 f9b1 	bl	b678c <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
   b542a:	2203      	movs	r2, #3
   b542c:	484f      	ldr	r0, [pc, #316]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b542e:	2100      	movs	r1, #0
   b5430:	f001 f967 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
   b5434:	f8d8 1000 	ldr.w	r1, [r8]
   b5438:	484c      	ldr	r0, [pc, #304]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b543a:	f001 f9c8 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   b543e:	2200      	movs	r2, #0
   b5440:	484a      	ldr	r0, [pc, #296]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5442:	2102      	movs	r1, #2
   b5444:	f001 f95d 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
   b5448:	4949      	ldr	r1, [pc, #292]	; (b5570 <_Z13updateDisplayiii6Stringfib+0x168>)
   b544a:	4848      	ldr	r0, [pc, #288]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b544c:	f001 f9bf 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   b5450:	4639      	mov	r1, r7
   b5452:	4846      	ldr	r0, [pc, #280]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5454:	f001 f9c8 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   b5458:	4946      	ldr	r1, [pc, #280]	; (b5574 <_Z13updateDisplayiii6Stringfib+0x16c>)
   b545a:	4844      	ldr	r0, [pc, #272]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b545c:	f001 f9b7 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
   b5460:	2200      	movs	r2, #0
   b5462:	4842      	ldr	r0, [pc, #264]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5464:	2103      	movs	r1, #3
   b5466:	f001 f94c 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
   b546a:	4943      	ldr	r1, [pc, #268]	; (b5578 <_Z13updateDisplayiii6Stringfib+0x170>)
   b546c:	483f      	ldr	r0, [pc, #252]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b546e:	f001 f9ae 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   b5472:	4631      	mov	r1, r6
   b5474:	483d      	ldr	r0, [pc, #244]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5476:	f001 f9b7 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   b547a:	4940      	ldr	r1, [pc, #256]	; (b557c <_Z13updateDisplayiii6Stringfib+0x174>)
   b547c:	483b      	ldr	r0, [pc, #236]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b547e:	f001 f9a6 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   b5482:	2200      	movs	r2, #0
   b5484:	4839      	ldr	r0, [pc, #228]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5486:	2104      	movs	r1, #4
   b5488:	f001 f93b 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
   b548c:	493c      	ldr	r1, [pc, #240]	; (b5580 <_Z13updateDisplayiii6Stringfib+0x178>)
   b548e:	4837      	ldr	r0, [pc, #220]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5490:	f001 f99d 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
   b5494:	4629      	mov	r1, r5
   b5496:	4835      	ldr	r0, [pc, #212]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
   b5498:	4d3a      	ldr	r5, [pc, #232]	; (b5584 <_Z13updateDisplayiii6Stringfib+0x17c>)
  SeeedOled.putNumber(pressure);
   b549a:	f001 f9a5 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
   b549e:	493a      	ldr	r1, [pc, #232]	; (b5588 <_Z13updateDisplayiii6Stringfib+0x180>)
   b54a0:	4832      	ldr	r0, [pc, #200]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54a2:	f001 f994 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  if (concentration > 1)
   b54a6:	ed95 7a00 	vldr	s14, [r5]
   b54aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b54ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b54b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54b6:	dd15      	ble.n	b54e4 <_Z13updateDisplayiii6Stringfib+0xdc>
  {
    SeeedOled.setTextXY(5, 0);
   b54b8:	2200      	movs	r2, #0
   b54ba:	482c      	ldr	r0, [pc, #176]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54bc:	2105      	movs	r1, #5
   b54be:	f001 f920 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
   b54c2:	4932      	ldr	r1, [pc, #200]	; (b558c <_Z13updateDisplayiii6Stringfib+0x184>)
   b54c4:	4829      	ldr	r0, [pc, #164]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54c6:	f001 f982 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
   b54ca:	edd5 7a00 	vldr	s15, [r5]
   b54ce:	4827      	ldr	r0, [pc, #156]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b54d4:	ee17 1a90 	vmov	r1, s15
   b54d8:	f001 f986 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
   b54dc:	492c      	ldr	r1, [pc, #176]	; (b5590 <_Z13updateDisplayiii6Stringfib+0x188>)
   b54de:	4823      	ldr	r0, [pc, #140]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54e0:	f001 f975 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
  }

  // If charging, or running off battery power, print the following:
  if(charging || !digitalRead(PWR))
   b54e4:	b32c      	cbz	r4, b5532 <_Z13updateDisplayiii6Stringfib+0x12a>
  {
    SeeedOled.setTextXY(6, 0);
   b54e6:	2200      	movs	r2, #0
   b54e8:	4820      	ldr	r0, [pc, #128]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54ea:	2106      	movs	r1, #6
   b54ec:	f001 f909 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Bat:");
   b54f0:	4928      	ldr	r1, [pc, #160]	; (b5594 <_Z13updateDisplayiii6Stringfib+0x18c>)
   b54f2:	481e      	ldr	r0, [pc, #120]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54f4:	f001 f96b 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(batt_percent);
   b54f8:	4649      	mov	r1, r9
   b54fa:	481c      	ldr	r0, [pc, #112]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b54fc:	f001 f974 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString("% (");
   b5500:	4925      	ldr	r1, [pc, #148]	; (b5598 <_Z13updateDisplayiii6Stringfib+0x190>)
   b5502:	481a      	ldr	r0, [pc, #104]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5504:	f001 f963 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putFloat(voltage);
   b5508:	eeb0 0a48 	vmov.f32	s0, s16
   b550c:	4817      	ldr	r0, [pc, #92]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b550e:	f001 f9a3 	bl	b6858 <_ZN9SeeedOLED8putFloatEf>
    SeeedOled.putString("V)");
   b5512:	4922      	ldr	r1, [pc, #136]	; (b559c <_Z13updateDisplayiii6Stringfib+0x194>)
   b5514:	4815      	ldr	r0, [pc, #84]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5516:	f001 f95a 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>

    SeeedOled.setTextXY(7,0);
   b551a:	4814      	ldr	r0, [pc, #80]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b551c:	2107      	movs	r1, #7
   b551e:	2200      	movs	r2, #0
   b5520:	f001 f8ef 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Charging: ");
   b5524:	491e      	ldr	r1, [pc, #120]	; (b55a0 <_Z13updateDisplayiii6Stringfib+0x198>)
   b5526:	4811      	ldr	r0, [pc, #68]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5528:	f001 f951 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    charging ? SeeedOled.putString("True") : SeeedOled.putString("False");
   b552c:	b9e4      	cbnz	r4, b5568 <_Z13updateDisplayiii6Stringfib+0x160>
   b552e:	491d      	ldr	r1, [pc, #116]	; (b55a4 <_Z13updateDisplayiii6Stringfib+0x19c>)
   b5530:	e013      	b.n	b555a <_Z13updateDisplayiii6Stringfib+0x152>
  if(charging || !digitalRead(PWR))
   b5532:	2022      	movs	r0, #34	; 0x22
   b5534:	f002 fd96 	bl	b8064 <digitalRead>
   b5538:	2800      	cmp	r0, #0
   b553a:	d0d4      	beq.n	b54e6 <_Z13updateDisplayiii6Stringfib+0xde>
  }
  else
  {
    // Clear those lines
    SeeedOled.setTextXY(6, 0);
   b553c:	4622      	mov	r2, r4
   b553e:	480b      	ldr	r0, [pc, #44]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5540:	2106      	movs	r1, #6
   b5542:	f001 f8de 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString(CLEAR_LINE);
   b5546:	4918      	ldr	r1, [pc, #96]	; (b55a8 <_Z13updateDisplayiii6Stringfib+0x1a0>)
   b5548:	4808      	ldr	r0, [pc, #32]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b554a:	f001 f940 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.setTextXY(7, 0);
   b554e:	2107      	movs	r1, #7
   b5550:	4806      	ldr	r0, [pc, #24]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
   b5552:	4622      	mov	r2, r4
   b5554:	f001 f8d5 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString(CLEAR_LINE);
   b5558:	4913      	ldr	r1, [pc, #76]	; (b55a8 <_Z13updateDisplayiii6Stringfib+0x1a0>)
    charging ? SeeedOled.putString("True") : SeeedOled.putString("False");
   b555a:	4804      	ldr	r0, [pc, #16]	; (b556c <_Z13updateDisplayiii6Stringfib+0x164>)
  }
   b555c:	ecbd 8b02 	vpop	{d8}
   b5560:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    charging ? SeeedOled.putString("True") : SeeedOled.putString("False");
   b5564:	f001 b933 	b.w	b67ce <_ZN9SeeedOLED9putStringEPKc>
   b5568:	4910      	ldr	r1, [pc, #64]	; (b55ac <_Z13updateDisplayiii6Stringfib+0x1a4>)
   b556a:	e7f6      	b.n	b555a <_Z13updateDisplayiii6Stringfib+0x152>
   b556c:	2003e6cc 	.word	0x2003e6cc
   b5570:	000b956d 	.word	0x000b956d
   b5574:	000b9574 	.word	0x000b9574
   b5578:	000b9576 	.word	0x000b9576
   b557c:	000b9553 	.word	0x000b9553
   b5580:	000b9581 	.word	0x000b9581
   b5584:	2003e6a8 	.word	0x2003e6a8
   b5588:	000b9589 	.word	0x000b9589
   b558c:	000b958e 	.word	0x000b958e
   b5590:	000b9566 	.word	0x000b9566
   b5594:	000b9595 	.word	0x000b9595
   b5598:	000b959a 	.word	0x000b959a
   b559c:	000b959e 	.word	0x000b959e
   b55a0:	000b95a1 	.word	0x000b95a1
   b55a4:	000b95c2 	.word	0x000b95c2
   b55a8:	000b95ac 	.word	0x000b95ac
   b55ac:	000b95bd 	.word	0x000b95bd

000b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b55b0:	b513      	push	{r0, r1, r4, lr}
   b55b2:	4604      	mov	r4, r0
   b55b4:	ed8d 0a00 	vstr	s0, [sp]
   b55b8:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b55ba:	f000 ffa1 	bl	b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b55be:	9901      	ldr	r1, [sp, #4]
   b55c0:	2201      	movs	r2, #1
   b55c2:	4620      	mov	r0, r4
   b55c4:	f000 ff0a 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b55c8:	4620      	mov	r0, r4
   b55ca:	213a      	movs	r1, #58	; 0x3a
   b55cc:	f000 feba 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b55d0:	ed9d 0a00 	vldr	s0, [sp]
   b55d4:	4620      	mov	r0, r4
	}
   b55d6:	b002      	add	sp, #8
   b55d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   b55dc:	f000 bfb4 	b.w	b6548 <_ZN10JsonWriter11insertValueEf>

000b55e0 <_Z18createEventPayloadfff6Stringff>:
{
   b55e0:	b530      	push	{r4, r5, lr}
   b55e2:	ed2d 8b06 	vpush	{d8-d10}
  if(concentration == 0.62)
   b55e6:	4c5c      	ldr	r4, [pc, #368]	; (b5758 <_Z18createEventPayloadfff6Stringff+0x178>)
{
   b55e8:	b0d3      	sub	sp, #332	; 0x14c
   b55ea:	4605      	mov	r5, r0
  if(concentration == 0.62)
   b55ec:	6820      	ldr	r0, [r4, #0]
{
   b55ee:	eeb0 aa40 	vmov.f32	s20, s0
   b55f2:	eef0 9a60 	vmov.f32	s19, s1
   b55f6:	eeb0 9a41 	vmov.f32	s18, s2
   b55fa:	eef0 8a61 	vmov.f32	s17, s3
   b55fe:	eeb0 8a42 	vmov.f32	s16, s4
  if(concentration == 0.62)
   b5602:	f7fe fe71 	bl	b42e8 <__aeabi_f2d>
   b5606:	a352      	add	r3, pc, #328	; (adr r3, b5750 <_Z18createEventPayloadfff6Stringff+0x170>)
   b5608:	e9d3 2300 	ldrd	r2, r3, [r3]
   b560c:	f7ff f92c 	bl	b4868 <__aeabi_dcmpeq>
   b5610:	b108      	cbz	r0, b5616 <_Z18createEventPayloadfff6Stringff+0x36>
    concentration = 0;
   b5612:	2300      	movs	r3, #0
   b5614:	6023      	str	r3, [r4, #0]
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   b5616:	f44f 7280 	mov.w	r2, #256	; 0x100
   b561a:	a912      	add	r1, sp, #72	; 0x48
   b561c:	a806      	add	r0, sp, #24
   b561e:	f000 fe7f 	bl	b6320 <_ZN10JsonWriterC1EPcj>
   b5622:	4b4e      	ldr	r3, [pc, #312]	; (b575c <_Z18createEventPayloadfff6Stringff+0x17c>)
   b5624:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   b5626:	227d      	movs	r2, #125	; 0x7d
   b5628:	217b      	movs	r1, #123	; 0x7b
   b562a:	a806      	add	r0, sp, #24
   b562c:	f000 ff73 	bl	b6516 <_ZN10JsonWriter18startObjectOrArrayEcc>
		insertCheckSeparator();
   b5630:	a806      	add	r0, sp, #24
   b5632:	f000 ff65 	bl	b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b5636:	2201      	movs	r2, #1
   b5638:	4949      	ldr	r1, [pc, #292]	; (b5760 <_Z18createEventPayloadfff6Stringff+0x180>)
   b563a:	a806      	add	r0, sp, #24
   b563c:	f000 fece 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b5640:	213a      	movs	r1, #58	; 0x3a
   b5642:	a806      	add	r0, sp, #24
   b5644:	f000 fe7e 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b5648:	2201      	movs	r2, #1
   b564a:	4946      	ldr	r1, [pc, #280]	; (b5764 <_Z18createEventPayloadfff6Stringff+0x184>)
   b564c:	a806      	add	r0, sp, #24
   b564e:	f000 fec5 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
    jw.insertKeyValue("temp", temp);
   b5652:	4945      	ldr	r1, [pc, #276]	; (b5768 <_Z18createEventPayloadfff6Stringff+0x188>)
   b5654:	eeb0 0a4a 	vmov.f32	s0, s20
   b5658:	a806      	add	r0, sp, #24
   b565a:	f7ff ffa9 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   b565e:	4943      	ldr	r1, [pc, #268]	; (b576c <_Z18createEventPayloadfff6Stringff+0x18c>)
   b5660:	eeb0 0a69 	vmov.f32	s0, s19
   b5664:	a806      	add	r0, sp, #24
   b5666:	f7ff ffa3 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   b566a:	eeb0 0a49 	vmov.f32	s0, s18
   b566e:	4940      	ldr	r1, [pc, #256]	; (b5770 <_Z18createEventPayloadfff6Stringff+0x190>)
   b5670:	a806      	add	r0, sp, #24
   b5672:	f7ff ff9d 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("air-quality", airQuality);
   b5676:	4629      	mov	r1, r5
   b5678:	a802      	add	r0, sp, #8
   b567a:	f001 fd4f 	bl	b711c <_ZN6StringC1ERKS_>
		insertCheckSeparator();
   b567e:	a806      	add	r0, sp, #24
   b5680:	f000 ff3e 	bl	b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b5684:	2201      	movs	r2, #1
   b5686:	493b      	ldr	r1, [pc, #236]	; (b5774 <_Z18createEventPayloadfff6Stringff+0x194>)
   b5688:	a806      	add	r0, sp, #24
   b568a:	f000 fea7 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b568e:	213a      	movs	r1, #58	; 0x3a
   b5690:	a806      	add	r0, sp, #24
   b5692:	f000 fe57 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   b5696:	2201      	movs	r2, #1
   b5698:	9902      	ldr	r1, [sp, #8]
   b569a:	a806      	add	r0, sp, #24
   b569c:	f000 fe9e 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
   b56a0:	a802      	add	r0, sp, #8
   b56a2:	f001 fccd 	bl	b7040 <_ZN6StringD1Ev>
    jw.insertKeyValue("aq_voltage", current_v);
   b56a6:	4934      	ldr	r1, [pc, #208]	; (b5778 <_Z18createEventPayloadfff6Stringff+0x198>)
   b56a8:	eeb0 0a68 	vmov.f32	s0, s17
   b56ac:	a806      	add	r0, sp, #24
   b56ae:	f7ff ff7f 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("aq_delta_v", delta_v);
   b56b2:	eeb0 0a48 	vmov.f32	s0, s16
   b56b6:	4931      	ldr	r1, [pc, #196]	; (b577c <_Z18createEventPayloadfff6Stringff+0x19c>)
   b56b8:	a806      	add	r0, sp, #24
   b56ba:	f7ff ff79 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("dust-lpo", lowpulseoccupancy);
   b56be:	4b30      	ldr	r3, [pc, #192]	; (b5780 <_Z18createEventPayloadfff6Stringff+0x1a0>)
		insertCheckSeparator();
   b56c0:	a806      	add	r0, sp, #24
   b56c2:	681d      	ldr	r5, [r3, #0]
   b56c4:	f000 ff1c 	bl	b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b56c8:	2201      	movs	r2, #1
   b56ca:	492e      	ldr	r1, [pc, #184]	; (b5784 <_Z18createEventPayloadfff6Stringff+0x1a4>)
   b56cc:	a806      	add	r0, sp, #24
   b56ce:	f000 fe85 	bl	b63dc <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b56d2:	213a      	movs	r1, #58	; 0x3a
   b56d4:	a806      	add	r0, sp, #24
   b56d6:	f000 fe35 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b56da:	462a      	mov	r2, r5
   b56dc:	492a      	ldr	r1, [pc, #168]	; (b5788 <_Z18createEventPayloadfff6Stringff+0x1a8>)
   b56de:	a806      	add	r0, sp, #24
   b56e0:	f000 fe6f 	bl	b63c2 <_ZN10JsonWriter13insertsprintfEPKcz>
    jw.insertKeyValue("dust-ratio", ratio);
   b56e4:	4b29      	ldr	r3, [pc, #164]	; (b578c <_Z18createEventPayloadfff6Stringff+0x1ac>)
   b56e6:	492a      	ldr	r1, [pc, #168]	; (b5790 <_Z18createEventPayloadfff6Stringff+0x1b0>)
   b56e8:	ed93 0a00 	vldr	s0, [r3]
   b56ec:	a806      	add	r0, sp, #24
   b56ee:	f7ff ff5f 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    jw.insertKeyValue("dust-concentration", concentration);
   b56f2:	ed94 0a00 	vldr	s0, [r4]
   b56f6:	4927      	ldr	r1, [pc, #156]	; (b5794 <_Z18createEventPayloadfff6Stringff+0x1b4>)
   b56f8:	a806      	add	r0, sp, #24
   b56fa:	f7ff ff59 	bl	b55b0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   b56fe:	a806      	add	r0, sp, #24
   b5700:	f000 fe2e 	bl	b6360 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5704:	4b24      	ldr	r3, [pc, #144]	; (b5798 <_Z18createEventPayloadfff6Stringff+0x1b8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5706:	9a07      	ldr	r2, [sp, #28]
   b5708:	781b      	ldrb	r3, [r3, #0]
   b570a:	f88d 3000 	strb.w	r3, [sp]
   b570e:	4923      	ldr	r1, [pc, #140]	; (b579c <_Z18createEventPayloadfff6Stringff+0x1bc>)
   b5710:	233c      	movs	r3, #60	; 0x3c
   b5712:	a802      	add	r0, sp, #8
   b5714:	f001 ffdc 	bl	b76d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5718:	9c03      	ldr	r4, [sp, #12]
   b571a:	b17c      	cbz	r4, b573c <_Z18createEventPayloadfff6Stringff+0x15c>
      if (--_M_use_count == 0)
   b571c:	6863      	ldr	r3, [r4, #4]
   b571e:	3b01      	subs	r3, #1
   b5720:	6063      	str	r3, [r4, #4]
   b5722:	b95b      	cbnz	r3, b573c <_Z18createEventPayloadfff6Stringff+0x15c>
          _M_dispose();
   b5724:	6823      	ldr	r3, [r4, #0]
   b5726:	4620      	mov	r0, r4
   b5728:	689b      	ldr	r3, [r3, #8]
   b572a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b572c:	68a3      	ldr	r3, [r4, #8]
   b572e:	3b01      	subs	r3, #1
   b5730:	60a3      	str	r3, [r4, #8]
   b5732:	b91b      	cbnz	r3, b573c <_Z18createEventPayloadfff6Stringff+0x15c>
            _M_destroy();
   b5734:	6823      	ldr	r3, [r4, #0]
   b5736:	4620      	mov	r0, r4
   b5738:	68db      	ldr	r3, [r3, #12]
   b573a:	4798      	blx	r3
  JsonWriterStatic<256> jw;
   b573c:	a806      	add	r0, sp, #24
   b573e:	f7ff fc6d 	bl	b501c <_ZN16JsonWriterStaticILj256EED1Ev>
}
   b5742:	b053      	add	sp, #332	; 0x14c
   b5744:	ecbd 8b06 	vpop	{d8-d10}
   b5748:	bd30      	pop	{r4, r5, pc}
   b574a:	bf00      	nop
   b574c:	f3af 8000 	nop.w
   b5750:	3d70a3d7 	.word	0x3d70a3d7
   b5754:	3fe3d70a 	.word	0x3fe3d70a
   b5758:	2003e6a8 	.word	0x2003e6a8
   b575c:	000b9670 	.word	0x000b9670
   b5760:	000b95c8 	.word	0x000b95c8
   b5764:	000b94db 	.word	0x000b94db
   b5768:	000b95cc 	.word	0x000b95cc
   b576c:	000b95d1 	.word	0x000b95d1
   b5770:	000b95da 	.word	0x000b95da
   b5774:	000b95e3 	.word	0x000b95e3
   b5778:	000b95ef 	.word	0x000b95ef
   b577c:	000b95fa 	.word	0x000b95fa
   b5780:	2003e6b8 	.word	0x2003e6b8
   b5784:	000b9605 	.word	0x000b9605
   b5788:	000b9545 	.word	0x000b9545
   b578c:	2003e6bc 	.word	0x2003e6bc
   b5790:	000b960e 	.word	0x000b960e
   b5794:	000b9619 	.word	0x000b9619
   b5798:	2003e644 	.word	0x2003e644
   b579c:	000b962c 	.word	0x000b962c

000b57a0 <loop>:
{
   b57a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57a4:	ed2d 8b04 	vpush	{d8-d9}
   b57a8:	b092      	sub	sp, #72	; 0x48
  float temp, pressure, humidity = 0;
   b57aa:	2300      	movs	r3, #0
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b57ac:	2100      	movs	r1, #0
   b57ae:	2004      	movs	r0, #4
  float temp, pressure, humidity = 0;
   b57b0:	9309      	str	r3, [sp, #36]	; 0x24
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b57b2:	f002 fc81 	bl	b80b8 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b57b6:	4d60      	ldr	r5, [pc, #384]	; (b5938 <loop+0x198>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b57b8:	4b60      	ldr	r3, [pc, #384]	; (b593c <loop+0x19c>)
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b57ba:	f8df 8198 	ldr.w	r8, [pc, #408]	; b5954 <loop+0x1b4>
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b57be:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b57c0:	682b      	ldr	r3, [r5, #0]
   b57c2:	4418      	add	r0, r3
   b57c4:	6028      	str	r0, [r5, #0]
   b57c6:	f001 f8e5 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b57ca:	f8d8 3000 	ldr.w	r3, [r8]
   b57ce:	1ac0      	subs	r0, r0, r3
   b57d0:	f64e 2360 	movw	r3, #60000	; 0xea60
   b57d4:	4298      	cmp	r0, r3
   b57d6:	f240 80a4 	bls.w	b5922 <loop+0x182>
    voltage = analogRead(BATT) * 0.0011224;
   b57da:	2021      	movs	r0, #33	; 0x21
   b57dc:	f002 fc55 	bl	b808a <analogRead>
   b57e0:	f7fe fd70 	bl	b42c4 <__aeabi_i2d>
   b57e4:	a352      	add	r3, pc, #328	; (adr r3, b5930 <loop+0x190>)
   b57e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57ea:	f7fe fdd5 	bl	b4398 <__aeabi_dmul>
   b57ee:	f7ff f8ab 	bl	b4948 <__aeabi_d2f>
    batt_percent = volt_to_percent(voltage);
   b57f2:	ee00 0a10 	vmov	s0, r0
    voltage = analogRead(BATT) * 0.0011224;
   b57f6:	ee08 0a10 	vmov	s16, r0
    batt_percent = volt_to_percent(voltage);
   b57fa:	f7ff fcd1 	bl	b51a0 <_Z15volt_to_percentf>
   b57fe:	4606      	mov	r6, r0
    charging = (digitalRead(PWR) && !digitalRead(CHG));
   b5800:	2022      	movs	r0, #34	; 0x22
   b5802:	f002 fc2f 	bl	b8064 <digitalRead>
   b5806:	4604      	mov	r4, r0
   b5808:	b128      	cbz	r0, b5816 <loop+0x76>
   b580a:	2023      	movs	r0, #35	; 0x23
   b580c:	f002 fc2a 	bl	b8064 <digitalRead>
   b5810:	fab0 f480 	clz	r4, r0
   b5814:	0964      	lsrs	r4, r4, #5
    String quality = getAirQuality();
   b5816:	a80a      	add	r0, sp, #40	; 0x28
   b5818:	f7ff fcf4 	bl	b5204 <_Z13getAirQualityv>
    current_aq_voltage = aqSensor.getValue();
   b581c:	4848      	ldr	r0, [pc, #288]	; (b5940 <loop+0x1a0>)
   b581e:	f000 fecd 	bl	b65bc <_ZN16AirQualitySensor8getValueEv>
   b5822:	ee07 0a90 	vmov	s15, r0
   b5826:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
   b582a:	ed8d 2a05 	vstr	s4, [sp, #20]
    Serial.printlnf("Air Quality: %s", quality.c_str());
   b582e:	f002 f991 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5834:	4943      	ldr	r1, [pc, #268]	; (b5944 <loop+0x1a4>)
   b5836:	f7ff fc06 	bl	b5046 <_ZN5Print8printlnfEPKcz>
    getBMEValues(temp, pressure, humidity);
   b583a:	aa09      	add	r2, sp, #36	; 0x24
   b583c:	a908      	add	r1, sp, #32
   b583e:	a807      	add	r0, sp, #28
   b5840:	f7ff fd1a 	bl	b5278 <_Z12getBMEValuesRfS_S_>
    Serial.printlnf("Temp: %f", temp);
   b5844:	f002 f986 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5848:	4607      	mov	r7, r0
   b584a:	9807      	ldr	r0, [sp, #28]
   b584c:	f7fe fd4c 	bl	b42e8 <__aeabi_f2d>
   b5850:	4602      	mov	r2, r0
   b5852:	460b      	mov	r3, r1
   b5854:	4638      	mov	r0, r7
   b5856:	493c      	ldr	r1, [pc, #240]	; (b5948 <loop+0x1a8>)
   b5858:	f7ff fbf5 	bl	b5046 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Pressure: %f", pressure);
   b585c:	f002 f97a 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5860:	4607      	mov	r7, r0
   b5862:	9808      	ldr	r0, [sp, #32]
   b5864:	f7fe fd40 	bl	b42e8 <__aeabi_f2d>
   b5868:	4602      	mov	r2, r0
   b586a:	460b      	mov	r3, r1
   b586c:	4638      	mov	r0, r7
   b586e:	4937      	ldr	r1, [pc, #220]	; (b594c <loop+0x1ac>)
   b5870:	f7ff fbe9 	bl	b5046 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Humidity: %f", humidity);
   b5874:	f002 f96e 	bl	b7b54 <_Z16_fetch_usbserialv>
   b5878:	4607      	mov	r7, r0
   b587a:	9809      	ldr	r0, [sp, #36]	; 0x24
   b587c:	f7fe fd34 	bl	b42e8 <__aeabi_f2d>
   b5880:	4602      	mov	r2, r0
   b5882:	460b      	mov	r3, r1
   b5884:	4638      	mov	r0, r7
   b5886:	4932      	ldr	r1, [pc, #200]	; (b5950 <loop+0x1b0>)
   b5888:	f7ff fbdd 	bl	b5046 <_ZN5Print8printlnfEPKcz>
    getDustSensorReadings();
   b588c:	f7ff fd14 	bl	b52b8 <_Z21getDustSensorReadingsv>
    updateDisplay((int)temp, (int)humidity, (int)pressure, quality, voltage, batt_percent, charging);
   b5890:	eddd 8a07 	vldr	s17, [sp, #28]
   b5894:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
   b5898:	eddd 9a08 	vldr	s19, [sp, #32]
   b589c:	eefd 8ae8 	vcvt.s32.f32	s17, s17
   b58a0:	eebd 9ac9 	vcvt.s32.f32	s18, s18
   b58a4:	eefd 9ae9 	vcvt.s32.f32	s19, s19
   b58a8:	a90a      	add	r1, sp, #40	; 0x28
   b58aa:	a80e      	add	r0, sp, #56	; 0x38
   b58ac:	f001 fc36 	bl	b711c <_ZN6StringC1ERKS_>
   b58b0:	ee19 2a90 	vmov	r2, s19
   b58b4:	ab0e      	add	r3, sp, #56	; 0x38
   b58b6:	ee19 1a10 	vmov	r1, s18
   b58ba:	eeb0 0a48 	vmov.f32	s0, s16
   b58be:	ee18 0a90 	vmov	r0, s17
   b58c2:	e9cd 6400 	strd	r6, r4, [sp]
   b58c6:	f7ff fd9f 	bl	b5408 <_Z13updateDisplayiii6Stringfib>
   b58ca:	a80e      	add	r0, sp, #56	; 0x38
   b58cc:	f001 fbb8 	bl	b7040 <_ZN6StringD1Ev>
    createEventPayload(temp, humidity, pressure, quality, current_aq_voltage, delta_aq_voltage);
   b58d0:	ed9d 0a07 	vldr	s0, [sp, #28]
   b58d4:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
   b58d8:	ed9d 1a08 	vldr	s2, [sp, #32]
   b58dc:	ed8d 0a04 	vstr	s0, [sp, #16]
   b58e0:	a90a      	add	r1, sp, #40	; 0x28
   b58e2:	a80e      	add	r0, sp, #56	; 0x38
   b58e4:	edcd 0a03 	vstr	s1, [sp, #12]
   b58e8:	ed8d 1a02 	vstr	s2, [sp, #8]
   b58ec:	f001 fc16 	bl	b711c <_ZN6StringC1ERKS_>
   b58f0:	ed9d 2a05 	vldr	s4, [sp, #20]
   b58f4:	ed9d 1a02 	vldr	s2, [sp, #8]
   b58f8:	eddd 0a03 	vldr	s1, [sp, #12]
   b58fc:	ed9d 0a04 	vldr	s0, [sp, #16]
   b5900:	eef0 1a42 	vmov.f32	s3, s4
   b5904:	a80e      	add	r0, sp, #56	; 0x38
   b5906:	f7ff fe6b 	bl	b55e0 <_Z18createEventPayloadfff6Stringff>
   b590a:	a80e      	add	r0, sp, #56	; 0x38
   b590c:	f001 fb98 	bl	b7040 <_ZN6StringD1Ev>
    lowpulseoccupancy = 0;
   b5910:	2300      	movs	r3, #0
   b5912:	602b      	str	r3, [r5, #0]
   b5914:	f001 f83e 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   b5918:	f8c8 0000 	str.w	r0, [r8]
    String quality = getAirQuality();
   b591c:	a80a      	add	r0, sp, #40	; 0x28
   b591e:	f001 fb8f 	bl	b7040 <_ZN6StringD1Ev>
}
   b5922:	b012      	add	sp, #72	; 0x48
   b5924:	ecbd 8b04 	vpop	{d8-d9}
   b5928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b592c:	f3af 8000 	nop.w
   b5930:	d2c10294 	.word	0xd2c10294
   b5934:	3f5263af 	.word	0x3f5263af
   b5938:	2003e6b8 	.word	0x2003e6b8
   b593c:	2003e6ac 	.word	0x2003e6ac
   b5940:	2003e648 	.word	0x2003e648
   b5944:	000b9635 	.word	0x000b9635
   b5948:	000b9645 	.word	0x000b9645
   b594c:	000b964e 	.word	0x000b964e
   b5950:	000b965b 	.word	0x000b965b
   b5954:	2003e6b0 	.word	0x2003e6b0

000b5958 <_GLOBAL__sub_I_aqSensor>:
   b5958:	b508      	push	{r3, lr}
        val_(val) {
   b595a:	4b07      	ldr	r3, [pc, #28]	; (b5978 <_GLOBAL__sub_I_aqSensor+0x20>)
   b595c:	2001      	movs	r0, #1
   b595e:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b5960:	2100      	movs	r1, #0
   b5962:	f001 f94f 	bl	b6c04 <system_thread_set_state>
AirQualitySensor aqSensor(AQS_PIN);
   b5966:	4805      	ldr	r0, [pc, #20]	; (b597c <_GLOBAL__sub_I_aqSensor+0x24>)
   b5968:	2111      	movs	r1, #17
   b596a:	f000 fe0d 	bl	b6588 <_ZN16AirQualitySensorC1Ei>
   b596e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_BME280 bme;
   b5972:	4803      	ldr	r0, [pc, #12]	; (b5980 <_GLOBAL__sub_I_aqSensor+0x28>)
   b5974:	f000 b846 	b.w	b5a04 <_ZN15Adafruit_BME280C1Ev>
   b5978:	2003e644 	.word	0x2003e644
   b597c:	2003e648 	.word	0x2003e648
   b5980:	2003e664 	.word	0x2003e664

000b5984 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5984:	4770      	bx	lr

000b5986 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5986:	b510      	push	{r4, lr}
  }
   b5988:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b598a:	4604      	mov	r4, r0
  }
   b598c:	f7ff fb3b 	bl	b5006 <_ZdlPvj>
   b5990:	4620      	mov	r0, r4
   b5992:	bd10      	pop	{r4, pc}

000b5994 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5994:	b40e      	push	{r1, r2, r3}
   b5996:	b503      	push	{r0, r1, lr}
   b5998:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b599a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b599c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b59a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b59a2:	f001 fc56 	bl	b7252 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b59a6:	b002      	add	sp, #8
   b59a8:	f85d eb04 	ldr.w	lr, [sp], #4
   b59ac:	b003      	add	sp, #12
   b59ae:	4770      	bx	lr

000b59b0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b59b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59b2:	4604      	mov	r4, r0
   b59b4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b59b6:	7922      	ldrb	r2, [r4, #4]
   b59b8:	68a3      	ldr	r3, [r4, #8]
   b59ba:	b132      	cbz	r2, b59ca <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b59bc:	b9a3      	cbnz	r3, b59e8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b59be:	490b      	ldr	r1, [pc, #44]	; (b59ec <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b59c0:	b002      	add	sp, #8
   b59c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b59c6:	f001 bc09 	b.w	b71dc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b59ca:	4a09      	ldr	r2, [pc, #36]	; (b59f0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b59cc:	7b26      	ldrb	r6, [r4, #12]
   b59ce:	4d09      	ldr	r5, [pc, #36]	; (b59f4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b59d0:	4909      	ldr	r1, [pc, #36]	; (b59f8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b59d2:	7b64      	ldrb	r4, [r4, #13]
   b59d4:	2e01      	cmp	r6, #1
   b59d6:	bf18      	it	ne
   b59d8:	4629      	movne	r1, r5
   b59da:	e9cd 1400 	strd	r1, r4, [sp]
   b59de:	4907      	ldr	r1, [pc, #28]	; (b59fc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b59e0:	f7ff ffd8 	bl	b5994 <_ZN5Print6printfEPKcz>
  }
   b59e4:	b002      	add	sp, #8
   b59e6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b59e8:	4a05      	ldr	r2, [pc, #20]	; (b5a00 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b59ea:	e7ef      	b.n	b59cc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b59ec:	000b9689 	.word	0x000b9689
   b59f0:	000b95bc 	.word	0x000b95bc
   b59f4:	000b9685 	.word	0x000b9685
   b59f8:	000b9681 	.word	0x000b9681
   b59fc:	000b969f 	.word	0x000b969f
   b5a00:	000b9678 	.word	0x000b9678

000b5a04 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b5a04:	f04f 33ff 	mov.w	r3, #4294967295
   b5a08:	6103      	str	r3, [r0, #16]
{ }
   b5a0a:	4770      	bx	lr

000b5a0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5a0c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5a0e:	4c0b      	ldr	r4, [pc, #44]	; (b5a3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5a10:	7821      	ldrb	r1, [r4, #0]
   b5a12:	f3bf 8f5b 	dmb	ish
   b5a16:	f011 0101 	ands.w	r1, r1, #1
   b5a1a:	d10b      	bne.n	b5a34 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	9101      	str	r1, [sp, #4]
   b5a20:	f7ff faf3 	bl	b500a <__cxa_guard_acquire>
   b5a24:	9901      	ldr	r1, [sp, #4]
   b5a26:	b128      	cbz	r0, b5a34 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5a28:	4805      	ldr	r0, [pc, #20]	; (b5a40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5a2a:	f001 fa41 	bl	b6eb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5a2e:	4620      	mov	r0, r4
   b5a30:	f7ff faf0 	bl	b5014 <__cxa_guard_release>
        return instance;
    }
   b5a34:	4802      	ldr	r0, [pc, #8]	; (b5a40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5a36:	b002      	add	sp, #8
   b5a38:	bd10      	pop	{r4, pc}
   b5a3a:	bf00      	nop
   b5a3c:	2003e6c0 	.word	0x2003e6c0
   b5a40:	2003e6c4 	.word	0x2003e6c4

000b5a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b5a44:	b508      	push	{r3, lr}
        instance().endTransaction();
   b5a46:	f7ff ffe1 	bl	b5a0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b5a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b5a4e:	f001 ba4d 	b.w	b6eec <_ZN8SPIClass14endTransactionEv>

000b5a52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b5a52:	b507      	push	{r0, r1, r2, lr}
   b5a54:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b5a56:	f7ff ffd9 	bl	b5a0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a5a:	9901      	ldr	r1, [sp, #4]
    }
   b5a5c:	b003      	add	sp, #12
   b5a5e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b5a62:	f001 ba5d 	b.w	b6f20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5a66 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b5a6a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5a6e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5a70:	4605      	mov	r5, r0
   b5a72:	460f      	mov	r7, r1
    if (_sck == -1)
   b5a74:	d106      	bne.n	b5a84 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5a76:	f7ff ffc9 	bl	b5a0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a7a:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b5a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5a80:	f001 babc 	b.w	b6ffc <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b5a84:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b5a86:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b5a88:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b5a8c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5a90:	2100      	movs	r1, #0
   b5a92:	b280      	uxth	r0, r0
   b5a94:	f002 facd 	bl	b8032 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b5a98:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b5a9c:	fa08 f106 	lsl.w	r1, r8, r6
   b5aa0:	4039      	ands	r1, r7
   b5aa2:	b280      	uxth	r0, r0
   b5aa4:	f002 fac5 	bl	b8032 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b5aa8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5aac:	2101      	movs	r1, #1
   b5aae:	b280      	uxth	r0, r0
   b5ab0:	f002 fabf 	bl	b8032 <digitalWrite>
        if (digitalRead(_miso))
   b5ab4:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b5ab8:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b5aba:	b280      	uxth	r0, r0
        reply <<= 1;
   b5abc:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b5abe:	f002 fad1 	bl	b8064 <digitalRead>
   b5ac2:	b108      	cbz	r0, b5ac8 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b5ac4:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b5ac8:	3e01      	subs	r6, #1
   b5aca:	d2df      	bcs.n	b5a8c <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b5acc:	4620      	mov	r0, r4
   b5ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5ad4 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b5ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b5ad6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5ada:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b5adc:	4604      	mov	r4, r0
   b5ade:	460e      	mov	r6, r1
   b5ae0:	4615      	mov	r5, r2
    if (_cs == -1) {
   b5ae2:	d113      	bne.n	b5b0c <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5ae4:	7901      	ldrb	r1, [r0, #4]
   b5ae6:	6800      	ldr	r0, [r0, #0]
   b5ae8:	f002 f93c 	bl	b7d64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5aec:	6820      	ldr	r0, [r4, #0]
   b5aee:	6803      	ldr	r3, [r0, #0]
   b5af0:	4631      	mov	r1, r6
   b5af2:	689b      	ldr	r3, [r3, #8]
   b5af4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b5af6:	6820      	ldr	r0, [r4, #0]
   b5af8:	6803      	ldr	r3, [r0, #0]
   b5afa:	4629      	mov	r1, r5
   b5afc:	689b      	ldr	r3, [r3, #8]
   b5afe:	4798      	blx	r3
        _wire -> endTransmission();
   b5b00:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b5b02:	b004      	add	sp, #16
   b5b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b5b08:	f002 b937 	b.w	b7d7a <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b5b0c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5b10:	3301      	adds	r3, #1
   b5b12:	d10c      	bne.n	b5b2e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b5b14:	4b16      	ldr	r3, [pc, #88]	; (b5b70 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b5b16:	9300      	str	r3, [sp, #0]
   b5b18:	2300      	movs	r3, #0
   b5b1a:	f88d 3004 	strb.w	r3, [sp, #4]
   b5b1e:	4b15      	ldr	r3, [pc, #84]	; (b5b74 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b5b20:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5b22:	4668      	mov	r0, sp
   b5b24:	2301      	movs	r3, #1
   b5b26:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5b2a:	f7ff ff92 	bl	b5a52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5b2e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b32:	2100      	movs	r1, #0
   b5b34:	b280      	uxth	r0, r0
   b5b36:	f002 fa7c 	bl	b8032 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b5b3a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5b3e:	4620      	mov	r0, r4
   b5b40:	f7ff ff91 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b5b44:	4629      	mov	r1, r5
   b5b46:	4620      	mov	r0, r4
   b5b48:	f7ff ff8d 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b5b4c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b50:	2101      	movs	r1, #1
   b5b52:	b280      	uxth	r0, r0
   b5b54:	f002 fa6d 	bl	b8032 <digitalWrite>
    if (_sck == -1)
   b5b58:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5b5c:	3301      	adds	r3, #1
   b5b5e:	d104      	bne.n	b5b6a <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b5b60:	b004      	add	sp, #16
   b5b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b5b66:	f7ff bf6d 	b.w	b5a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b5b6a:	b004      	add	sp, #16
   b5b6c:	bd70      	pop	{r4, r5, r6, pc}
   b5b6e:	bf00      	nop
   b5b70:	000b96c4 	.word	0x000b96c4
   b5b74:	0007a120 	.word	0x0007a120

000b5b78 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b5b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b5b7a:	00db      	lsls	r3, r3, #3
   b5b7c:	f002 0207 	and.w	r2, r2, #7
   b5b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b5b84:	4313      	orrs	r3, r2
   b5b86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b5b8a:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b5b8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b5b92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b5b96:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b5b9a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b5b9e:	f366 1347 	bfi	r3, r6, #5, #3
   b5ba2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b5ba6:	00ed      	lsls	r5, r5, #3
   b5ba8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b5bac:	f007 0707 	and.w	r7, r7, #7
   b5bb0:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b5bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b5bb8:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b5bba:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b5bbc:	431d      	orrs	r5, r3
   b5bbe:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b5bc2:	f006 0207 	and.w	r2, r6, #7
   b5bc6:	21f2      	movs	r1, #242	; 0xf2
   b5bc8:	f7ff ff84 	bl	b5ad4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b5bcc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b5bd0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5bd4:	f002 0107 	and.w	r1, r2, #7
   b5bd8:	009b      	lsls	r3, r3, #2
   b5bda:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b5bde:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b5be2:	4620      	mov	r0, r4
   b5be4:	21f5      	movs	r1, #245	; 0xf5
   b5be6:	f7ff ff75 	bl	b5ad4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b5bea:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b5bee:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5bf2:	f002 0107 	and.w	r1, r2, #7
   b5bf6:	009b      	lsls	r3, r3, #2
   b5bf8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5bfc:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b5c00:	4620      	mov	r0, r4
   b5c02:	21f4      	movs	r1, #244	; 0xf4
}
   b5c04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5c08:	f7ff bf64 	b.w	b5ad4 <_ZN15Adafruit_BME2806write8Ehh>

000b5c0c <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b5c0c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b5c0e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5c12:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b5c14:	b085      	sub	sp, #20
   b5c16:	4604      	mov	r4, r0
   b5c18:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5c1a:	d118      	bne.n	b5c4e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5c1c:	7901      	ldrb	r1, [r0, #4]
   b5c1e:	6800      	ldr	r0, [r0, #0]
   b5c20:	f002 f8a0 	bl	b7d64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5c24:	6820      	ldr	r0, [r4, #0]
   b5c26:	6803      	ldr	r3, [r0, #0]
   b5c28:	4629      	mov	r1, r5
   b5c2a:	689b      	ldr	r3, [r3, #8]
   b5c2c:	4798      	blx	r3
        _wire -> endTransmission();
   b5c2e:	6820      	ldr	r0, [r4, #0]
   b5c30:	f002 f8a3 	bl	b7d7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b5c34:	7921      	ldrb	r1, [r4, #4]
   b5c36:	6820      	ldr	r0, [r4, #0]
   b5c38:	2201      	movs	r2, #1
   b5c3a:	f002 f890 	bl	b7d5e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5c3e:	6820      	ldr	r0, [r4, #0]
   b5c40:	6803      	ldr	r3, [r0, #0]
   b5c42:	695b      	ldr	r3, [r3, #20]
   b5c44:	4798      	blx	r3
   b5c46:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b5c48:	4628      	mov	r0, r5
   b5c4a:	b005      	add	sp, #20
   b5c4c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5c4e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5c52:	3301      	adds	r3, #1
   b5c54:	d10c      	bne.n	b5c70 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b5c56:	4b15      	ldr	r3, [pc, #84]	; (b5cac <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b5c58:	9300      	str	r3, [sp, #0]
   b5c5a:	2300      	movs	r3, #0
   b5c5c:	f88d 3004 	strb.w	r3, [sp, #4]
   b5c60:	4b13      	ldr	r3, [pc, #76]	; (b5cb0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b5c62:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5c64:	4668      	mov	r0, sp
   b5c66:	2301      	movs	r3, #1
   b5c68:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5c6c:	f7ff fef1 	bl	b5a52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5c70:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5c74:	2100      	movs	r1, #0
   b5c76:	b280      	uxth	r0, r0
   b5c78:	f002 f9db 	bl	b8032 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5c7c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5c80:	4620      	mov	r0, r4
   b5c82:	f7ff fef0 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5c86:	2100      	movs	r1, #0
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff feec 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
   b5c8e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b5c90:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5c94:	2101      	movs	r1, #1
   b5c96:	b280      	uxth	r0, r0
   b5c98:	f002 f9cb 	bl	b8032 <digitalWrite>
        if (_sck == -1)
   b5c9c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5ca0:	3301      	adds	r3, #1
   b5ca2:	d1d1      	bne.n	b5c48 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b5ca4:	f7ff fece 	bl	b5a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5ca8:	e7ce      	b.n	b5c48 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b5caa:	bf00      	nop
   b5cac:	000b96c4 	.word	0x000b96c4
   b5cb0:	0007a120 	.word	0x0007a120

000b5cb4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b5cb4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b5cb6:	21f3      	movs	r1, #243	; 0xf3
   b5cb8:	f7ff ffa8 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b5cbc:	f000 0001 	and.w	r0, r0, #1
   b5cc0:	bd08      	pop	{r3, pc}
	...

000b5cc4 <_ZN15Adafruit_BME2806read16Eh>:
{
   b5cc4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5cc6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5cca:	3301      	adds	r3, #1
{
   b5ccc:	b085      	sub	sp, #20
   b5cce:	4604      	mov	r4, r0
   b5cd0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5cd2:	d11f      	bne.n	b5d14 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5cd4:	7901      	ldrb	r1, [r0, #4]
   b5cd6:	6800      	ldr	r0, [r0, #0]
   b5cd8:	f002 f844 	bl	b7d64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5cdc:	6820      	ldr	r0, [r4, #0]
   b5cde:	6803      	ldr	r3, [r0, #0]
   b5ce0:	4629      	mov	r1, r5
   b5ce2:	689b      	ldr	r3, [r3, #8]
   b5ce4:	4798      	blx	r3
        _wire -> endTransmission();
   b5ce6:	6820      	ldr	r0, [r4, #0]
   b5ce8:	f002 f847 	bl	b7d7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b5cec:	7921      	ldrb	r1, [r4, #4]
   b5cee:	6820      	ldr	r0, [r4, #0]
   b5cf0:	2202      	movs	r2, #2
   b5cf2:	f002 f834 	bl	b7d5e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b5cf6:	6820      	ldr	r0, [r4, #0]
   b5cf8:	6803      	ldr	r3, [r0, #0]
   b5cfa:	695b      	ldr	r3, [r3, #20]
   b5cfc:	4798      	blx	r3
   b5cfe:	4605      	mov	r5, r0
   b5d00:	6820      	ldr	r0, [r4, #0]
   b5d02:	6803      	ldr	r3, [r0, #0]
   b5d04:	695b      	ldr	r3, [r3, #20]
   b5d06:	4798      	blx	r3
   b5d08:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5d0c:	b285      	uxth	r5, r0
}
   b5d0e:	4628      	mov	r0, r5
   b5d10:	b005      	add	sp, #20
   b5d12:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5d14:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5d18:	3301      	adds	r3, #1
   b5d1a:	d10c      	bne.n	b5d36 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b5d1c:	4b18      	ldr	r3, [pc, #96]	; (b5d80 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b5d1e:	9300      	str	r3, [sp, #0]
   b5d20:	2300      	movs	r3, #0
   b5d22:	f88d 3004 	strb.w	r3, [sp, #4]
   b5d26:	4b17      	ldr	r3, [pc, #92]	; (b5d84 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b5d28:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5d2a:	4668      	mov	r0, sp
   b5d2c:	2301      	movs	r3, #1
   b5d2e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5d32:	f7ff fe8e 	bl	b5a52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5d36:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5d3a:	2100      	movs	r1, #0
   b5d3c:	b280      	uxth	r0, r0
   b5d3e:	f002 f978 	bl	b8032 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5d42:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5d46:	4620      	mov	r0, r4
   b5d48:	f7ff fe8d 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b5d4c:	2100      	movs	r1, #0
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff fe89 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
   b5d54:	2100      	movs	r1, #0
   b5d56:	4605      	mov	r5, r0
   b5d58:	4620      	mov	r0, r4
   b5d5a:	f7ff fe84 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
   b5d5e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5d62:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b5d64:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5d68:	2101      	movs	r1, #1
   b5d6a:	b280      	uxth	r0, r0
   b5d6c:	f002 f961 	bl	b8032 <digitalWrite>
        if (_sck == -1)
   b5d70:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5d74:	3301      	adds	r3, #1
   b5d76:	d1ca      	bne.n	b5d0e <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b5d78:	f7ff fe64 	bl	b5a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5d7c:	e7c7      	b.n	b5d0e <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b5d7e:	bf00      	nop
   b5d80:	000b96c4 	.word	0x000b96c4
   b5d84:	0007a120 	.word	0x0007a120

000b5d88 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b5d88:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b5d8a:	f7ff ff9b 	bl	b5cc4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b5d8e:	ba40      	rev16	r0, r0
}
   b5d90:	b280      	uxth	r0, r0
   b5d92:	bd08      	pop	{r3, pc}

000b5d94 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b5d94:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5d96:	2188      	movs	r1, #136	; 0x88
{
   b5d98:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5d9a:	f7ff fff5 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5d9e:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5da0:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b5da2:	4620      	mov	r0, r4
   b5da4:	f7ff fff0 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5da8:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b5daa:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b5dac:	4620      	mov	r0, r4
   b5dae:	f7ff ffeb 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5db2:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b5db4:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5db6:	4620      	mov	r0, r4
   b5db8:	f7ff ffe6 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5dbc:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5dbe:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	f7ff ffe1 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5dc6:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b5dc8:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff ffdc 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5dd0:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b5dd2:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	f7ff ffd7 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5dda:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b5ddc:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b5dde:	4620      	mov	r0, r4
   b5de0:	f7ff ffd2 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5de4:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b5de6:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b5de8:	4620      	mov	r0, r4
   b5dea:	f7ff ffcd 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5dee:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b5df0:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b5df2:	4620      	mov	r0, r4
   b5df4:	f7ff ffc8 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5df8:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b5dfa:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b5dfc:	4620      	mov	r0, r4
   b5dfe:	f7ff ffc3 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
   b5e02:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b5e04:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b5e06:	4620      	mov	r0, r4
   b5e08:	f7ff ffbe 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5e0c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b5e0e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5e10:	4620      	mov	r0, r4
   b5e12:	f7ff fefb 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b5e16:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5e18:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b5e1c:	4620      	mov	r0, r4
   b5e1e:	f7ff ffb3 	bl	b5d88 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5e22:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b5e24:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5e26:	4620      	mov	r0, r4
   b5e28:	f7ff fef0 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5e2c:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5e2e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5e32:	4620      	mov	r0, r4
   b5e34:	f7ff feea 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
   b5e38:	21e5      	movs	r1, #229	; 0xe5
   b5e3a:	4605      	mov	r5, r0
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f7ff fee5 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
   b5e42:	f000 030f 	and.w	r3, r0, #15
   b5e46:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5e4a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b5e4c:	21e6      	movs	r1, #230	; 0xe6
   b5e4e:	4620      	mov	r0, r4
   b5e50:	f7ff fedc 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
   b5e54:	21e5      	movs	r1, #229	; 0xe5
   b5e56:	4605      	mov	r5, r0
   b5e58:	4620      	mov	r0, r4
   b5e5a:	f7ff fed7 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
   b5e5e:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b5e62:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5e66:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b5e68:	21e7      	movs	r1, #231	; 0xe7
   b5e6a:	4620      	mov	r0, r4
   b5e6c:	f7ff fece 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
   b5e70:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b5e74:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e78 <_ZN15Adafruit_BME2806read24Eh>:
{
   b5e78:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5e7a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5e7e:	3301      	adds	r3, #1
{
   b5e80:	b085      	sub	sp, #20
   b5e82:	4604      	mov	r4, r0
   b5e84:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5e86:	d123      	bne.n	b5ed0 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5e88:	7901      	ldrb	r1, [r0, #4]
   b5e8a:	6800      	ldr	r0, [r0, #0]
   b5e8c:	f001 ff6a 	bl	b7d64 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5e90:	6820      	ldr	r0, [r4, #0]
   b5e92:	6803      	ldr	r3, [r0, #0]
   b5e94:	4629      	mov	r1, r5
   b5e96:	689b      	ldr	r3, [r3, #8]
   b5e98:	4798      	blx	r3
        _wire -> endTransmission();
   b5e9a:	6820      	ldr	r0, [r4, #0]
   b5e9c:	f001 ff6d 	bl	b7d7a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b5ea0:	7921      	ldrb	r1, [r4, #4]
   b5ea2:	6820      	ldr	r0, [r4, #0]
   b5ea4:	2203      	movs	r2, #3
   b5ea6:	f001 ff5a 	bl	b7d5e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5eaa:	6820      	ldr	r0, [r4, #0]
   b5eac:	6803      	ldr	r3, [r0, #0]
   b5eae:	695b      	ldr	r3, [r3, #20]
   b5eb0:	4798      	blx	r3
        value <<= 8;
   b5eb2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5eb4:	6820      	ldr	r0, [r4, #0]
   b5eb6:	6803      	ldr	r3, [r0, #0]
   b5eb8:	695b      	ldr	r3, [r3, #20]
   b5eba:	4798      	blx	r3
   b5ebc:	4328      	orrs	r0, r5
        value <<= 8;
   b5ebe:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5ec0:	6820      	ldr	r0, [r4, #0]
   b5ec2:	6803      	ldr	r3, [r0, #0]
   b5ec4:	695b      	ldr	r3, [r3, #20]
   b5ec6:	4798      	blx	r3
   b5ec8:	4305      	orrs	r5, r0
}
   b5eca:	4628      	mov	r0, r5
   b5ecc:	b005      	add	sp, #20
   b5ece:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5ed0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5ed4:	3301      	adds	r3, #1
   b5ed6:	d10c      	bne.n	b5ef2 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b5ed8:	4b1a      	ldr	r3, [pc, #104]	; (b5f44 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b5eda:	9300      	str	r3, [sp, #0]
   b5edc:	2300      	movs	r3, #0
   b5ede:	f88d 3004 	strb.w	r3, [sp, #4]
   b5ee2:	4b19      	ldr	r3, [pc, #100]	; (b5f48 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b5ee4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5ee6:	4668      	mov	r0, sp
   b5ee8:	2301      	movs	r3, #1
   b5eea:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5eee:	f7ff fdb0 	bl	b5a52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5ef2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5ef6:	2100      	movs	r1, #0
   b5ef8:	b280      	uxth	r0, r0
   b5efa:	f002 f89a 	bl	b8032 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5efe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5f02:	4620      	mov	r0, r4
   b5f04:	f7ff fdaf 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5f08:	2100      	movs	r1, #0
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	f7ff fdab 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b5f10:	2100      	movs	r1, #0
        value <<= 8;
   b5f12:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5f14:	4620      	mov	r0, r4
   b5f16:	f7ff fda6 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
   b5f1a:	4328      	orrs	r0, r5
        value <<= 8;
   b5f1c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5f1e:	2100      	movs	r1, #0
   b5f20:	4620      	mov	r0, r4
   b5f22:	f7ff fda0 	bl	b5a66 <_ZN15Adafruit_BME2807spixferEh>
   b5f26:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b5f28:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5f2c:	2101      	movs	r1, #1
   b5f2e:	b280      	uxth	r0, r0
   b5f30:	f002 f87f 	bl	b8032 <digitalWrite>
        if (_sck == -1)
   b5f34:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5f38:	3301      	adds	r3, #1
   b5f3a:	d1c6      	bne.n	b5eca <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b5f3c:	f7ff fd82 	bl	b5a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b5f40:	e7c3      	b.n	b5eca <_ZN15Adafruit_BME2806read24Eh+0x52>
   b5f42:	bf00      	nop
   b5f44:	000b96c4 	.word	0x000b96c4
   b5f48:	0007a120 	.word	0x0007a120

000b5f4c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b5f4c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5f4e:	21fa      	movs	r1, #250	; 0xfa
{
   b5f50:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5f52:	f7ff ff91 	bl	b5e78 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b5f56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5f5a:	d01f      	beq.n	b5f9c <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5f5c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b5f5e:	ed9f 7a11 	vldr	s14, [pc, #68]	; b5fa4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5f62:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5f64:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5f68:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b5f6c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5f70:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5f72:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b5f76:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b5f7a:	131b      	asrs	r3, r3, #12
   b5f7c:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5f7e:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b5f80:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5f84:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b5f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5f8a:	3380      	adds	r3, #128	; 0x80
   b5f8c:	121b      	asrs	r3, r3, #8
   b5f8e:	ee07 3a90 	vmov	s15, r3
   b5f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b5f96:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b5f9a:	bd10      	pop	{r4, pc}
        return NAN;
   b5f9c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5fa8 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b5fa0:	e7fb      	b.n	b5f9a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b5fa2:	bf00      	nop
   b5fa4:	42c80000 	.word	0x42c80000
   b5fa8:	7fc00000 	.word	0x7fc00000

000b5fac <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b5fac:	b538      	push	{r3, r4, r5, lr}
   b5fae:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b5fb0:	f7ff ffcc 	bl	b5f4c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b5fb4:	21fd      	movs	r1, #253	; 0xfd
   b5fb6:	4620      	mov	r0, r4
   b5fb8:	f7ff fe84 	bl	b5cc4 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b5fbc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b5fc0:	d038      	beq.n	b6034 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5fc2:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5fc4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5fc8:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5fcc:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b5fd0:	0509      	lsls	r1, r1, #20
   b5fd2:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b5fd6:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5fda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b5fde:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5fe0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5fe4:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5fe8:	436b      	muls	r3, r5
   b5fea:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5fec:	4369      	muls	r1, r5
   b5fee:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5ff0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5ff4:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5ff6:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5ff8:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5ffc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b6000:	434b      	muls	r3, r1
   b6002:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b6006:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b6008:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b600a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b600c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b6010:	4352      	muls	r2, r2
   b6012:	11d2      	asrs	r2, r2, #7
   b6014:	434a      	muls	r2, r1
   b6016:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b601a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b601e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b6022:	bfa8      	it	ge
   b6024:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b6028:	131b      	asrs	r3, r3, #12
   b602a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b602e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b6032:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b6034:	ed9f 0a01 	vldr	s0, [pc, #4]	; b603c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b6038:	e7fb      	b.n	b6032 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b603a:	bf00      	nop
   b603c:	7fc00000 	.word	0x7fc00000

000b6040 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b6040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6044:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b6046:	f7ff ff81 	bl	b5f4c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b604a:	21f7      	movs	r1, #247	; 0xf7
   b604c:	4628      	mov	r0, r5
   b604e:	f7ff ff13 	bl	b5e78 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b6052:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b6056:	f000 80b6 	beq.w	b61c6 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b605a:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b605c:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b6060:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b6064:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b6068:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b606c:	17dc      	asrs	r4, r3, #31
   b606e:	fb03 f20e 	mul.w	r2, r3, lr
   b6072:	fb01 2204 	mla	r2, r1, r4, r2
   b6076:	fba3 3401 	umull	r3, r4, r3, r1
   b607a:	4422      	add	r2, r4
   b607c:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b607e:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b6082:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b6084:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b6088:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b608c:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b6090:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b6094:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b6098:	fb03 f608 	mul.w	r6, r3, r8
   b609c:	fb07 660c 	mla	r6, r7, ip, r6
   b60a0:	fba3 3c07 	umull	r3, ip, r3, r7
   b60a4:	4466      	add	r6, ip
   b60a6:	0a1b      	lsrs	r3, r3, #8
   b60a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b60ac:	191b      	adds	r3, r3, r4
   b60ae:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b60b2:	8b6e      	ldrh	r6, [r5, #26]
   b60b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b60b8:	fba3 3406 	umull	r3, r4, r3, r6
   b60bc:	fb06 4402 	mla	r4, r6, r2, r4
   b60c0:	17e3      	asrs	r3, r4, #31
   b60c2:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b60c4:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b60c8:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b60cc:	d07e      	beq.n	b61cc <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b60ce:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b60d2:	fb04 f608 	mul.w	r6, r4, r8
   b60d6:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b60da:	fb07 6609 	mla	r6, r7, r9, r6
   b60de:	fba4 4707 	umull	r4, r7, r4, r7
   b60e2:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b60e4:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b60e8:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b60ec:	fb07 fe0e 	mul.w	lr, r7, lr
   b60f0:	fb01 ee08 	mla	lr, r1, r8, lr
   b60f4:	fba7 7101 	umull	r7, r1, r7, r1
   b60f8:	4471      	add	r1, lr
   b60fa:	0449      	lsls	r1, r1, #17
   b60fc:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b6100:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b6102:	047f      	lsls	r7, r7, #17
   b6104:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b6106:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b610a:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b610e:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b6112:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b6116:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b611a:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b611e:	07e4      	lsls	r4, r4, #31
   b6120:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b6122:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b6126:	f640 4135 	movw	r1, #3125	; 0xc35
   b612a:	eb60 0606 	sbc.w	r6, r0, r6
   b612e:	fba4 0401 	umull	r0, r4, r4, r1
   b6132:	fb01 4106 	mla	r1, r1, r6, r4
   b6136:	f7fe fd65 	bl	b4c04 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b613a:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b613e:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b6142:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b6146:	0b43      	lsrs	r3, r0, #13
   b6148:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b614c:	fb02 f70c 	mul.w	r7, r2, ip
   b6150:	17d4      	asrs	r4, r2, #31
   b6152:	fb03 7704 	mla	r7, r3, r4, r7
   b6156:	fba2 2403 	umull	r2, r4, r2, r3
   b615a:	443c      	add	r4, r7
   b615c:	fb02 f70c 	mul.w	r7, r2, ip
   b6160:	fb03 7704 	mla	r7, r3, r4, r7
   b6164:	fba2 2303 	umull	r2, r3, r2, r3
   b6168:	441f      	add	r7, r3
   b616a:	0e53      	lsrs	r3, r2, #25
   b616c:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b6170:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b6172:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b6176:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b617a:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b617c:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b6180:	fb02 4100 	mla	r1, r2, r0, r4
   b6184:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b6188:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b618c:	4431      	add	r1, r6
   b618e:	0cc0      	lsrs	r0, r0, #19
   b6190:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b6194:	1818      	adds	r0, r3, r0
   b6196:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b619a:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b619e:	0a00      	lsrs	r0, r0, #8
   b61a0:	012d      	lsls	r5, r5, #4
   b61a2:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b61a6:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b61aa:	0124      	lsls	r4, r4, #4
   b61ac:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b61ae:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b61b2:	f7fe fce9 	bl	b4b88 <__aeabi_l2f>
   b61b6:	ed9f 0a07 	vldr	s0, [pc, #28]	; b61d4 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b61ba:	ee07 0a90 	vmov	s15, r0
   b61be:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b61c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b61c6:	ed9f 0a04 	vldr	s0, [pc, #16]	; b61d8 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b61ca:	e7fa      	b.n	b61c2 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b61cc:	ed9f 0a03 	vldr	s0, [pc, #12]	; b61dc <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b61d0:	e7f7      	b.n	b61c2 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b61d2:	bf00      	nop
   b61d4:	3b800000 	.word	0x3b800000
   b61d8:	7fc00000 	.word	0x7fc00000
   b61dc:	00000000 	.word	0x00000000

000b61e0 <_ZN15Adafruit_BME2804initEv>:
{
   b61e0:	b530      	push	{r4, r5, lr}
   b61e2:	4604      	mov	r4, r0
    if (_cs == -1) {
   b61e4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b61e8:	1c42      	adds	r2, r0, #1
{
   b61ea:	b085      	sub	sp, #20
    if (_cs == -1) {
   b61ec:	d119      	bne.n	b6222 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b61ee:	6820      	ldr	r0, [r4, #0]
   b61f0:	f001 fd86 	bl	b7d00 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b61f4:	21d0      	movs	r1, #208	; 0xd0
   b61f6:	4620      	mov	r0, r4
   b61f8:	f7ff fd08 	bl	b5c0c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b61fc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b61fe:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b6200:	d145      	bne.n	b628e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b6202:	4620      	mov	r0, r4
   b6204:	22b6      	movs	r2, #182	; 0xb6
   b6206:	21e0      	movs	r1, #224	; 0xe0
   b6208:	f7ff fc64 	bl	b5ad4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b620c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b6210:	f001 f88c 	bl	b732c <delay>
    while (isReadingCalibration())
   b6214:	4620      	mov	r0, r4
   b6216:	f7ff fd4d 	bl	b5cb4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b621a:	4605      	mov	r5, r0
   b621c:	b328      	cbz	r0, b626a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b621e:	2064      	movs	r0, #100	; 0x64
   b6220:	e7f6      	b.n	b6210 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b6222:	2101      	movs	r1, #1
   b6224:	b280      	uxth	r0, r0
   b6226:	f001 ff04 	bl	b8032 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b622a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b622e:	2101      	movs	r1, #1
   b6230:	b280      	uxth	r0, r0
   b6232:	f001 feed 	bl	b8010 <pinMode>
        if (_sck == -1) {
   b6236:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b623a:	1c43      	adds	r3, r0, #1
   b623c:	d104      	bne.n	b6248 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b623e:	f7ff fbe5 	bl	b5a0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6242:	f000 fe3f 	bl	b6ec4 <_ZN8SPIClass5beginEv>
    }
   b6246:	e7d5      	b.n	b61f4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b6248:	2101      	movs	r1, #1
   b624a:	b280      	uxth	r0, r0
   b624c:	f001 fee0 	bl	b8010 <pinMode>
            pinMode(_mosi, OUTPUT);
   b6250:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b6254:	2101      	movs	r1, #1
   b6256:	b280      	uxth	r0, r0
   b6258:	f001 feda 	bl	b8010 <pinMode>
            pinMode(_miso, INPUT);
   b625c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b6260:	2100      	movs	r1, #0
   b6262:	b280      	uxth	r0, r0
   b6264:	f001 fed4 	bl	b8010 <pinMode>
   b6268:	e7c4      	b.n	b61f4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff fd92 	bl	b5d94 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b6270:	2305      	movs	r3, #5
   b6272:	9300      	str	r3, [sp, #0]
   b6274:	461a      	mov	r2, r3
   b6276:	2103      	movs	r1, #3
   b6278:	4620      	mov	r0, r4
   b627a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b627e:	f7ff fc7b 	bl	b5b78 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b6282:	2064      	movs	r0, #100	; 0x64
   b6284:	f001 f852 	bl	b732c <delay>
    return true;
   b6288:	2001      	movs	r0, #1
}
   b628a:	b005      	add	sp, #20
   b628c:	bd30      	pop	{r4, r5, pc}
        return false;
   b628e:	2000      	movs	r0, #0
   b6290:	e7fb      	b.n	b628a <_ZN15Adafruit_BME2804initEv+0xaa>

000b6292 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b6292:	2377      	movs	r3, #119	; 0x77
{
   b6294:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b6296:	7103      	strb	r3, [r0, #4]
{
   b6298:	4604      	mov	r4, r0
	_wire = &Wire;
   b629a:	f001 ff6b 	bl	b8174 <_Z19__fetch_global_Wirev>
   b629e:	6020      	str	r0, [r4, #0]
	status = init();
   b62a0:	4620      	mov	r0, r4
   b62a2:	f7ff ff9d 	bl	b61e0 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b62a6:	b930      	cbnz	r0, b62b6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b62a8:	2376      	movs	r3, #118	; 0x76
   b62aa:	7123      	strb	r3, [r4, #4]
 		status = init();
   b62ac:	4620      	mov	r0, r4
}
   b62ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b62b2:	f7ff bf95 	b.w	b61e0 <_ZN15Adafruit_BME2804initEv>
}
   b62b6:	bd10      	pop	{r4, pc}

000b62b8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b62b8:	b510      	push	{r4, lr}
   b62ba:	4b05      	ldr	r3, [pc, #20]	; (b62d0 <_ZN10JsonBufferD1Ev+0x18>)
   b62bc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b62be:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b62c0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b62c2:	b91b      	cbnz	r3, b62cc <_ZN10JsonBufferD1Ev+0x14>
   b62c4:	6840      	ldr	r0, [r0, #4]
   b62c6:	b108      	cbz	r0, b62cc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b62c8:	f000 fd58 	bl	b6d7c <free>
	}
}
   b62cc:	4620      	mov	r0, r4
   b62ce:	bd10      	pop	{r4, pc}
   b62d0:	000b96e4 	.word	0x000b96e4

000b62d4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b62d4:	b510      	push	{r4, lr}
   b62d6:	4604      	mov	r4, r0
}
   b62d8:	f7ff ffee 	bl	b62b8 <_ZN10JsonBufferD1Ev>
   b62dc:	4620      	mov	r0, r4
   b62de:	2114      	movs	r1, #20
   b62e0:	f7fe fe91 	bl	b5006 <_ZdlPvj>
   b62e4:	4620      	mov	r0, r4
   b62e6:	bd10      	pop	{r4, pc}

000b62e8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b62e8:	b510      	push	{r4, lr}
   b62ea:	4b03      	ldr	r3, [pc, #12]	; (b62f8 <_ZN10JsonWriterD1Ev+0x10>)
   b62ec:	6003      	str	r3, [r0, #0]
   b62ee:	4604      	mov	r4, r0
   b62f0:	f7ff ffe2 	bl	b62b8 <_ZN10JsonBufferD1Ev>

}
   b62f4:	4620      	mov	r0, r4
   b62f6:	bd10      	pop	{r4, pc}
   b62f8:	000b96f4 	.word	0x000b96f4

000b62fc <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b62fc:	b510      	push	{r4, lr}
   b62fe:	4604      	mov	r4, r0
}
   b6300:	f7ff fff2 	bl	b62e8 <_ZN10JsonWriterD1Ev>
   b6304:	4620      	mov	r0, r4
   b6306:	2130      	movs	r1, #48	; 0x30
   b6308:	f7fe fe7d 	bl	b5006 <_ZdlPvj>
   b630c:	4620      	mov	r0, r4
   b630e:	bd10      	pop	{r4, pc}

000b6310 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   b6310:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   b6312:	2201      	movs	r2, #1
	offset = 0;
   b6314:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b6316:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b6318:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   b631a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   b631e:	4770      	bx	lr

000b6320 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6320:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b6324:	b508      	push	{r3, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6326:	2200      	movs	r2, #0
   b6328:	60c2      	str	r2, [r0, #12]
   b632a:	2201      	movs	r2, #1
   b632c:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b632e:	4a04      	ldr	r2, [pc, #16]	; (b6340 <_ZN10JsonWriterC1EPcj+0x20>)
   b6330:	6002      	str	r2, [r0, #0]
   b6332:	f04f 32ff 	mov.w	r2, #4294967295
   b6336:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
   b6338:	f7ff ffea 	bl	b6310 <_ZN10JsonWriter4initEv>
}
   b633c:	bd08      	pop	{r3, pc}
   b633e:	bf00      	nop
   b6340:	000b96f4 	.word	0x000b96f4

000b6344 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   b6344:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b6348:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b634a:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b634c:	bf3f      	itttt	cc
   b634e:	6842      	ldrcc	r2, [r0, #4]
   b6350:	1c5c      	addcc	r4, r3, #1
   b6352:	60c4      	strcc	r4, [r0, #12]
   b6354:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   b6356:	bf24      	itt	cs
   b6358:	2301      	movcs	r3, #1
   b635a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b6360:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b6362:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b6364:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b6366:	b143      	cbz	r3, b637a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b6368:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b636c:	7e59      	ldrb	r1, [r3, #25]
   b636e:	b109      	cbz	r1, b6374 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b6370:	f7ff ffe8 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b6374:	6963      	ldr	r3, [r4, #20]
   b6376:	3b01      	subs	r3, #1
   b6378:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b637a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b637e:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b6380:	4288      	cmp	r0, r1
   b6382:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b6386:	bf2a      	itet	cs
   b6388:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b638a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b638c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b6390:	bd10      	pop	{r4, pc}

000b6392 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b6392:	b570      	push	{r4, r5, r6, lr}
   b6394:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b6396:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b639a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b639c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b639e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b63a0:	4430      	add	r0, r6
   b63a2:	460a      	mov	r2, r1
   b63a4:	4629      	mov	r1, r5
   b63a6:	f000 fcf9 	bl	b6d9c <vsnprintf>
	if (count <= spaceAvailable) {
   b63aa:	4285      	cmp	r5, r0
		offset += count;
   b63ac:	bf2d      	iteet	cs
   b63ae:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   b63b0:	68a3      	ldrcc	r3, [r4, #8]
   b63b2:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b63b4:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b63b6:	bf36      	itet	cc
   b63b8:	2301      	movcc	r3, #1
		offset += count;
   b63ba:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b63bc:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   b63c0:	bd70      	pop	{r4, r5, r6, pc}

000b63c2 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b63c2:	b40e      	push	{r1, r2, r3}
   b63c4:	b503      	push	{r0, r1, lr}
   b63c6:	aa03      	add	r2, sp, #12
   b63c8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b63cc:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b63ce:	f7ff ffe0 	bl	b6392 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b63d2:	b002      	add	sp, #8
   b63d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b63d8:	b003      	add	sp, #12
   b63da:	4770      	bx	lr

000b63dc <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b63dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b63e0:	4604      	mov	r4, r0
   b63e2:	460e      	mov	r6, r1
	if (quoted) {
   b63e4:	4617      	mov	r7, r2
   b63e6:	b112      	cbz	r2, b63ee <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b63e8:	2122      	movs	r1, #34	; 0x22
   b63ea:	f7ff ffab 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b63ee:	f8df 810c 	ldr.w	r8, [pc, #268]	; b64fc <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b63f2:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b63f4:	5d71      	ldrb	r1, [r6, r5]
   b63f6:	eb06 0905 	add.w	r9, r6, r5
   b63fa:	2900      	cmp	r1, #0
   b63fc:	d074      	beq.n	b64e8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b63fe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b6402:	429a      	cmp	r2, r3
   b6404:	d270      	bcs.n	b64e8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b6406:	060b      	lsls	r3, r1, #24
   b6408:	d534      	bpl.n	b6474 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b640a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b640e:	2be0      	cmp	r3, #224	; 0xe0
   b6410:	f105 0901 	add.w	r9, r5, #1
   b6414:	d11d      	bne.n	b6452 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b6416:	f816 2009 	ldrb.w	r2, [r6, r9]
   b641a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b641e:	2b80      	cmp	r3, #128	; 0x80
   b6420:	d139      	bne.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b6422:	f105 0902 	add.w	r9, r5, #2
   b6426:	f816 3009 	ldrb.w	r3, [r6, r9]
   b642a:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b642e:	2880      	cmp	r0, #128	; 0x80
   b6430:	d131      	bne.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b6432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b6436:	0192      	lsls	r2, r2, #6
   b6438:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b643c:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b6440:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b6442:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b6444:	4641      	mov	r1, r8
   b6446:	4620      	mov	r0, r4
   b6448:	f7ff ffbb 	bl	b63c2 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b644c:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b644e:	3501      	adds	r5, #1
   b6450:	e7d0      	b.n	b63f4 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b6452:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b6456:	2bc0      	cmp	r3, #192	; 0xc0
   b6458:	d11d      	bne.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b645a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b645e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b6462:	2a80      	cmp	r2, #128	; 0x80
   b6464:	d117      	bne.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b6466:	0189      	lsls	r1, r1, #6
   b6468:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b6470:	431a      	orrs	r2, r3
   b6472:	e7e7      	b.n	b6444 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b6474:	290d      	cmp	r1, #13
   b6476:	d80a      	bhi.n	b648e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b6478:	2907      	cmp	r1, #7
   b647a:	d90c      	bls.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b647c:	f1a1 0308 	sub.w	r3, r1, #8
   b6480:	2b05      	cmp	r3, #5
   b6482:	d808      	bhi.n	b6496 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b6484:	e8df f003 	tbb	[pc, r3]
   b6488:	07172309 	.word	0x07172309
   b648c:	1d11      	.short	0x1d11
   b648e:	2922      	cmp	r1, #34	; 0x22
   b6490:	d023      	beq.n	b64da <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b6492:	295c      	cmp	r1, #92	; 0x5c
   b6494:	d021      	beq.n	b64da <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b6496:	4620      	mov	r0, r4
   b6498:	e004      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b649a:	215c      	movs	r1, #92	; 0x5c
   b649c:	4620      	mov	r0, r4
   b649e:	f7ff ff51 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b64a2:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b64a4:	f7ff ff4e 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				break;
   b64a8:	e7d1      	b.n	b644e <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b64aa:	215c      	movs	r1, #92	; 0x5c
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff ff49 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b64b2:	2166      	movs	r1, #102	; 0x66
   b64b4:	e7f6      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b64b6:	215c      	movs	r1, #92	; 0x5c
   b64b8:	4620      	mov	r0, r4
   b64ba:	f7ff ff43 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b64be:	216e      	movs	r1, #110	; 0x6e
   b64c0:	e7f0      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b64c2:	215c      	movs	r1, #92	; 0x5c
   b64c4:	4620      	mov	r0, r4
   b64c6:	f7ff ff3d 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b64ca:	2172      	movs	r1, #114	; 0x72
   b64cc:	e7ea      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b64ce:	215c      	movs	r1, #92	; 0x5c
   b64d0:	4620      	mov	r0, r4
   b64d2:	f7ff ff37 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b64d6:	2174      	movs	r1, #116	; 0x74
   b64d8:	e7e4      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b64da:	215c      	movs	r1, #92	; 0x5c
   b64dc:	4620      	mov	r0, r4
   b64de:	f7ff ff31 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b64e2:	f899 1000 	ldrb.w	r1, [r9]
   b64e6:	e7dd      	b.n	b64a4 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b64e8:	b12f      	cbz	r7, b64f6 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b64ea:	4620      	mov	r0, r4
   b64ec:	2122      	movs	r1, #34	; 0x22
}
   b64ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b64f2:	f7ff bf27 	b.w	b6344 <_ZN10JsonWriter10insertCharEc>
}
   b64f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b64fa:	bf00      	nop
   b64fc:	000b96d0 	.word	0x000b96d0

000b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   b6500:	6942      	ldr	r2, [r0, #20]
   b6502:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b6506:	7e1a      	ldrb	r2, [r3, #24]
   b6508:	b112      	cbz	r2, b6510 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b650a:	2200      	movs	r2, #0
   b650c:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   b650e:	4770      	bx	lr
		insertChar(',');
   b6510:	212c      	movs	r1, #44	; 0x2c
   b6512:	f7ff bf17 	b.w	b6344 <_ZN10JsonWriter10insertCharEc>

000b6516 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b6516:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b6518:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b651a:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b651c:	3301      	adds	r3, #1
   b651e:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b6520:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b6522:	d80f      	bhi.n	b6544 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b6524:	f7ff ffec 	bl	b6500 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b6528:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b652a:	9901      	ldr	r1, [sp, #4]
   b652c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b6530:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b6532:	2501      	movs	r5, #1
	contextIndex++;
   b6534:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b6536:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b6538:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b653a:	f7ff ff03 	bl	b6344 <_ZN10JsonWriter10insertCharEc>
   b653e:	4628      	mov	r0, r5
}
   b6540:	b002      	add	sp, #8
   b6542:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b6544:	2000      	movs	r0, #0
   b6546:	e7fb      	b.n	b6540 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b6548 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   b6548:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b654a:	4604      	mov	r4, r0
   b654c:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
   b6550:	f7fd feca 	bl	b42e8 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b6554:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b6556:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b6558:	4602      	mov	r2, r0
   b655a:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b655c:	db08      	blt.n	b6570 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b655e:	e9cd 2300 	strd	r2, r3, [sp]
   b6562:	4907      	ldr	r1, [pc, #28]	; (b6580 <_ZN10JsonWriter11insertValueEf+0x38>)
   b6564:	462a      	mov	r2, r5
   b6566:	4620      	mov	r0, r4
   b6568:	f7ff ff2b 	bl	b63c2 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   b656c:	b003      	add	sp, #12
   b656e:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b6570:	4904      	ldr	r1, [pc, #16]	; (b6584 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b6572:	4620      	mov	r0, r4
}
   b6574:	b003      	add	sp, #12
   b6576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b657a:	f7ff bf22 	b.w	b63c2 <_ZN10JsonWriter13insertsprintfEPKcz>
   b657e:	bf00      	nop
   b6580:	000b96d7 	.word	0x000b96d7
   b6584:	000b9658 	.word	0x000b9658

000b6588 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b6588:	2200      	movs	r2, #0
   b658a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b658e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b6590:	4770      	bx	lr

000b6592 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   b6592:	b510      	push	{r4, lr}
   b6594:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   b6596:	8800      	ldrh	r0, [r0, #0]
   b6598:	f001 fd77 	bl	b808a <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   b659c:	f240 3312 	movw	r3, #786	; 0x312
   b65a0:	f1a0 020b 	sub.w	r2, r0, #11
   b65a4:	429a      	cmp	r2, r3
   b65a6:	d807      	bhi.n	b65b8 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   b65a8:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   b65ac:	60e0      	str	r0, [r4, #12]
   b65ae:	f000 f9f1 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   b65b2:	61a0      	str	r0, [r4, #24]

        return true;
   b65b4:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   b65b6:	bd10      	pop	{r4, pc}
        return false;
   b65b8:	2000      	movs	r0, #0
   b65ba:	e7fc      	b.n	b65b6 <_ZN16AirQualitySensor4initEv+0x24>

000b65bc <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   b65bc:	6880      	ldr	r0, [r0, #8]
   b65be:	4770      	bx	lr

000b65c0 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   b65c0:	b510      	push	{r4, lr}
   b65c2:	4604      	mov	r4, r0
   b65c4:	f000 f9e6 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b65c8:	69a3      	ldr	r3, [r4, #24]
   b65ca:	1ac0      	subs	r0, r0, r3
   b65cc:	4b07      	ldr	r3, [pc, #28]	; (b65ec <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b65ce:	4298      	cmp	r0, r3
   b65d0:	d90a      	bls.n	b65e8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b65d2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b65d6:	fb93 f3f2 	sdiv	r3, r3, r2
   b65da:	60e3      	str	r3, [r4, #12]
   b65dc:	f000 f9da 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b65e0:	2300      	movs	r3, #0
        _volSumCount = 0;
   b65e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b65e6:	61a0      	str	r0, [r4, #24]
    }
}
   b65e8:	bd10      	pop	{r4, pc}
   b65ea:	bf00      	nop
   b65ec:	0007a120 	.word	0x0007a120

000b65f0 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b65f0:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b65f2:	6883      	ldr	r3, [r0, #8]
   b65f4:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b65f6:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b65f8:	8800      	ldrh	r0, [r0, #0]
   b65fa:	f001 fd46 	bl	b808a <analogRead>
    _voltageSum += _currentVoltage;
   b65fe:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b6600:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b6602:	4418      	add	r0, r3
    _volSumCount += 1;
   b6604:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b6606:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b6608:	3301      	adds	r3, #1
   b660a:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b660c:	4620      	mov	r0, r4
   b660e:	f7ff ffd7 	bl	b65c0 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b6612:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b6616:	1a51      	subs	r1, r2, r1
   b6618:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b661c:	dc10      	bgt.n	b6640 <_ZN16AirQualitySensor5slopeEv+0x50>
   b661e:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b6622:	dc0d      	bgt.n	b6640 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b6624:	68e3      	ldr	r3, [r4, #12]
   b6626:	1ad3      	subs	r3, r2, r3
   b6628:	2b96      	cmp	r3, #150	; 0x96
   b662a:	dc0b      	bgt.n	b6644 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b662c:	29c8      	cmp	r1, #200	; 0xc8
   b662e:	dd02      	ble.n	b6636 <_ZN16AirQualitySensor5slopeEv+0x46>
   b6630:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b6634:	d108      	bne.n	b6648 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b6636:	2b32      	cmp	r3, #50	; 0x32
   b6638:	bfcc      	ite	gt
   b663a:	2002      	movgt	r0, #2
   b663c:	2003      	movle	r0, #3
}
   b663e:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b6640:	2000      	movs	r0, #0
   b6642:	e7fc      	b.n	b663e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b6644:	2001      	movs	r0, #1
   b6646:	e7fa      	b.n	b663e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b6648:	2002      	movs	r0, #2
   b664a:	e7f8      	b.n	b663e <_ZN16AirQualitySensor5slopeEv+0x4e>

000b664c <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b664c:	6803      	ldr	r3, [r0, #0]
   b664e:	b2c9      	uxtb	r1, r1
   b6650:	689b      	ldr	r3, [r3, #8]
   b6652:	4718      	bx	r3

000b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   b6654:	b510      	push	{r4, lr}
   b6656:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   b6658:	f001 fd8c 	bl	b8174 <_Z19__fetch_global_Wirev>
   b665c:	213c      	movs	r1, #60	; 0x3c
   b665e:	f001 fb85 	bl	b7d6c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   b6662:	f001 fd87 	bl	b8174 <_Z19__fetch_global_Wirev>
   b6666:	2180      	movs	r1, #128	; 0x80
   b6668:	f7ff fff0 	bl	b664c <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(command);
   b666c:	f001 fd82 	bl	b8174 <_Z19__fetch_global_Wirev>
   b6670:	6803      	ldr	r3, [r0, #0]
   b6672:	4621      	mov	r1, r4
   b6674:	689b      	ldr	r3, [r3, #8]
   b6676:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   b6678:	f001 fd7c 	bl	b8174 <_Z19__fetch_global_Wirev>
}
   b667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // End I2C communication
   b6680:	f001 bb7b 	b.w	b7d7a <_ZN7TwoWire15endTransmissionEv>

000b6684 <_ZN9SeeedOLED4initEv>:
{
   b6684:	b508      	push	{r3, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   b6686:	20ae      	movs	r0, #174	; 0xae
   b6688:	f7ff ffe4 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   b668c:	2005      	movs	r0, #5
   b668e:	f000 fe4d 	bl	b732c <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   b6692:	20af      	movs	r0, #175	; 0xaf
   b6694:	f7ff ffde 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   b6698:	2005      	movs	r0, #5
   b669a:	f000 fe47 	bl	b732c <delay>
}
   b669e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   b66a2:	20a6      	movs	r0, #166	; 0xa6
   b66a4:	f7ff bfd6 	b.w	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b66a8 <_ZN9SeeedOLED11sendCommandEh>:
{
   b66a8:	b510      	push	{r4, lr}
   b66aa:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   b66ac:	f001 fd62 	bl	b8174 <_Z19__fetch_global_Wirev>
   b66b0:	213c      	movs	r1, #60	; 0x3c
   b66b2:	f001 fb5b 	bl	b7d6c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   b66b6:	f001 fd5d 	bl	b8174 <_Z19__fetch_global_Wirev>
   b66ba:	2180      	movs	r1, #128	; 0x80
   b66bc:	f7ff ffc6 	bl	b664c <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(command);
   b66c0:	f001 fd58 	bl	b8174 <_Z19__fetch_global_Wirev>
   b66c4:	6803      	ldr	r3, [r0, #0]
   b66c6:	4621      	mov	r1, r4
   b66c8:	689b      	ldr	r3, [r3, #8]
   b66ca:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   b66cc:	f001 fd52 	bl	b8174 <_Z19__fetch_global_Wirev>
}
   b66d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // End I2C communication
   b66d4:	f001 bb51 	b.w	b7d7a <_ZN7TwoWire15endTransmissionEv>

000b66d8 <_ZN9SeeedOLED13setBrightnessEh>:

void SeeedOLED::setBrightness(unsigned char Brightness)
{
   b66d8:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Set_Brightness_Cmd);
   b66da:	2081      	movs	r0, #129	; 0x81
{
   b66dc:	460c      	mov	r4, r1
  sendCommand(SeeedOLED_Set_Brightness_Cmd);
   b66de:	f7ff ffb9 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(Brightness);
   b66e2:	4620      	mov	r0, r4
}
   b66e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sendCommand(Brightness);
   b66e8:	f7ff bfb4 	b.w	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b66ec <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   b66ec:	b508      	push	{r3, lr}
  addressingMode = PAGE_MODE;
   b66ee:	2301      	movs	r3, #1
   b66f0:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   b66f2:	2020      	movs	r0, #32
   b66f4:	f7ff ffae 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x02); //set page addressing mode
}
   b66f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(0x02); //set page addressing mode
   b66fc:	2002      	movs	r0, #2
   b66fe:	f7ff bfa9 	b.w	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b6702 <_ZN9SeeedOLED9setTextXYEhh>:

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   b6702:	b510      	push	{r4, lr}
  sendCommand(0xB0 + Row);                        //set page address
   b6704:	3950      	subs	r1, #80	; 0x50
{
   b6706:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   b6708:	b2c8      	uxtb	r0, r1
   b670a:	f7ff ffa3 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   b670e:	00e0      	lsls	r0, r4, #3
   b6710:	f000 0008 	and.w	r0, r0, #8
   b6714:	f7ff ff9e 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   b6718:	f3c4 0043 	ubfx	r0, r4, #1, #4
   b671c:	3010      	adds	r0, #16
}
   b671e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   b6722:	f7ff bf97 	b.w	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b6726 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   b6726:	b510      	push	{r4, lr}
   b6728:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   b672a:	f001 fd23 	bl	b8174 <_Z19__fetch_global_Wirev>
   b672e:	213c      	movs	r1, #60	; 0x3c
   b6730:	f001 fb1c 	bl	b7d6c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   b6734:	f001 fd1e 	bl	b8174 <_Z19__fetch_global_Wirev>
   b6738:	2140      	movs	r1, #64	; 0x40
   b673a:	f7ff ff87 	bl	b664c <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(Data);
   b673e:	f001 fd19 	bl	b8174 <_Z19__fetch_global_Wirev>
   b6742:	6803      	ldr	r3, [r0, #0]
   b6744:	4621      	mov	r1, r4
   b6746:	689b      	ldr	r3, [r3, #8]
   b6748:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   b674a:	f001 fd13 	bl	b8174 <_Z19__fetch_global_Wirev>
}
   b674e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // stop I2C transmission
   b6752:	f001 bb12 	b.w	b7d7a <_ZN7TwoWire15endTransmissionEv>
	...

000b6758 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   b6758:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   b675c:	2b5f      	cmp	r3, #95	; 0x5f
   b675e:	bf88      	it	hi
   b6760:	2120      	movhi	r1, #32
{
   b6762:	b570      	push	{r4, r5, r6, lr}
   b6764:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   b6768:	4d07      	ldr	r5, [pc, #28]	; (b6788 <_ZN9SeeedOLED7putCharEh+0x30>)
   b676a:	3920      	subs	r1, #32
   b676c:	4606      	mov	r6, r0
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   b676e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C = ' '; //Space
   b6772:	2408      	movs	r4, #8
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   b6774:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6778:	4630      	mov	r0, r6
  for (i = 0; i < 8; i++)
   b677a:	3c01      	subs	r4, #1
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   b677c:	f7ff ffd3 	bl	b6726 <_ZN9SeeedOLED8sendDataEh>
  for (i = 0; i < 8; i++)
   b6780:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b6784:	d1f6      	bne.n	b6774 <_ZN9SeeedOLED7putCharEh+0x1c>
  }
}
   b6786:	bd70      	pop	{r4, r5, r6, pc}
   b6788:	000b970e 	.word	0x000b970e

000b678c <_ZN9SeeedOLED12clearDisplayEv>:
{
   b678c:	b570      	push	{r4, r5, r6, lr}
   b678e:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   b6790:	20ae      	movs	r0, #174	; 0xae
   b6792:	f7ff ff5f 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   b6796:	2600      	movs	r6, #0
    setTextXY(j, 0);
   b6798:	2200      	movs	r2, #0
   b679a:	b2f1      	uxtb	r1, r6
   b679c:	4628      	mov	r0, r5
   b679e:	f7ff ffb0 	bl	b6702 <_ZN9SeeedOLED9setTextXYEhh>
   b67a2:	2410      	movs	r4, #16
        putChar(' ');
   b67a4:	2120      	movs	r1, #32
   b67a6:	4628      	mov	r0, r5
      for (i = 0; i < 16; i++) //clear all columns
   b67a8:	3c01      	subs	r4, #1
        putChar(' ');
   b67aa:	f7ff ffd5 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
      for (i = 0; i < 16; i++) //clear all columns
   b67ae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b67b2:	d1f7      	bne.n	b67a4 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for (j = 0; j < 8; j++)
   b67b4:	3601      	adds	r6, #1
   b67b6:	2e08      	cmp	r6, #8
   b67b8:	d1ee      	bne.n	b6798 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   b67ba:	20af      	movs	r0, #175	; 0xaf
   b67bc:	f7ff ff4a 	bl	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0, 0);
   b67c0:	4622      	mov	r2, r4
   b67c2:	4621      	mov	r1, r4
   b67c4:	4628      	mov	r0, r5
}
   b67c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0, 0);
   b67ca:	f7ff bf9a 	b.w	b6702 <_ZN9SeeedOLED9setTextXYEhh>

000b67ce <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   b67ce:	b570      	push	{r4, r5, r6, lr}
   b67d0:	4606      	mov	r6, r0
   b67d2:	460d      	mov	r5, r1
   b67d4:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   b67d6:	b2e3      	uxtb	r3, r4
   b67d8:	3401      	adds	r4, #1
   b67da:	5ce9      	ldrb	r1, [r5, r3]
   b67dc:	b119      	cbz	r1, b67e6 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   b67de:	4630      	mov	r0, r6
   b67e0:	f7ff ffba 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
  while (String[i])
   b67e4:	e7f7      	b.n	b67d6 <_ZN9SeeedOLED9putStringEPKc+0x8>
    i++;
  }
}
   b67e6:	bd70      	pop	{r4, r5, r6, pc}

000b67e8 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   b67e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67ea:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   b67ec:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   b67ee:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10] = "";
   b67f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   b67f4:	4606      	mov	r6, r0
  unsigned char char_buffer[10] = "";
   b67f6:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   b67fa:	da24      	bge.n	b6846 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f = 1;
    putChar('-');
   b67fc:	212d      	movs	r1, #45	; 0x2d
   b67fe:	f7ff ffab 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   b6802:	4264      	negs	r4, r4
    f = 1;
   b6804:	2301      	movs	r3, #1
  unsigned char f = 0;
   b6806:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   b6808:	200a      	movs	r0, #10
   b680a:	462a      	mov	r2, r5
   b680c:	a904      	add	r1, sp, #16
   b680e:	440a      	add	r2, r1
   b6810:	3501      	adds	r5, #1
   b6812:	fbb4 f1f0 	udiv	r1, r4, r0
   b6816:	fb00 4411 	mls	r4, r0, r1, r4
   b681a:	f802 4c0c 	strb.w	r4, [r2, #-12]
   b681e:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   b6820:	460c      	mov	r4, r1
   b6822:	2900      	cmp	r1, #0
   b6824:	d1f1      	bne.n	b680a <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f = f + i;
   b6826:	442b      	add	r3, r5
   b6828:	b2dc      	uxtb	r4, r3
   b682a:	ab04      	add	r3, sp, #16
   b682c:	195f      	adds	r7, r3, r5
   b682e:	3f0d      	subs	r7, #13
  for (; i > 0; i--)
   b6830:	b175      	cbz	r5, b6850 <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0' + char_buffer[i - 1]);
   b6832:	f817 1901 	ldrb.w	r1, [r7], #-1
   b6836:	3130      	adds	r1, #48	; 0x30
   b6838:	b2c9      	uxtb	r1, r1
   b683a:	4630      	mov	r0, r6
  for (; i > 0; i--)
   b683c:	3d01      	subs	r5, #1
    putChar('0' + char_buffer[i - 1]);
   b683e:	f7ff ff8b 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
  for (; i > 0; i--)
   b6842:	b2ed      	uxtb	r5, r5
   b6844:	e7f4      	b.n	b6830 <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   b6846:	d1de      	bne.n	b6806 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   b6848:	2130      	movs	r1, #48	; 0x30
   b684a:	f7ff ff85 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
    return f;
   b684e:	2401      	movs	r4, #1
  }
  return f;
}
   b6850:	4620      	mov	r0, r4
   b6852:	b005      	add	sp, #20
   b6854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6858 <_ZN9SeeedOLED8putFloatEf>:
  }
  f += decimal;
  return f;
}
unsigned char SeeedOLED::putFloat(float floatNumber)
{
   b6858:	b538      	push	{r3, r4, r5, lr}
  unsigned char decimal = 2;
  unsigned int temp = 0;
  float decy = 0.0;
  float rounding = 0.5;
  unsigned char f = 0;
  if (floatNumber < 0.0)
   b685a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b6862:	ed2d 8b04 	vpush	{d8-d9}
   b6866:	4605      	mov	r5, r0
   b6868:	eeb0 8a40 	vmov.f32	s16, s0
  if (floatNumber < 0.0)
   b686c:	d537      	bpl.n	b68de <_ZN9SeeedOLED8putFloatEf+0x86>
  {
    putString("-");
   b686e:	491d      	ldr	r1, [pc, #116]	; (b68e4 <_ZN9SeeedOLED8putFloatEf+0x8c>)
   b6870:	f7ff ffad 	bl	b67ce <_ZN9SeeedOLED9putStringEPKc>
    floatNumber = -floatNumber;
   b6874:	eeb1 8a48 	vneg.f32	s16, s16
    f += 1;
   b6878:	2401      	movs	r4, #1
  }
  for (unsigned char i = 0; i < decimal; ++i)
  {
    rounding /= 10.0;
  }
  floatNumber += rounding;
   b687a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b68e8 <_ZN9SeeedOLED8putFloatEf+0x90>
   b687e:	ee38 8a00 	vadd.f32	s16, s16, s0

  temp = floatNumber;
  f += putNumber(temp);
   b6882:	4628      	mov	r0, r5
  temp = floatNumber;
   b6884:	eefc 8ac8 	vcvt.u32.f32	s17, s16
    f += 1;
  }
  decy = floatNumber - temp;                  //decimal part,
  for (unsigned char i = 0; i < decimal; i++) //4
  {
    decy *= 10;  // for the next decimal
   b6888:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
  f += putNumber(temp);
   b688c:	ee18 1a90 	vmov	r1, s17
   b6890:	f7ff ffaa 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
    putChar('.');
   b6894:	212e      	movs	r1, #46	; 0x2e
  f += putNumber(temp);
   b6896:	4404      	add	r4, r0
    putChar('.');
   b6898:	4628      	mov	r0, r5
   b689a:	f7ff ff5d 	bl	b6758 <_ZN9SeeedOLED7putCharEh>
  decy = floatNumber - temp;                  //decimal part,
   b689e:	eef8 8a68 	vcvt.f32.u32	s17, s17
    temp = decy; //get the decimal
    putNumber(temp);
   b68a2:	4628      	mov	r0, r5
  decy = floatNumber - temp;                  //decimal part,
   b68a4:	ee38 8a68 	vsub.f32	s16, s16, s17
  f += putNumber(temp);
   b68a8:	b2e4      	uxtb	r4, r4
    decy *= 10;  // for the next decimal
   b68aa:	ee28 8a09 	vmul.f32	s16, s16, s18
    temp = decy; //get the decimal
   b68ae:	eefc 8ac8 	vcvt.u32.f32	s17, s16
    putNumber(temp);
   b68b2:	ee18 1a90 	vmov	r1, s17
   b68b6:	f7ff ff97 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
    decy -= temp;
   b68ba:	eef8 8a68 	vcvt.f32.u32	s17, s17
    putNumber(temp);
   b68be:	4628      	mov	r0, r5
    decy -= temp;
   b68c0:	ee38 8a68 	vsub.f32	s16, s16, s17
    decy *= 10;  // for the next decimal
   b68c4:	ee28 8a09 	vmul.f32	s16, s16, s18
    putNumber(temp);
   b68c8:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   b68cc:	ee17 1a90 	vmov	r1, s15
   b68d0:	f7ff ff8a 	bl	b67e8 <_ZN9SeeedOLED9putNumberEl>
  }
  f += decimal;
  return f;
}
   b68d4:	ecbd 8b04 	vpop	{d8-d9}
  f += decimal;
   b68d8:	1ce0      	adds	r0, r4, #3
}
   b68da:	b2c0      	uxtb	r0, r0
   b68dc:	bd38      	pop	{r3, r4, r5, pc}
  unsigned char f = 0;
   b68de:	2400      	movs	r4, #0
   b68e0:	e7cb      	b.n	b687a <_ZN9SeeedOLED8putFloatEf+0x22>
   b68e2:	bf00      	nop
   b68e4:	000b970c 	.word	0x000b970c
   b68e8:	3ba3d70a 	.word	0x3ba3d70a

000b68ec <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   b68ec:	20a6      	movs	r0, #166	; 0xa6
   b68ee:	f7ff beb1 	b.w	b6654 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
	...

000b68f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b02      	ldr	r3, [pc, #8]	; (b6900 <netdb_freeaddrinfo+0xc>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	689b      	ldr	r3, [r3, #8]
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	bd08      	pop	{r3, pc}
   b6900:	00030268 	.word	0x00030268

000b6904 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6904:	b508      	push	{r3, lr}
   b6906:	4b02      	ldr	r3, [pc, #8]	; (b6910 <netdb_getaddrinfo+0xc>)
   b6908:	681b      	ldr	r3, [r3, #0]
   b690a:	68db      	ldr	r3, [r3, #12]
   b690c:	9301      	str	r3, [sp, #4]
   b690e:	bd08      	pop	{r3, pc}
   b6910:	00030268 	.word	0x00030268

000b6914 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b02      	ldr	r3, [pc, #8]	; (b6920 <hal_pin_validate_function+0xc>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	685b      	ldr	r3, [r3, #4]
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	bd08      	pop	{r3, pc}
   b6920:	0003022c 	.word	0x0003022c

000b6924 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6924:	b508      	push	{r3, lr}
   b6926:	4b02      	ldr	r3, [pc, #8]	; (b6930 <hal_gpio_mode+0xc>)
   b6928:	681b      	ldr	r3, [r3, #0]
   b692a:	689b      	ldr	r3, [r3, #8]
   b692c:	9301      	str	r3, [sp, #4]
   b692e:	bd08      	pop	{r3, pc}
   b6930:	0003022c 	.word	0x0003022c

000b6934 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <hal_gpio_get_mode+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	68db      	ldr	r3, [r3, #12]
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	0003022c 	.word	0x0003022c

000b6944 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <hal_gpio_write+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	691b      	ldr	r3, [r3, #16]
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	0003022c 	.word	0x0003022c

000b6954 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <hal_gpio_read+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	695b      	ldr	r3, [r3, #20]
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	0003022c 	.word	0x0003022c

000b6964 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <hal_adc_read+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	0003022c 	.word	0x0003022c

000b6974 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <hal_gpio_pulse_in+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	0003022c 	.word	0x0003022c

000b6984 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <HAL_RNG_GetRandomNumber+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	685b      	ldr	r3, [r3, #4]
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	00030218 	.word	0x00030218

000b6994 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	695b      	ldr	r3, [r3, #20]
   b699c:	9301      	str	r3, [sp, #4]
   b699e:	bd08      	pop	{r3, pc}
   b69a0:	00030218 	.word	0x00030218

000b69a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b69a4:	b508      	push	{r3, lr}
   b69a6:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <os_mutex_recursive_create+0xc>)
   b69a8:	681b      	ldr	r3, [r3, #0]
   b69aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69ac:	9301      	str	r3, [sp, #4]
   b69ae:	bd08      	pop	{r3, pc}
   b69b0:	00030248 	.word	0x00030248

000b69b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <inet_inet_ntop+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	695b      	ldr	r3, [r3, #20]
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	00030264 	.word	0x00030264

000b69c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <hal_usart_write+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	68db      	ldr	r3, [r3, #12]
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	0003023c 	.word	0x0003023c

000b69d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <hal_usart_available+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	691b      	ldr	r3, [r3, #16]
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	0003023c 	.word	0x0003023c

000b69e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <hal_usart_read+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	695b      	ldr	r3, [r3, #20]
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	0003023c 	.word	0x0003023c

000b69f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <hal_usart_peek+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	699b      	ldr	r3, [r3, #24]
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	0003023c 	.word	0x0003023c

000b6a04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <hal_usart_flush+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	69db      	ldr	r3, [r3, #28]
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	0003023c 	.word	0x0003023c

000b6a14 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <hal_usart_is_enabled+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	6a1b      	ldr	r3, [r3, #32]
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	0003023c 	.word	0x0003023c

000b6a24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <hal_usart_available_data_for_write+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	0003023c 	.word	0x0003023c

000b6a34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <hal_usart_init_ex+0xc>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a3c:	9301      	str	r3, [sp, #4]
   b6a3e:	bd08      	pop	{r3, pc}
   b6a40:	0003023c 	.word	0x0003023c

000b6a44 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6a44:	b508      	push	{r3, lr}
   b6a46:	4b02      	ldr	r3, [pc, #8]	; (b6a50 <hal_i2c_begin+0xc>)
   b6a48:	681b      	ldr	r3, [r3, #0]
   b6a4a:	68db      	ldr	r3, [r3, #12]
   b6a4c:	9301      	str	r3, [sp, #4]
   b6a4e:	bd08      	pop	{r3, pc}
   b6a50:	00030228 	.word	0x00030228

000b6a54 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6a54:	b508      	push	{r3, lr}
   b6a56:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <hal_i2c_begin_transmission+0xc>)
   b6a58:	681b      	ldr	r3, [r3, #0]
   b6a5a:	699b      	ldr	r3, [r3, #24]
   b6a5c:	9301      	str	r3, [sp, #4]
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	00030228 	.word	0x00030228

000b6a64 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6a64:	b508      	push	{r3, lr}
   b6a66:	4b02      	ldr	r3, [pc, #8]	; (b6a70 <hal_i2c_end_transmission+0xc>)
   b6a68:	681b      	ldr	r3, [r3, #0]
   b6a6a:	69db      	ldr	r3, [r3, #28]
   b6a6c:	9301      	str	r3, [sp, #4]
   b6a6e:	bd08      	pop	{r3, pc}
   b6a70:	00030228 	.word	0x00030228

000b6a74 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b02      	ldr	r3, [pc, #8]	; (b6a80 <hal_i2c_write+0xc>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	6a1b      	ldr	r3, [r3, #32]
   b6a7c:	9301      	str	r3, [sp, #4]
   b6a7e:	bd08      	pop	{r3, pc}
   b6a80:	00030228 	.word	0x00030228

000b6a84 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6a84:	b508      	push	{r3, lr}
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <hal_i2c_available+0xc>)
   b6a88:	681b      	ldr	r3, [r3, #0]
   b6a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a8c:	9301      	str	r3, [sp, #4]
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	00030228 	.word	0x00030228

000b6a94 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6a94:	b508      	push	{r3, lr}
   b6a96:	4b02      	ldr	r3, [pc, #8]	; (b6aa0 <hal_i2c_read+0xc>)
   b6a98:	681b      	ldr	r3, [r3, #0]
   b6a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a9c:	9301      	str	r3, [sp, #4]
   b6a9e:	bd08      	pop	{r3, pc}
   b6aa0:	00030228 	.word	0x00030228

000b6aa4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6aa4:	b508      	push	{r3, lr}
   b6aa6:	4b02      	ldr	r3, [pc, #8]	; (b6ab0 <hal_i2c_peek+0xc>)
   b6aa8:	681b      	ldr	r3, [r3, #0]
   b6aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6aac:	9301      	str	r3, [sp, #4]
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	00030228 	.word	0x00030228

000b6ab4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <hal_i2c_flush+0xc>)
   b6ab8:	681b      	ldr	r3, [r3, #0]
   b6aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6abc:	9301      	str	r3, [sp, #4]
   b6abe:	bd08      	pop	{r3, pc}
   b6ac0:	00030228 	.word	0x00030228

000b6ac4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b02      	ldr	r3, [pc, #8]	; (b6ad0 <hal_i2c_is_enabled+0xc>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6acc:	9301      	str	r3, [sp, #4]
   b6ace:	bd08      	pop	{r3, pc}
   b6ad0:	00030228 	.word	0x00030228

000b6ad4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6ad4:	b508      	push	{r3, lr}
   b6ad6:	4b02      	ldr	r3, [pc, #8]	; (b6ae0 <hal_i2c_init+0xc>)
   b6ad8:	681b      	ldr	r3, [r3, #0]
   b6ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6adc:	9301      	str	r3, [sp, #4]
   b6ade:	bd08      	pop	{r3, pc}
   b6ae0:	00030228 	.word	0x00030228

000b6ae4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	4b02      	ldr	r3, [pc, #8]	; (b6af0 <hal_i2c_request_ex+0xc>)
   b6ae8:	681b      	ldr	r3, [r3, #0]
   b6aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6aec:	9301      	str	r3, [sp, #4]
   b6aee:	bd08      	pop	{r3, pc}
   b6af0:	00030228 	.word	0x00030228

000b6af4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <hal_spi_begin+0xc>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	681b      	ldr	r3, [r3, #0]
   b6afc:	9301      	str	r3, [sp, #4]
   b6afe:	bd08      	pop	{r3, pc}
   b6b00:	00030230 	.word	0x00030230

000b6b04 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <hal_spi_transfer+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	695b      	ldr	r3, [r3, #20]
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	00030230 	.word	0x00030230

000b6b14 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <hal_spi_init+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	69db      	ldr	r3, [r3, #28]
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030230 	.word	0x00030230

000b6b24 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <hal_spi_is_enabled+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	6a1b      	ldr	r3, [r3, #32]
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	00030230 	.word	0x00030230

000b6b34 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <hal_spi_info+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	00030230 	.word	0x00030230

000b6b44 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <hal_spi_set_settings+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	00030230 	.word	0x00030230

000b6b54 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <hal_spi_acquire+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	00030230 	.word	0x00030230

000b6b64 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b02      	ldr	r3, [pc, #8]	; (b6b70 <hal_spi_release+0xc>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b6c:	9301      	str	r3, [sp, #4]
   b6b6e:	bd08      	pop	{r3, pc}
   b6b70:	00030230 	.word	0x00030230

000b6b74 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6b74:	b508      	push	{r3, lr}
   b6b76:	4b02      	ldr	r3, [pc, #8]	; (b6b80 <HAL_USB_USART_Init+0xc>)
   b6b78:	681b      	ldr	r3, [r3, #0]
   b6b7a:	681b      	ldr	r3, [r3, #0]
   b6b7c:	9301      	str	r3, [sp, #4]
   b6b7e:	bd08      	pop	{r3, pc}
   b6b80:	0003024c 	.word	0x0003024c

000b6b84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6b84:	b508      	push	{r3, lr}
   b6b86:	4b02      	ldr	r3, [pc, #8]	; (b6b90 <HAL_USB_USART_Begin+0xc>)
   b6b88:	681b      	ldr	r3, [r3, #0]
   b6b8a:	685b      	ldr	r3, [r3, #4]
   b6b8c:	9301      	str	r3, [sp, #4]
   b6b8e:	bd08      	pop	{r3, pc}
   b6b90:	0003024c 	.word	0x0003024c

000b6b94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6b94:	b508      	push	{r3, lr}
   b6b96:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <HAL_USB_USART_Available_Data+0xc>)
   b6b98:	681b      	ldr	r3, [r3, #0]
   b6b9a:	691b      	ldr	r3, [r3, #16]
   b6b9c:	9301      	str	r3, [sp, #4]
   b6b9e:	bd08      	pop	{r3, pc}
   b6ba0:	0003024c 	.word	0x0003024c

000b6ba4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	695b      	ldr	r3, [r3, #20]
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	0003024c 	.word	0x0003024c

000b6bb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <HAL_USB_USART_Receive_Data+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	699b      	ldr	r3, [r3, #24]
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	0003024c 	.word	0x0003024c

000b6bc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <HAL_USB_USART_Send_Data+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	69db      	ldr	r3, [r3, #28]
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	0003024c 	.word	0x0003024c

000b6bd4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <HAL_USB_USART_Flush_Data+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	6a1b      	ldr	r3, [r3, #32]
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	0003024c 	.word	0x0003024c

000b6be4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <set_system_mode+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	685b      	ldr	r3, [r3, #4]
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	00030220 	.word	0x00030220

000b6bf4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <system_delay_ms+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	695b      	ldr	r3, [r3, #20]
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030220 	.word	0x00030220

000b6c04 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <system_thread_set_state+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	00030220 	.word	0x00030220

000b6c14 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <application_thread_current+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	00030220 	.word	0x00030220

000b6c24 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <application_thread_invoke+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030220 	.word	0x00030220

000b6c34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b03      	ldr	r3, [pc, #12]	; (b6c44 <system_ctrl_set_app_request_handler+0x10>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6c3e:	9301      	str	r3, [sp, #4]
   b6c40:	bd08      	pop	{r3, pc}
   b6c42:	0000      	.short	0x0000
   b6c44:	00030220 	.word	0x00030220

000b6c48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b03      	ldr	r3, [pc, #12]	; (b6c58 <system_ctrl_set_result+0x10>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6c52:	9301      	str	r3, [sp, #4]
   b6c54:	bd08      	pop	{r3, pc}
   b6c56:	0000      	.short	0x0000
   b6c58:	00030220 	.word	0x00030220

000b6c5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <network_connect+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	685b      	ldr	r3, [r3, #4]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	00030240 	.word	0x00030240

000b6c6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <network_connecting+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	689b      	ldr	r3, [r3, #8]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	00030240 	.word	0x00030240

000b6c7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <network_disconnect+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	68db      	ldr	r3, [r3, #12]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	00030240 	.word	0x00030240

000b6c8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <network_ready+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	691b      	ldr	r3, [r3, #16]
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	00030240 	.word	0x00030240

000b6c9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <network_on+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	695b      	ldr	r3, [r3, #20]
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	00030240 	.word	0x00030240

000b6cac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <network_off+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	699b      	ldr	r3, [r3, #24]
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	00030240 	.word	0x00030240

000b6cbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <network_listen+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	69db      	ldr	r3, [r3, #28]
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030240 	.word	0x00030240

000b6ccc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <network_listening+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	6a1b      	ldr	r3, [r3, #32]
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030240 	.word	0x00030240

000b6cdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <network_set_listen_timeout+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030240 	.word	0x00030240

000b6cec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <network_get_listen_timeout+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030240 	.word	0x00030240

000b6cfc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <network_is_on+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030240 	.word	0x00030240

000b6d0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <network_is_off+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	00030240 	.word	0x00030240

000b6d1c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <network_prefer+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	00030240 	.word	0x00030240

000b6d2c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <network_is_preferred+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030240 	.word	0x00030240

000b6d3c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <spark_cloud_flag_connected+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	695b      	ldr	r3, [r3, #20]
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	00030244 	.word	0x00030244

000b6d4c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <spark_send_event+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	6a1b      	ldr	r3, [r3, #32]
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030244 	.word	0x00030244

000b6d5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030244 	.word	0x00030244

000b6d6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <malloc+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	681b      	ldr	r3, [r3, #0]
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	0003021c 	.word	0x0003021c

000b6d7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <free+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	685b      	ldr	r3, [r3, #4]
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	0003021c 	.word	0x0003021c

000b6d8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <realloc+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	689b      	ldr	r3, [r3, #8]
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	0003021c 	.word	0x0003021c

000b6d9c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <vsnprintf+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	0003021c 	.word	0x0003021c

000b6dac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <abort+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	0003021c 	.word	0x0003021c

000b6dbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <_malloc_r+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	0003021c 	.word	0x0003021c

000b6dcc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <__errno+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	0003021c 	.word	0x0003021c

000b6ddc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <__assert_func+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	0003021c 	.word	0x0003021c

000b6dec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <newlib_impure_ptr_callback+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	0003021c 	.word	0x0003021c

000b6dfc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6dfc:	2200      	movs	r2, #0
   b6dfe:	6840      	ldr	r0, [r0, #4]
   b6e00:	4611      	mov	r1, r2
   b6e02:	f7ff bf63 	b.w	b6ccc <network_listening>

000b6e06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6e06:	2200      	movs	r2, #0
   b6e08:	6840      	ldr	r0, [r0, #4]
   b6e0a:	4611      	mov	r1, r2
   b6e0c:	f7ff bf6e 	b.w	b6cec <network_get_listen_timeout>

000b6e10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6e10:	6840      	ldr	r0, [r0, #4]
   b6e12:	2200      	movs	r2, #0
   b6e14:	f7ff bf62 	b.w	b6cdc <network_set_listen_timeout>

000b6e18 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6e18:	6840      	ldr	r0, [r0, #4]
   b6e1a:	2200      	movs	r2, #0
   b6e1c:	f081 0101 	eor.w	r1, r1, #1
   b6e20:	f7ff bf4c 	b.w	b6cbc <network_listen>

000b6e24 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6e24:	2300      	movs	r3, #0
   b6e26:	6840      	ldr	r0, [r0, #4]
   b6e28:	461a      	mov	r2, r3
   b6e2a:	4619      	mov	r1, r3
   b6e2c:	f7ff bf3e 	b.w	b6cac <network_off>

000b6e30 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6e30:	2300      	movs	r3, #0
   b6e32:	6840      	ldr	r0, [r0, #4]
   b6e34:	461a      	mov	r2, r3
   b6e36:	4619      	mov	r1, r3
   b6e38:	f7ff bf30 	b.w	b6c9c <network_on>

000b6e3c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6e3c:	2200      	movs	r2, #0
   b6e3e:	6840      	ldr	r0, [r0, #4]
   b6e40:	4611      	mov	r1, r2
   b6e42:	f7ff bf23 	b.w	b6c8c <network_ready>

000b6e46 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6e46:	2200      	movs	r2, #0
   b6e48:	6840      	ldr	r0, [r0, #4]
   b6e4a:	4611      	mov	r1, r2
   b6e4c:	f7ff bf0e 	b.w	b6c6c <network_connecting>

000b6e50 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6e50:	6840      	ldr	r0, [r0, #4]
   b6e52:	2200      	movs	r2, #0
   b6e54:	2102      	movs	r1, #2
   b6e56:	f7ff bf11 	b.w	b6c7c <network_disconnect>

000b6e5a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6e5a:	2300      	movs	r3, #0
   b6e5c:	6840      	ldr	r0, [r0, #4]
   b6e5e:	461a      	mov	r2, r3
   b6e60:	f7ff befc 	b.w	b6c5c <network_connect>

000b6e64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6e64:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6e66:	2203      	movs	r2, #3
   b6e68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6e6a:	4a02      	ldr	r2, [pc, #8]	; (b6e74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6e6c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6e6e:	4770      	bx	lr
   b6e70:	2003e6d0 	.word	0x2003e6d0
   b6e74:	000b9a18 	.word	0x000b9a18

000b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6e78:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6e7a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6e7c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b6e7e:	b17c      	cbz	r4, b6ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b6e80:	6863      	ldr	r3, [r4, #4]
   b6e82:	3b01      	subs	r3, #1
   b6e84:	6063      	str	r3, [r4, #4]
   b6e86:	b95b      	cbnz	r3, b6ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6e88:	6823      	ldr	r3, [r4, #0]
   b6e8a:	4620      	mov	r0, r4
   b6e8c:	689b      	ldr	r3, [r3, #8]
   b6e8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6e90:	68a3      	ldr	r3, [r4, #8]
   b6e92:	3b01      	subs	r3, #1
   b6e94:	60a3      	str	r3, [r4, #8]
   b6e96:	b91b      	cbnz	r3, b6ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6e98:	6823      	ldr	r3, [r4, #0]
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	68db      	ldr	r3, [r3, #12]
   b6e9e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b6ea0:	4628      	mov	r0, r5
   b6ea2:	bd38      	pop	{r3, r4, r5, pc}

000b6ea4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6ea4:	2100      	movs	r1, #0
   b6ea6:	f7ff be5d 	b.w	b6b64 <hal_spi_release>

000b6eaa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6eaa:	2100      	movs	r1, #0
   b6eac:	f7ff be52 	b.w	b6b54 <hal_spi_acquire>

000b6eb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6eb0:	b510      	push	{r4, lr}
   b6eb2:	4604      	mov	r4, r0
   b6eb4:	4608      	mov	r0, r1
{
    _spi = spi;
   b6eb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6eb8:	f7ff fe2c 	bl	b6b14 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ebc:	2300      	movs	r3, #0
   b6ebe:	6063      	str	r3, [r4, #4]
}
   b6ec0:	4620      	mov	r0, r4
   b6ec2:	bd10      	pop	{r4, pc}

000b6ec4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6ec4:	b513      	push	{r0, r1, r4, lr}
   b6ec6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6ec8:	7800      	ldrb	r0, [r0, #0]
   b6eca:	f7ff ffee 	bl	b6eaa <_ZN8SPIClass4lockEv.isra.0>
   b6ece:	b958      	cbnz	r0, b6ee8 <_ZN8SPIClass5beginEv+0x24>
   b6ed0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6ed2:	9001      	str	r0, [sp, #4]
   b6ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6ed8:	f7ff fe0c 	bl	b6af4 <hal_spi_begin>
        unlock();
   b6edc:	9801      	ldr	r0, [sp, #4]
    }
}
   b6ede:	b002      	add	sp, #8
   b6ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6ee4:	f7ff bfde 	b.w	b6ea4 <_ZN8SPIClass6unlockEv.isra.0>
   b6ee8:	b002      	add	sp, #8
   b6eea:	bd10      	pop	{r4, pc}

000b6eec <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6eec:	7800      	ldrb	r0, [r0, #0]
   b6eee:	f7ff bfd9 	b.w	b6ea4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6ef4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6ef4:	0840      	lsrs	r0, r0, #1
{
   b6ef6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6ef8:	6018      	str	r0, [r3, #0]
   b6efa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6efc:	6818      	ldr	r0, [r3, #0]
   b6efe:	4288      	cmp	r0, r1
   b6f00:	b2e5      	uxtb	r5, r4
   b6f02:	d906      	bls.n	b6f12 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6f04:	3401      	adds	r4, #1
   b6f06:	2c08      	cmp	r4, #8
   b6f08:	d002      	beq.n	b6f10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6f0a:	0840      	lsrs	r0, r0, #1
   b6f0c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6f0e:	e7f5      	b.n	b6efc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6f10:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6f12:	4b02      	ldr	r3, [pc, #8]	; (b6f1c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6f14:	5d5b      	ldrb	r3, [r3, r5]
   b6f16:	7013      	strb	r3, [r2, #0]
}
   b6f18:	bd30      	pop	{r4, r5, pc}
   b6f1a:	bf00      	nop
   b6f1c:	000b9a54 	.word	0x000b9a54

000b6f20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f24:	4606      	mov	r6, r0
   b6f26:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6f28:	7800      	ldrb	r0, [r0, #0]
{
   b6f2a:	460c      	mov	r4, r1
    CHECK(lock());
   b6f2c:	f7ff ffbd 	bl	b6eaa <_ZN8SPIClass4lockEv.isra.0>
   b6f30:	2800      	cmp	r0, #0
   b6f32:	db1b      	blt.n	b6f6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6f34:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6f36:	2214      	movs	r2, #20
   b6f38:	2100      	movs	r1, #0
   b6f3a:	a809      	add	r0, sp, #36	; 0x24
   b6f3c:	f002 f9de 	bl	b92fc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f40:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6f42:	2200      	movs	r2, #0
   b6f44:	a909      	add	r1, sp, #36	; 0x24
   b6f46:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f48:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6f4c:	f7ff fdf2 	bl	b6b34 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6f50:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6f54:	b113      	cbz	r3, b6f5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6f56:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6f5a:	b155      	cbz	r5, b6f72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6f5c:	2700      	movs	r7, #0
   b6f5e:	46b9      	mov	r9, r7
   b6f60:	46b8      	mov	r8, r7
   b6f62:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6f64:	7923      	ldrb	r3, [r4, #4]
   b6f66:	b15d      	cbz	r5, b6f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6f68:	b1c3      	cbz	r3, b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6f6a:	2000      	movs	r0, #0
}
   b6f6c:	b00f      	add	sp, #60	; 0x3c
   b6f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6f72:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6f76:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6f7a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6f7e:	e7f1      	b.n	b6f64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6f80:	2b00      	cmp	r3, #0
   b6f82:	d135      	bne.n	b6ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6f84:	68a3      	ldr	r3, [r4, #8]
   b6f86:	4543      	cmp	r3, r8
   b6f88:	d108      	bne.n	b6f9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6f8a:	f88d 9020 	strb.w	r9, [sp, #32]
   b6f8e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6f92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6f96:	89a3      	ldrh	r3, [r4, #12]
   b6f98:	429a      	cmp	r2, r3
   b6f9a:	d0e6      	beq.n	b6f6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6f9c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6f9e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6fa0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6fa4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6fa6:	ab04      	add	r3, sp, #16
   b6fa8:	f10d 020f 	add.w	r2, sp, #15
   b6fac:	f7ff ffa2 	bl	b6ef4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6fb0:	7921      	ldrb	r1, [r4, #4]
   b6fb2:	b985      	cbnz	r5, b6fd6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6fb4:	b989      	cbnz	r1, b6fda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6fb6:	68a3      	ldr	r3, [r4, #8]
   b6fb8:	4543      	cmp	r3, r8
   b6fba:	d30e      	bcc.n	b6fda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6fbc:	f88d 9020 	strb.w	r9, [sp, #32]
   b6fc0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6fc4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6fc8:	89a3      	ldrh	r3, [r4, #12]
   b6fca:	429a      	cmp	r2, r3
   b6fcc:	d105      	bne.n	b6fda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6fce:	9b04      	ldr	r3, [sp, #16]
   b6fd0:	4543      	cmp	r3, r8
   b6fd2:	d102      	bne.n	b6fda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6fd4:	e7c9      	b.n	b6f6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6fd6:	2900      	cmp	r1, #0
   b6fd8:	d1f9      	bne.n	b6fce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6fda:	2300      	movs	r3, #0
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	7b63      	ldrb	r3, [r4, #13]
   b6fe0:	9300      	str	r3, [sp, #0]
   b6fe2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6fe6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6fe8:	7830      	ldrb	r0, [r6, #0]
   b6fea:	f7ff fdab 	bl	b6b44 <hal_spi_set_settings>
   b6fee:	e7bc      	b.n	b6f6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6ff0:	e9cd 5500 	strd	r5, r5, [sp]
   b6ff4:	462b      	mov	r3, r5
   b6ff6:	462a      	mov	r2, r5
   b6ff8:	2101      	movs	r1, #1
   b6ffa:	e7f5      	b.n	b6fe8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6ffc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6ffc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ffe:	7800      	ldrb	r0, [r0, #0]
   b7000:	f7ff fd80 	bl	b6b04 <hal_spi_transfer>
}
   b7004:	b2c0      	uxtb	r0, r0
   b7006:	bd08      	pop	{r3, pc}

000b7008 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b7008:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b700a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b700c:	4604      	mov	r4, r0
      if (_M_manager)
   b700e:	b113      	cbz	r3, b7016 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7010:	2203      	movs	r2, #3
   b7012:	4601      	mov	r1, r0
   b7014:	4798      	blx	r3
    }
   b7016:	4620      	mov	r0, r4
   b7018:	bd10      	pop	{r4, pc}
	...

000b701c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b701c:	4b05      	ldr	r3, [pc, #20]	; (b7034 <_GLOBAL__sub_I_System+0x18>)
   b701e:	2202      	movs	r2, #2
   b7020:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7022:	4b05      	ldr	r3, [pc, #20]	; (b7038 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7024:	4a05      	ldr	r2, [pc, #20]	; (b703c <_GLOBAL__sub_I_System+0x20>)
   b7026:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7028:	2000      	movs	r0, #0
   b702a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b702e:	f7ff bdd9 	b.w	b6be4 <set_system_mode>
   b7032:	bf00      	nop
   b7034:	2003e6e4 	.word	0x2003e6e4
   b7038:	2003e6d8 	.word	0x2003e6d8
   b703c:	ffff0000 	.word	0xffff0000

000b7040 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b7040:	b510      	push	{r4, lr}
   b7042:	4604      	mov	r4, r0
{
    free(buffer);
   b7044:	6800      	ldr	r0, [r0, #0]
   b7046:	f7ff fe99 	bl	b6d7c <free>
}
   b704a:	4620      	mov	r0, r4
   b704c:	bd10      	pop	{r4, pc}

000b704e <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b704e:	b510      	push	{r4, lr}
   b7050:	4604      	mov	r4, r0
    if (buffer) {
   b7052:	6800      	ldr	r0, [r0, #0]
   b7054:	b108      	cbz	r0, b705a <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b7056:	f7ff fe91 	bl	b6d7c <free>
    }
    buffer = nullptr;
   b705a:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b705c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b7060:	6023      	str	r3, [r4, #0]
}
   b7062:	bd10      	pop	{r4, pc}

000b7064 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7064:	b538      	push	{r3, r4, r5, lr}
   b7066:	4604      	mov	r4, r0
   b7068:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b706a:	6800      	ldr	r0, [r0, #0]
   b706c:	3101      	adds	r1, #1
   b706e:	f7ff fe8d 	bl	b6d8c <realloc>
    if (newbuffer) {
   b7072:	b110      	cbz	r0, b707a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b7074:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b7078:	2001      	movs	r0, #1
    }
    return 0;
}
   b707a:	bd38      	pop	{r3, r4, r5, pc}

000b707c <_ZN6String7reserveEj>:
{
   b707c:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b707e:	6803      	ldr	r3, [r0, #0]
{
   b7080:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b7082:	b123      	cbz	r3, b708e <_ZN6String7reserveEj+0x12>
   b7084:	6843      	ldr	r3, [r0, #4]
   b7086:	428b      	cmp	r3, r1
   b7088:	d301      	bcc.n	b708e <_ZN6String7reserveEj+0x12>
   b708a:	2001      	movs	r0, #1
}
   b708c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b708e:	4620      	mov	r0, r4
   b7090:	f7ff ffe8 	bl	b7064 <_ZN6String12changeBufferEj>
   b7094:	2800      	cmp	r0, #0
   b7096:	d0f9      	beq.n	b708c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b7098:	68a3      	ldr	r3, [r4, #8]
   b709a:	2b00      	cmp	r3, #0
   b709c:	d1f5      	bne.n	b708a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b709e:	6822      	ldr	r2, [r4, #0]
   b70a0:	7013      	strb	r3, [r2, #0]
   b70a2:	e7f2      	b.n	b708a <_ZN6String7reserveEj+0xe>

000b70a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b70a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b70a6:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b70a8:	4611      	mov	r1, r2
   b70aa:	9201      	str	r2, [sp, #4]
{
   b70ac:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b70ae:	f7ff ffe5 	bl	b707c <_ZN6String7reserveEj>
   b70b2:	9a01      	ldr	r2, [sp, #4]
   b70b4:	b928      	cbnz	r0, b70c2 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b70b6:	4620      	mov	r0, r4
   b70b8:	f7ff ffc9 	bl	b704e <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b70bc:	4620      	mov	r0, r4
   b70be:	b003      	add	sp, #12
   b70c0:	bd30      	pop	{r4, r5, pc}
    len = length;
   b70c2:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b70c4:	4629      	mov	r1, r5
   b70c6:	6820      	ldr	r0, [r4, #0]
   b70c8:	f002 f90a 	bl	b92e0 <memcpy>
    buffer[len] = 0;
   b70cc:	6822      	ldr	r2, [r4, #0]
   b70ce:	68a3      	ldr	r3, [r4, #8]
   b70d0:	2100      	movs	r1, #0
   b70d2:	54d1      	strb	r1, [r2, r3]
    return *this;
   b70d4:	e7f2      	b.n	b70bc <_ZN6String4copyEPKcj+0x18>

000b70d6 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b70d6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b70d8:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   b70da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b70de:	4604      	mov	r4, r0
    len = 0;
   b70e0:	6083      	str	r3, [r0, #8]
    flags = 0;
   b70e2:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b70e4:	b141      	cbz	r1, b70f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b70e6:	4608      	mov	r0, r1
   b70e8:	9101      	str	r1, [sp, #4]
   b70ea:	f7fd ff45 	bl	b4f78 <strlen>
   b70ee:	9901      	ldr	r1, [sp, #4]
   b70f0:	4602      	mov	r2, r0
   b70f2:	4620      	mov	r0, r4
   b70f4:	f7ff ffd6 	bl	b70a4 <_ZN6String4copyEPKcj>
}
   b70f8:	4620      	mov	r0, r4
   b70fa:	b002      	add	sp, #8
   b70fc:	bd10      	pop	{r4, pc}

000b70fe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b70fe:	4288      	cmp	r0, r1
{
   b7100:	b510      	push	{r4, lr}
   b7102:	4604      	mov	r4, r0
    if (this == &rhs) {
   b7104:	d005      	beq.n	b7112 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b7106:	680b      	ldr	r3, [r1, #0]
   b7108:	b12b      	cbz	r3, b7116 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b710a:	688a      	ldr	r2, [r1, #8]
   b710c:	4619      	mov	r1, r3
   b710e:	f7ff ffc9 	bl	b70a4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b7112:	4620      	mov	r0, r4
   b7114:	bd10      	pop	{r4, pc}
        invalidate();
   b7116:	f7ff ff9a 	bl	b704e <_ZN6String10invalidateEv>
   b711a:	e7fa      	b.n	b7112 <_ZN6StringaSERKS_+0x14>

000b711c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b711c:	b510      	push	{r4, lr}
    buffer = nullptr;
   b711e:	2300      	movs	r3, #0
String::String(const String &value)
   b7120:	4604      	mov	r4, r0
    capacity_ = 0;
   b7122:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b7126:	6083      	str	r3, [r0, #8]
    flags = 0;
   b7128:	7303      	strb	r3, [r0, #12]
    *this = value;
   b712a:	f7ff ffe8 	bl	b70fe <_ZN6StringaSERKS_>
}
   b712e:	4620      	mov	r0, r4
   b7130:	bd10      	pop	{r4, pc}

000b7132 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7132:	b513      	push	{r0, r1, r4, lr}
   b7134:	4604      	mov	r4, r0
    if (cstr) {
   b7136:	b159      	cbz	r1, b7150 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b7138:	4608      	mov	r0, r1
   b713a:	9101      	str	r1, [sp, #4]
   b713c:	f7fd ff1c 	bl	b4f78 <strlen>
   b7140:	9901      	ldr	r1, [sp, #4]
   b7142:	4602      	mov	r2, r0
   b7144:	4620      	mov	r0, r4
   b7146:	f7ff ffad 	bl	b70a4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b714a:	4620      	mov	r0, r4
   b714c:	b002      	add	sp, #8
   b714e:	bd10      	pop	{r4, pc}
        invalidate();
   b7150:	f7ff ff7d 	bl	b704e <_ZN6String10invalidateEv>
   b7154:	e7f9      	b.n	b714a <_ZN6StringaSEPKc+0x18>

000b7156 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7156:	b513      	push	{r0, r1, r4, lr}
   b7158:	460b      	mov	r3, r1
   b715a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b715c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7160:	466c      	mov	r4, sp
   b7162:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7166:	e893 0003 	ldmia.w	r3, {r0, r1}
   b716a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b716e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7172:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7176:	b002      	add	sp, #8
   b7178:	bd10      	pop	{r4, pc}
	...

000b717c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b717c:	4802      	ldr	r0, [pc, #8]	; (b7188 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b717e:	2300      	movs	r3, #0
   b7180:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7182:	f7ff bc0f 	b.w	b69a4 <os_mutex_recursive_create>
   b7186:	bf00      	nop
   b7188:	2003e6e8 	.word	0x2003e6e8

000b718c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b718e:	4606      	mov	r6, r0
   b7190:	460d      	mov	r5, r1
  size_t n = 0;
   b7192:	188f      	adds	r7, r1, r2
   b7194:	2400      	movs	r4, #0
  while (size--) {
   b7196:	42bd      	cmp	r5, r7
   b7198:	d00c      	beq.n	b71b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b719a:	6833      	ldr	r3, [r6, #0]
   b719c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b71a0:	689b      	ldr	r3, [r3, #8]
   b71a2:	4630      	mov	r0, r6
   b71a4:	4798      	blx	r3
     if (chunk>=0)
   b71a6:	1e03      	subs	r3, r0, #0
   b71a8:	db01      	blt.n	b71ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b71aa:	441c      	add	r4, r3
  while (size--) {
   b71ac:	e7f3      	b.n	b7196 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b71ae:	2c00      	cmp	r4, #0
   b71b0:	bf08      	it	eq
   b71b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b71b4:	4620      	mov	r0, r4
   b71b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71b8 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b71b8:	b513      	push	{r0, r1, r4, lr}
   b71ba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b71bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b71be:	b159      	cbz	r1, b71d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b71c0:	9101      	str	r1, [sp, #4]
   b71c2:	f7fd fed9 	bl	b4f78 <strlen>
   b71c6:	6823      	ldr	r3, [r4, #0]
   b71c8:	9901      	ldr	r1, [sp, #4]
   b71ca:	68db      	ldr	r3, [r3, #12]
   b71cc:	4602      	mov	r2, r0
   b71ce:	4620      	mov	r0, r4
    }
   b71d0:	b002      	add	sp, #8
   b71d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b71d6:	4718      	bx	r3
    }
   b71d8:	b002      	add	sp, #8
   b71da:	bd10      	pop	{r4, pc}

000b71dc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b71dc:	b508      	push	{r3, lr}
  return write(str);
   b71de:	f7ff ffeb 	bl	b71b8 <_ZN5Print5writeEPKc>
}
   b71e2:	bd08      	pop	{r3, pc}

000b71e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b71e4:	6803      	ldr	r3, [r0, #0]
   b71e6:	689b      	ldr	r3, [r3, #8]
   b71e8:	4718      	bx	r3

000b71ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b71ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b71ec:	210d      	movs	r1, #13
{
   b71ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b71f0:	f7ff fff8 	bl	b71e4 <_ZN5Print5printEc>
  n += print('\n');
   b71f4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b71f6:	4604      	mov	r4, r0
  n += print('\n');
   b71f8:	4628      	mov	r0, r5
   b71fa:	f7ff fff3 	bl	b71e4 <_ZN5Print5printEc>
  return n;
}
   b71fe:	4420      	add	r0, r4
   b7200:	bd38      	pop	{r3, r4, r5, pc}

000b7202 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7202:	b538      	push	{r3, r4, r5, lr}
   b7204:	4605      	mov	r5, r0
  return write(str);
   b7206:	f7ff ffd7 	bl	b71b8 <_ZN5Print5writeEPKc>
   b720a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b720c:	4628      	mov	r0, r5
   b720e:	f7ff ffec 	bl	b71ea <_ZN5Print7printlnEv>
  return n;
}
   b7212:	4420      	add	r0, r4
   b7214:	bd38      	pop	{r3, r4, r5, pc}

000b7216 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7216:	b530      	push	{r4, r5, lr}
   b7218:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b721a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b721c:	2a01      	cmp	r2, #1
  *str = '\0';
   b721e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7222:	bf98      	it	ls
   b7224:	220a      	movls	r2, #10
   b7226:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7228:	460d      	mov	r5, r1
   b722a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b722e:	fb01 5312 	mls	r3, r1, r2, r5
   b7232:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7236:	2b09      	cmp	r3, #9
   b7238:	bf94      	ite	ls
   b723a:	3330      	addls	r3, #48	; 0x30
   b723c:	3337      	addhi	r3, #55	; 0x37
   b723e:	b2db      	uxtb	r3, r3
  } while(n);
   b7240:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7242:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7246:	d9ef      	bls.n	b7228 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7248:	4621      	mov	r1, r4
   b724a:	f7ff ffb5 	bl	b71b8 <_ZN5Print5writeEPKc>
}
   b724e:	b00b      	add	sp, #44	; 0x2c
   b7250:	bd30      	pop	{r4, r5, pc}

000b7252 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7256:	b086      	sub	sp, #24
   b7258:	af00      	add	r7, sp, #0
   b725a:	4605      	mov	r5, r0
   b725c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b725e:	1d38      	adds	r0, r7, #4
   b7260:	2114      	movs	r1, #20
{
   b7262:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7264:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7266:	f7ff fd99 	bl	b6d9c <vsnprintf>

    if (n<bufsize)
   b726a:	2813      	cmp	r0, #19
   b726c:	d80e      	bhi.n	b728c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b726e:	1d39      	adds	r1, r7, #4
   b7270:	4628      	mov	r0, r5
   b7272:	f7ff ffa1 	bl	b71b8 <_ZN5Print5writeEPKc>
   b7276:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7278:	b11e      	cbz	r6, b7282 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b727a:	4628      	mov	r0, r5
   b727c:	f7ff ffb5 	bl	b71ea <_ZN5Print7printlnEv>
   b7280:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7282:	4620      	mov	r0, r4
   b7284:	3718      	adds	r7, #24
   b7286:	46bd      	mov	sp, r7
   b7288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b728c:	f100 0308 	add.w	r3, r0, #8
   b7290:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7294:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7296:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b729a:	4622      	mov	r2, r4
   b729c:	1c41      	adds	r1, r0, #1
   b729e:	683b      	ldr	r3, [r7, #0]
   b72a0:	4668      	mov	r0, sp
   b72a2:	f7ff fd7b 	bl	b6d9c <vsnprintf>
  return write(str);
   b72a6:	4669      	mov	r1, sp
   b72a8:	4628      	mov	r0, r5
   b72aa:	f7ff ff85 	bl	b71b8 <_ZN5Print5writeEPKc>
   b72ae:	4604      	mov	r4, r0
   b72b0:	46c5      	mov	sp, r8
   b72b2:	e7e1      	b.n	b7278 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b72b4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b72b4:	b510      	push	{r4, lr}
   b72b6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b72b8:	f7ff fb6c 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b72bc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b72be:	6823      	ldr	r3, [r4, #0]
   b72c0:	4620      	mov	r0, r4
   b72c2:	695b      	ldr	r3, [r3, #20]
   b72c4:	4798      	blx	r3
    if (c >= 0) return c;
   b72c6:	2800      	cmp	r0, #0
   b72c8:	da08      	bge.n	b72dc <_ZN6Stream9timedReadEv+0x28>
   b72ca:	f7ff fb63 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b72ce:	68e3      	ldr	r3, [r4, #12]
   b72d0:	1ac0      	subs	r0, r0, r3
   b72d2:	68a3      	ldr	r3, [r4, #8]
   b72d4:	4298      	cmp	r0, r3
   b72d6:	d3f2      	bcc.n	b72be <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b72d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   b72dc:	bd10      	pop	{r4, pc}

000b72de <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b72de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b72e2:	4607      	mov	r7, r0
   b72e4:	460c      	mov	r4, r1
   b72e6:	188e      	adds	r6, r1, r2
   b72e8:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b72ea:	42b5      	cmp	r5, r6
   b72ec:	eba5 0804 	sub.w	r8, r5, r4
   b72f0:	d007      	beq.n	b7302 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b72f2:	4638      	mov	r0, r7
   b72f4:	f7ff ffde 	bl	b72b4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b72f8:	1e03      	subs	r3, r0, #0
   b72fa:	db02      	blt.n	b7302 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b72fc:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7300:	e7f3      	b.n	b72ea <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7302:	4640      	mov	r0, r8
   b7304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7308 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7308:	4b01      	ldr	r3, [pc, #4]	; (b7310 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b730a:	4a02      	ldr	r2, [pc, #8]	; (b7314 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b730c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b730e:	4770      	bx	lr
   b7310:	2003e6ec 	.word	0x2003e6ec
   b7314:	000b9a5c 	.word	0x000b9a5c

000b7318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7318:	4b02      	ldr	r3, [pc, #8]	; (b7324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b731a:	681a      	ldr	r2, [r3, #0]
   b731c:	4b02      	ldr	r3, [pc, #8]	; (b7328 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b731e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7320:	4770      	bx	lr
   b7322:	bf00      	nop
   b7324:	2003e5d4 	.word	0x2003e5d4
   b7328:	2003e6f0 	.word	0x2003e6f0

000b732c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b732c:	2100      	movs	r1, #0
   b732e:	f7ff bc61 	b.w	b6bf4 <system_delay_ms>
	...

000b7334 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7334:	4b01      	ldr	r3, [pc, #4]	; (b733c <_GLOBAL__sub_I_RGB+0x8>)
   b7336:	2200      	movs	r2, #0
   b7338:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b733a:	4770      	bx	lr
   b733c:	2003e6f4 	.word	0x2003e6f4

000b7340 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7340:	4b01      	ldr	r3, [pc, #4]	; (b7348 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7342:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7344:	4770      	bx	lr
   b7346:	bf00      	nop
   b7348:	2003e5dc 	.word	0x2003e5dc

000b734c <serialEventRun>:
{
   b734c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b734e:	4b0b      	ldr	r3, [pc, #44]	; (b737c <serialEventRun+0x30>)
   b7350:	b143      	cbz	r3, b7364 <serialEventRun+0x18>
   b7352:	f000 fbff 	bl	b7b54 <_Z16_fetch_usbserialv>
   b7356:	6803      	ldr	r3, [r0, #0]
   b7358:	691b      	ldr	r3, [r3, #16]
   b735a:	4798      	blx	r3
   b735c:	2800      	cmp	r0, #0
   b735e:	dd01      	ble.n	b7364 <serialEventRun+0x18>
        serialEvent();
   b7360:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7364:	4b06      	ldr	r3, [pc, #24]	; (b7380 <serialEventRun+0x34>)
   b7366:	b143      	cbz	r3, b737a <serialEventRun+0x2e>
   b7368:	f000 fec4 	bl	b80f4 <_Z22__fetch_global_Serial1v>
   b736c:	6803      	ldr	r3, [r0, #0]
   b736e:	691b      	ldr	r3, [r3, #16]
   b7370:	4798      	blx	r3
   b7372:	2800      	cmp	r0, #0
   b7374:	dd01      	ble.n	b737a <serialEventRun+0x2e>
        serialEvent1();
   b7376:	f3af 8000 	nop.w
}
   b737a:	bd08      	pop	{r3, pc}
	...

000b7384 <_post_loop>:
{
   b7384:	b508      	push	{r3, lr}
	serialEventRun();
   b7386:	f7ff ffe1 	bl	b734c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b738a:	f7ff fb03 	bl	b6994 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b738e:	4b01      	ldr	r3, [pc, #4]	; (b7394 <_post_loop+0x10>)
   b7390:	6018      	str	r0, [r3, #0]
}
   b7392:	bd08      	pop	{r3, pc}
   b7394:	2003e74c 	.word	0x2003e74c

000b7398 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7398:	4805      	ldr	r0, [pc, #20]	; (b73b0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b739a:	4a06      	ldr	r2, [pc, #24]	; (b73b4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b739c:	4906      	ldr	r1, [pc, #24]	; (b73b8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b739e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b73a0:	1a12      	subs	r2, r2, r0
   b73a2:	f001 ff9d 	bl	b92e0 <memcpy>
    __backup_sram_signature = signature;
   b73a6:	4b05      	ldr	r3, [pc, #20]	; (b73bc <_Z33system_initialize_user_backup_ramv+0x24>)
   b73a8:	4a05      	ldr	r2, [pc, #20]	; (b73c0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b73aa:	601a      	str	r2, [r3, #0]
}
   b73ac:	bd08      	pop	{r3, pc}
   b73ae:	bf00      	nop
   b73b0:	2003f400 	.word	0x2003f400
   b73b4:	2003f404 	.word	0x2003f404
   b73b8:	000b9d44 	.word	0x000b9d44
   b73bc:	2003f400 	.word	0x2003f400
   b73c0:	9a271c1e 	.word	0x9a271c1e

000b73c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b73c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b73c6:	2300      	movs	r3, #0
   b73c8:	9300      	str	r3, [sp, #0]
   b73ca:	461a      	mov	r2, r3
   b73cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b73d0:	f7ff fc3a 	bl	b6c48 <system_ctrl_set_result>
}
   b73d4:	b003      	add	sp, #12
   b73d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b73dc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b73dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b73de:	8843      	ldrh	r3, [r0, #2]
   b73e0:	2b0a      	cmp	r3, #10
   b73e2:	d008      	beq.n	b73f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b73e4:	2b50      	cmp	r3, #80	; 0x50
   b73e6:	d10b      	bne.n	b7400 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b73e8:	4b09      	ldr	r3, [pc, #36]	; (b7410 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b73ea:	681b      	ldr	r3, [r3, #0]
   b73ec:	b14b      	cbz	r3, b7402 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b73ee:	b003      	add	sp, #12
   b73f0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b73f4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b73f6:	f7ff ffe5 	bl	b73c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b73fa:	b003      	add	sp, #12
   b73fc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7400:	2300      	movs	r3, #0
   b7402:	9300      	str	r3, [sp, #0]
   b7404:	461a      	mov	r2, r3
   b7406:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b740a:	f7ff fc1d 	bl	b6c48 <system_ctrl_set_result>
}
   b740e:	e7f4      	b.n	b73fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7410:	2003e708 	.word	0x2003e708

000b7414 <module_user_init_hook>:
{
   b7414:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7416:	4812      	ldr	r0, [pc, #72]	; (b7460 <module_user_init_hook+0x4c>)
   b7418:	2100      	movs	r1, #0
   b741a:	f7ff fce7 	bl	b6dec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b741e:	4b11      	ldr	r3, [pc, #68]	; (b7464 <module_user_init_hook+0x50>)
   b7420:	681a      	ldr	r2, [r3, #0]
   b7422:	4b11      	ldr	r3, [pc, #68]	; (b7468 <module_user_init_hook+0x54>)
   b7424:	429a      	cmp	r2, r3
   b7426:	4b11      	ldr	r3, [pc, #68]	; (b746c <module_user_init_hook+0x58>)
   b7428:	bf0c      	ite	eq
   b742a:	2201      	moveq	r2, #1
   b742c:	2200      	movne	r2, #0
   b742e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7430:	d001      	beq.n	b7436 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7432:	f7ff ffb1 	bl	b7398 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7436:	f7ff faa5 	bl	b6984 <HAL_RNG_GetRandomNumber>
   b743a:	4604      	mov	r4, r0
    srand(seed);
   b743c:	f001 ff66 	bl	b930c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7440:	4b0b      	ldr	r3, [pc, #44]	; (b7470 <module_user_init_hook+0x5c>)
   b7442:	b113      	cbz	r3, b744a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7444:	4620      	mov	r0, r4
   b7446:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b744a:	2100      	movs	r1, #0
   b744c:	4808      	ldr	r0, [pc, #32]	; (b7470 <module_user_init_hook+0x5c>)
   b744e:	f7ff fc85 	bl	b6d5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7456:	4807      	ldr	r0, [pc, #28]	; (b7474 <module_user_init_hook+0x60>)
   b7458:	2100      	movs	r1, #0
   b745a:	f7ff bbeb 	b.w	b6c34 <system_ctrl_set_app_request_handler>
   b745e:	bf00      	nop
   b7460:	000b7341 	.word	0x000b7341
   b7464:	2003f400 	.word	0x2003f400
   b7468:	9a271c1e 	.word	0x9a271c1e
   b746c:	2003e704 	.word	0x2003e704
   b7470:	00000000 	.word	0x00000000
   b7474:	000b73dd 	.word	0x000b73dd

000b7478 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7478:	4770      	bx	lr

000b747a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b747a:	2000      	movs	r0, #0
   b747c:	4770      	bx	lr

000b747e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b747e:	b510      	push	{r4, lr}
   b7480:	2110      	movs	r1, #16
   b7482:	4604      	mov	r4, r0
   b7484:	f7fd fdbf 	bl	b5006 <_ZdlPvj>
   b7488:	4620      	mov	r0, r4
   b748a:	bd10      	pop	{r4, pc}

000b748c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b748c:	b508      	push	{r3, lr}
      { delete this; }
   b748e:	f7ff fff6 	bl	b747e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7492:	bd08      	pop	{r3, pc}

000b7494 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7494:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7496:	2200      	movs	r2, #0
   b7498:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b749c:	6002      	str	r2, [r0, #0]
   b749e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b74a0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b74a2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b74a4:	680c      	ldr	r4, [r1, #0]
   b74a6:	8085      	strh	r5, [r0, #4]
   b74a8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b74aa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b74ac:	bd30      	pop	{r4, r5, pc}

000b74ae <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b74ae:	b510      	push	{r4, lr}
   b74b0:	4604      	mov	r4, r0
    free((void*)msg_);
   b74b2:	6800      	ldr	r0, [r0, #0]
   b74b4:	f7ff fc62 	bl	b6d7c <free>
}
   b74b8:	4620      	mov	r0, r4
   b74ba:	bd10      	pop	{r4, pc}

000b74bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b74bc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b74be:	68c4      	ldr	r4, [r0, #12]
   b74c0:	b1f4      	cbz	r4, b7500 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b74c2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b74c4:	2b02      	cmp	r3, #2
   b74c6:	d103      	bne.n	b74d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b74c8:	f104 000c 	add.w	r0, r4, #12
   b74cc:	f7ff ffef 	bl	b74ae <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b74d0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b74d2:	b135      	cbz	r5, b74e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b74d4:	4628      	mov	r0, r5
   b74d6:	f7ff fd97 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
   b74da:	2110      	movs	r1, #16
   b74dc:	4628      	mov	r0, r5
   b74de:	f7fd fd92 	bl	b5006 <_ZdlPvj>
   b74e2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b74e4:	b135      	cbz	r5, b74f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b74e6:	4628      	mov	r0, r5
   b74e8:	f7ff fd8e 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
   b74ec:	2110      	movs	r1, #16
   b74ee:	4628      	mov	r0, r5
   b74f0:	f7fd fd89 	bl	b5006 <_ZdlPvj>
   b74f4:	4620      	mov	r0, r4
   b74f6:	2114      	movs	r1, #20
   b74f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b74fc:	f7fd bd83 	b.w	b5006 <_ZdlPvj>
   b7500:	bd38      	pop	{r3, r4, r5, pc}

000b7502 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7502:	680b      	ldr	r3, [r1, #0]
   b7504:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7506:	684b      	ldr	r3, [r1, #4]
   b7508:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b750a:	b113      	cbz	r3, b7512 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b750c:	685a      	ldr	r2, [r3, #4]
   b750e:	3201      	adds	r2, #1
   b7510:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7512:	4770      	bx	lr

000b7514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7516:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7518:	4668      	mov	r0, sp
   b751a:	460d      	mov	r5, r1
   b751c:	f7ff fff1 	bl	b7502 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7520:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7522:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7524:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7526:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7528:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b752a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b752c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b752e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7530:	f7ff fca2 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7534:	b135      	cbz	r5, b7544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7536:	1d28      	adds	r0, r5, #4
   b7538:	f7ff fc9e 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b753c:	2108      	movs	r1, #8
   b753e:	4628      	mov	r0, r5
   b7540:	f7fd fd61 	bl	b5006 <_ZdlPvj>
        return p;
    }
   b7544:	4620      	mov	r0, r4
   b7546:	b003      	add	sp, #12
   b7548:	bd30      	pop	{r4, r5, pc}

000b754a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b754a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b754c:	b510      	push	{r4, lr}
      if (_M_empty())
   b754e:	b90a      	cbnz	r2, b7554 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7550:	f000 fe36 	bl	b81c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b7554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7558:	68c3      	ldr	r3, [r0, #12]
   b755a:	4718      	bx	r3

000b755c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b755c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b755e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7560:	f100 0110 	add.w	r1, r0, #16
   b7564:	f7ff fff1 	bl	b754a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7568:	bd08      	pop	{r3, pc}

000b756a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b756a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b756c:	b510      	push	{r4, lr}
      if (_M_empty())
   b756e:	b90a      	cbnz	r2, b7574 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7570:	f000 fe26 	bl	b81c0 <_ZSt25__throw_bad_function_callv>
    }
   b7574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7578:	68c3      	ldr	r3, [r0, #12]
   b757a:	4718      	bx	r3

000b757c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b757c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b757e:	6800      	ldr	r0, [r0, #0]
   b7580:	f100 0110 	add.w	r1, r0, #16
   b7584:	f7ff fff1 	bl	b756a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7588:	bd08      	pop	{r3, pc}
	...

000b758c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b758c:	b538      	push	{r3, r4, r5, lr}
   b758e:	2300      	movs	r3, #0
   b7590:	4604      	mov	r4, r0
   b7592:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7594:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7596:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7598:	f7fd fd31 	bl	b4ffe <_Znwj>
   b759c:	b128      	cbz	r0, b75aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b759e:	2301      	movs	r3, #1
   b75a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b75a4:	4b02      	ldr	r3, [pc, #8]	; (b75b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b75a6:	6003      	str	r3, [r0, #0]
   b75a8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b75aa:	6020      	str	r0, [r4, #0]
	}
   b75ac:	4620      	mov	r0, r4
   b75ae:	bd38      	pop	{r3, r4, r5, pc}
   b75b0:	000b9a84 	.word	0x000b9a84

000b75b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b75b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b75b6:	2300      	movs	r3, #0
   b75b8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b75ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b75bc:	4604      	mov	r4, r0
   b75be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b75c0:	b12b      	cbz	r3, b75ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b75c2:	2202      	movs	r2, #2
   b75c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b75c6:	68eb      	ldr	r3, [r5, #12]
   b75c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b75ca:	68ab      	ldr	r3, [r5, #8]
   b75cc:	60a3      	str	r3, [r4, #8]
    }
   b75ce:	4620      	mov	r0, r4
   b75d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b75d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b75d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b75d6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b75d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b75da:	4668      	mov	r0, sp
   b75dc:	f7ff ff5a 	bl	b7494 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b75e0:	f04f 0302 	mov.w	r3, #2
   b75e4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b75e8:	2a00      	cmp	r2, #0
   b75ea:	d103      	bne.n	b75f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b75ec:	e8c4 3f41 	strexb	r1, r3, [r4]
   b75f0:	2900      	cmp	r1, #0
   b75f2:	d1f7      	bne.n	b75e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b75f4:	d125      	bne.n	b7642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b75f6:	f104 050c 	add.w	r5, r4, #12
   b75fa:	4669      	mov	r1, sp
   b75fc:	4628      	mov	r0, r5
   b75fe:	f7ff ff49 	bl	b7494 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7602:	f3bf 8f5b 	dmb	ish
   b7606:	2301      	movs	r3, #1
   b7608:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b760a:	2000      	movs	r0, #0
   b760c:	f104 0308 	add.w	r3, r4, #8
   b7610:	f3bf 8f5b 	dmb	ish
   b7614:	e853 6f00 	ldrex	r6, [r3]
   b7618:	e843 0200 	strex	r2, r0, [r3]
   b761c:	2a00      	cmp	r2, #0
   b761e:	d1f9      	bne.n	b7614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7620:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7624:	b16e      	cbz	r6, b7642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7626:	f7ff faf5 	bl	b6c14 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b762a:	b178      	cbz	r0, b764c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b762c:	4629      	mov	r1, r5
   b762e:	4630      	mov	r0, r6
   b7630:	f7ff ff8b 	bl	b754a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7634:	4630      	mov	r0, r6
   b7636:	f7ff fce7 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b763a:	2110      	movs	r1, #16
   b763c:	4630      	mov	r0, r6
   b763e:	f7fd fce2 	bl	b5006 <_ZdlPvj>
        p_->setError(std::move(error));
   b7642:	4668      	mov	r0, sp
   b7644:	f7ff ff33 	bl	b74ae <_ZN8particle5ErrorD1Ev>
    }
   b7648:	b009      	add	sp, #36	; 0x24
   b764a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b764c:	4631      	mov	r1, r6
   b764e:	a802      	add	r0, sp, #8
   b7650:	f7ff ffb0 	bl	b75b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7654:	68e0      	ldr	r0, [r4, #12]
   b7656:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b765a:	b108      	cbz	r0, b7660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b765c:	f001 fe84 	bl	b9368 <strdup>
        type_(type) {
   b7660:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7662:	2010      	movs	r0, #16
   b7664:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7668:	f7fd fcc9 	bl	b4ffe <_Znwj>
   b766c:	4605      	mov	r5, r0
   b766e:	b1e8      	cbz	r0, b76ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7670:	2700      	movs	r7, #0
   b7672:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7674:	2018      	movs	r0, #24
   b7676:	f7fd fcc2 	bl	b4ffe <_Znwj>
   b767a:	4604      	mov	r4, r0
   b767c:	b188      	cbz	r0, b76a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b767e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7680:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7682:	a802      	add	r0, sp, #8
   b7684:	f7ff fd67 	bl	b7156 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7688:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b768a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b768c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b768e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7690:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7692:	a906      	add	r1, sp, #24
   b7694:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7696:	60e3      	str	r3, [r4, #12]
   b7698:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b769c:	9205      	str	r2, [sp, #20]
   b769e:	f7ff fef9 	bl	b7494 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b76a2:	4b08      	ldr	r3, [pc, #32]	; (b76c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b76a4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b76a6:	4b08      	ldr	r3, [pc, #32]	; (b76c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b76a8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b76aa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b76ac:	a806      	add	r0, sp, #24
   b76ae:	f7ff fefe 	bl	b74ae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b76b2:	a802      	add	r0, sp, #8
   b76b4:	f7ff fca8 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b76b8:	2200      	movs	r2, #0
   b76ba:	4629      	mov	r1, r5
   b76bc:	4803      	ldr	r0, [pc, #12]	; (b76cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b76be:	f7ff fab1 	bl	b6c24 <application_thread_invoke>
   b76c2:	e7b7      	b.n	b7634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b76c4:	000b755d 	.word	0x000b755d
   b76c8:	000b77e1 	.word	0x000b77e1
   b76cc:	000b7c45 	.word	0x000b7c45

000b76d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b76d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76d4:	b08b      	sub	sp, #44	; 0x2c
   b76d6:	4605      	mov	r5, r0
   b76d8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b76dc:	460f      	mov	r7, r1
   b76de:	4690      	mov	r8, r2
   b76e0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b76e2:	f7ff fb2b 	bl	b6d3c <spark_cloud_flag_connected>
   b76e6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b76e8:	4683      	mov	fp, r0
   b76ea:	bb38      	cbnz	r0, b773c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b76ec:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b76f0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b76f2:	a905      	add	r1, sp, #20
   b76f4:	4630      	mov	r0, r6
   b76f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b76fa:	f7ff fecb 	bl	b7494 <_ZN8particle5ErrorC1EOS0_>
   b76fe:	2014      	movs	r0, #20
   b7700:	f7fd fc7d 	bl	b4ffe <_Znwj>
   b7704:	4604      	mov	r4, r0
   b7706:	b148      	cbz	r0, b771c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7708:	2302      	movs	r3, #2
   b770a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b770c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b770e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7712:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7714:	4631      	mov	r1, r6
   b7716:	300c      	adds	r0, #12
   b7718:	f7ff febc 	bl	b7494 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b771c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b771e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7720:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7724:	f7ff ff32 	bl	b758c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7728:	4630      	mov	r0, r6
   b772a:	f7ff fec0 	bl	b74ae <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b772e:	a805      	add	r0, sp, #20
   b7730:	f7ff febd 	bl	b74ae <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7734:	4628      	mov	r0, r5
   b7736:	b00b      	add	sp, #44	; 0x2c
   b7738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b773c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b773e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7740:	2014      	movs	r0, #20
   b7742:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7746:	9307      	str	r3, [sp, #28]
   b7748:	f7fd fc59 	bl	b4ffe <_Znwj>
   b774c:	4601      	mov	r1, r0
   b774e:	b118      	cbz	r0, b7758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7750:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7754:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7756:	7044      	strb	r4, [r0, #1]
   b7758:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b775a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b775c:	f7ff ff16 	bl	b758c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7760:	4b1e      	ldr	r3, [pc, #120]	; (b77dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7762:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7764:	2008      	movs	r0, #8
   b7766:	f7fd fc4a 	bl	b4ffe <_Znwj>
   b776a:	4604      	mov	r4, r0
   b776c:	b110      	cbz	r0, b7774 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b776e:	a903      	add	r1, sp, #12
   b7770:	f7ff fec7 	bl	b7502 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7774:	9600      	str	r6, [sp, #0]
   b7776:	fa5f f38a 	uxtb.w	r3, sl
   b777a:	464a      	mov	r2, r9
   b777c:	4641      	mov	r1, r8
   b777e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7780:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7782:	f7ff fae3 	bl	b6d4c <spark_send_event>
   b7786:	b9b8      	cbnz	r0, b77b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7788:	9b03      	ldr	r3, [sp, #12]
   b778a:	785b      	ldrb	r3, [r3, #1]
   b778c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7790:	b993      	cbnz	r3, b77b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7792:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7796:	a905      	add	r1, sp, #20
   b7798:	a803      	add	r0, sp, #12
   b779a:	9205      	str	r2, [sp, #20]
   b779c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b77a0:	f7ff ff18 	bl	b75d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b77a4:	a805      	add	r0, sp, #20
   b77a6:	f7ff fe82 	bl	b74ae <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b77aa:	a805      	add	r0, sp, #20
   b77ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   b77ae:	f7ff feb1 	bl	b7514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b77b2:	a806      	add	r0, sp, #24
   b77b4:	f7ff fb60 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77b8:	a903      	add	r1, sp, #12
   b77ba:	a805      	add	r0, sp, #20
   b77bc:	f7ff fea1 	bl	b7502 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b77c0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b77c2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b77c4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b77c6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b77c8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b77ca:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b77cc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b77ce:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b77d0:	f7ff fb52 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77d4:	a804      	add	r0, sp, #16
   b77d6:	f7ff fb4f 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b77da:	e7ab      	b.n	b7734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b77dc:	000b78a5 	.word	0x000b78a5

000b77e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b77e0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b77e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77e4:	4605      	mov	r5, r0
	switch (__op)
   b77e6:	d103      	bne.n	b77f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b77e8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b77ea:	6003      	str	r3, [r0, #0]
      }
   b77ec:	2000      	movs	r0, #0
   b77ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b77f0:	2a02      	cmp	r2, #2
   b77f2:	d010      	beq.n	b7816 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b77f4:	2a03      	cmp	r2, #3
   b77f6:	d1f9      	bne.n	b77ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b77f8:	6804      	ldr	r4, [r0, #0]
   b77fa:	2c00      	cmp	r4, #0
   b77fc:	d0f6      	beq.n	b77ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b77fe:	f104 0010 	add.w	r0, r4, #16
   b7802:	f7ff fe54 	bl	b74ae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7806:	4620      	mov	r0, r4
   b7808:	f7ff fbfe 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b780c:	2118      	movs	r1, #24
   b780e:	4620      	mov	r0, r4
   b7810:	f7fd fbf9 	bl	b5006 <_ZdlPvj>
   b7814:	e7ea      	b.n	b77ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7816:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7818:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b781a:	f7fd fbf0 	bl	b4ffe <_Znwj>
   b781e:	4604      	mov	r4, r0
   b7820:	b150      	cbz	r0, b7838 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b7822:	4631      	mov	r1, r6
   b7824:	f7ff fec6 	bl	b75b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7828:	6930      	ldr	r0, [r6, #16]
   b782a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b782e:	b108      	cbz	r0, b7834 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7830:	f001 fd9a 	bl	b9368 <strdup>
        type_(type) {
   b7834:	6120      	str	r0, [r4, #16]
   b7836:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7838:	602c      	str	r4, [r5, #0]
	}
   b783a:	e7d7      	b.n	b77ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b783c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b783c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b783e:	2300      	movs	r3, #0
   b7840:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7842:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7844:	4604      	mov	r4, r0
   b7846:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7848:	b12b      	cbz	r3, b7856 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b784a:	2202      	movs	r2, #2
   b784c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b784e:	68eb      	ldr	r3, [r5, #12]
   b7850:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7852:	68ab      	ldr	r3, [r5, #8]
   b7854:	60a3      	str	r3, [r4, #8]
    }
   b7856:	4620      	mov	r0, r4
   b7858:	bd38      	pop	{r3, r4, r5, pc}

000b785a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b785a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b785c:	b570      	push	{r4, r5, r6, lr}
   b785e:	4604      	mov	r4, r0
	switch (__op)
   b7860:	d103      	bne.n	b786a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7862:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7864:	6003      	str	r3, [r0, #0]
      }
   b7866:	2000      	movs	r0, #0
   b7868:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b786a:	2a02      	cmp	r2, #2
   b786c:	d00c      	beq.n	b7888 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b786e:	2a03      	cmp	r2, #3
   b7870:	d1f9      	bne.n	b7866 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7872:	6804      	ldr	r4, [r0, #0]
   b7874:	2c00      	cmp	r4, #0
   b7876:	d0f6      	beq.n	b7866 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7878:	4620      	mov	r0, r4
   b787a:	f7ff fbc5 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b787e:	2114      	movs	r1, #20
   b7880:	4620      	mov	r0, r4
   b7882:	f7fd fbc0 	bl	b5006 <_ZdlPvj>
   b7886:	e7ee      	b.n	b7866 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7888:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b788a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b788c:	f7fd fbb7 	bl	b4ffe <_Znwj>
   b7890:	4605      	mov	r5, r0
   b7892:	b120      	cbz	r0, b789e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b7894:	4631      	mov	r1, r6
   b7896:	f7ff ffd1 	bl	b783c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b789a:	7c33      	ldrb	r3, [r6, #16]
   b789c:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b789e:	6025      	str	r5, [r4, #0]
	}
   b78a0:	e7e1      	b.n	b7866 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b78a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b78a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b78a6:	b089      	sub	sp, #36	; 0x24
   b78a8:	4604      	mov	r4, r0
   b78aa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b78ac:	a801      	add	r0, sp, #4
   b78ae:	4611      	mov	r1, r2
   b78b0:	f7ff fe30 	bl	b7514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b78b4:	b1a4      	cbz	r4, b78e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b78b6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b78b8:	b11d      	cbz	r5, b78c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b78ba:	4628      	mov	r0, r5
   b78bc:	f001 fd54 	bl	b9368 <strdup>
   b78c0:	4605      	mov	r5, r0
   b78c2:	a801      	add	r0, sp, #4
   b78c4:	a903      	add	r1, sp, #12
        type_(type) {
   b78c6:	9503      	str	r5, [sp, #12]
   b78c8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b78cc:	f7ff fe82 	bl	b75d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b78d0:	a803      	add	r0, sp, #12
   b78d2:	f7ff fdec 	bl	b74ae <_ZN8particle5ErrorD1Ev>
   b78d6:	a802      	add	r0, sp, #8
   b78d8:	f7ff face 	bl	b6e78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b78dc:	b009      	add	sp, #36	; 0x24
   b78de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b78e0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b78e2:	2301      	movs	r3, #1
   b78e4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b78e8:	2a00      	cmp	r2, #0
   b78ea:	d103      	bne.n	b78f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b78ec:	e8c5 3f41 	strexb	r1, r3, [r5]
   b78f0:	2900      	cmp	r1, #0
   b78f2:	d1f7      	bne.n	b78e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b78f4:	d1ef      	bne.n	b78d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b78f6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b78f8:	f3bf 8f5b 	dmb	ish
   b78fc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b78fe:	1d2b      	adds	r3, r5, #4
   b7900:	f3bf 8f5b 	dmb	ish
   b7904:	e853 6f00 	ldrex	r6, [r3]
   b7908:	e843 4200 	strex	r2, r4, [r3]
   b790c:	2a00      	cmp	r2, #0
   b790e:	d1f9      	bne.n	b7904 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7910:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7914:	2e00      	cmp	r6, #0
   b7916:	d0de      	beq.n	b78d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7918:	4620      	mov	r0, r4
   b791a:	f7ff f97b 	bl	b6c14 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b791e:	4607      	mov	r7, r0
   b7920:	b160      	cbz	r0, b793c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7922:	f105 010c 	add.w	r1, r5, #12
   b7926:	4630      	mov	r0, r6
   b7928:	f7ff fe1f 	bl	b756a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b792c:	4630      	mov	r0, r6
   b792e:	f7ff fb6b 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7932:	2110      	movs	r1, #16
   b7934:	4630      	mov	r0, r6
   b7936:	f7fd fb66 	bl	b5006 <_ZdlPvj>
   b793a:	e7cc      	b.n	b78d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b793c:	4631      	mov	r1, r6
   b793e:	a803      	add	r0, sp, #12
   b7940:	f7ff ff7c 	bl	b783c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7944:	7b2b      	ldrb	r3, [r5, #12]
   b7946:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b794a:	2010      	movs	r0, #16
   b794c:	f7fd fb57 	bl	b4ffe <_Znwj>
   b7950:	4605      	mov	r5, r0
   b7952:	b1d0      	cbz	r0, b798a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7954:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7956:	2014      	movs	r0, #20
   b7958:	f7fd fb51 	bl	b4ffe <_Znwj>
   b795c:	4604      	mov	r4, r0
   b795e:	b178      	cbz	r0, b7980 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7960:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7962:	4601      	mov	r1, r0
   b7964:	a803      	add	r0, sp, #12
   b7966:	f7ff fbf6 	bl	b7156 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b796a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b796c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b796e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7970:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7972:	9205      	str	r2, [sp, #20]
   b7974:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7976:	60e3      	str	r3, [r4, #12]
   b7978:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b797c:	9206      	str	r2, [sp, #24]
   b797e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7980:	4b06      	ldr	r3, [pc, #24]	; (b799c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7982:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7984:	4b06      	ldr	r3, [pc, #24]	; (b79a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7986:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7988:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b798a:	a803      	add	r0, sp, #12
   b798c:	f7ff fb3c 	bl	b7008 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7990:	2200      	movs	r2, #0
   b7992:	4629      	mov	r1, r5
   b7994:	4803      	ldr	r0, [pc, #12]	; (b79a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7996:	f7ff f945 	bl	b6c24 <application_thread_invoke>
   b799a:	e7c7      	b.n	b792c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b799c:	000b757d 	.word	0x000b757d
   b79a0:	000b785b 	.word	0x000b785b
   b79a4:	000b7c45 	.word	0x000b7c45

000b79a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b79a8:	4770      	bx	lr

000b79aa <_ZN9IPAddressD0Ev>:
   b79aa:	b510      	push	{r4, lr}
   b79ac:	2118      	movs	r1, #24
   b79ae:	4604      	mov	r4, r0
   b79b0:	f7fd fb29 	bl	b5006 <_ZdlPvj>
   b79b4:	4620      	mov	r0, r4
   b79b6:	bd10      	pop	{r4, pc}

000b79b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b79b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b79ba:	7d03      	ldrb	r3, [r0, #20]
   b79bc:	2b06      	cmp	r3, #6
{
   b79be:	b08d      	sub	sp, #52	; 0x34
   b79c0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b79c2:	f100 0704 	add.w	r7, r0, #4
   b79c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b79ca:	d012      	beq.n	b79f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b79cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b79d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b79d4:	220a      	movs	r2, #10
   b79d6:	4630      	mov	r0, r6
   b79d8:	f7ff fc1d 	bl	b7216 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b79dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b79de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b79e0:	d019      	beq.n	b7a16 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b79e2:	2c00      	cmp	r4, #0
   b79e4:	d0f4      	beq.n	b79d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b79e6:	212e      	movs	r1, #46	; 0x2e
   b79e8:	4630      	mov	r0, r6
   b79ea:	f7ff fbfb 	bl	b71e4 <_ZN5Print5printEc>
   b79ee:	4404      	add	r4, r0
   b79f0:	e7ee      	b.n	b79d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b79f2:	232f      	movs	r3, #47	; 0x2f
   b79f4:	466a      	mov	r2, sp
   b79f6:	4639      	mov	r1, r7
   b79f8:	200a      	movs	r0, #10
		buf[0] = 0;
   b79fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b79fe:	f7fe ffd9 	bl	b69b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7a02:	4668      	mov	r0, sp
   b7a04:	f7fd fab8 	bl	b4f78 <strlen>
   b7a08:	6833      	ldr	r3, [r6, #0]
   b7a0a:	4602      	mov	r2, r0
   b7a0c:	68db      	ldr	r3, [r3, #12]
   b7a0e:	4669      	mov	r1, sp
   b7a10:	4630      	mov	r0, r6
   b7a12:	4798      	blx	r3
   b7a14:	4604      	mov	r4, r0
    }
    return n;
}
   b7a16:	4620      	mov	r0, r4
   b7a18:	b00d      	add	sp, #52	; 0x34
   b7a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a1c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7a1c:	b510      	push	{r4, lr}
   b7a1e:	4b05      	ldr	r3, [pc, #20]	; (b7a34 <_ZN9IPAddressC1Ev+0x18>)
   b7a20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7a22:	2211      	movs	r2, #17
   b7a24:	f840 3b04 	str.w	r3, [r0], #4
   b7a28:	2100      	movs	r1, #0
   b7a2a:	f001 fc67 	bl	b92fc <memset>
}
   b7a2e:	4620      	mov	r0, r4
   b7a30:	bd10      	pop	{r4, pc}
   b7a32:	bf00      	nop
   b7a34:	000b9aa0 	.word	0x000b9aa0

000b7a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7a38:	4603      	mov	r3, r0
   b7a3a:	4a07      	ldr	r2, [pc, #28]	; (b7a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7a3c:	b510      	push	{r4, lr}
   b7a3e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7a42:	f101 0210 	add.w	r2, r1, #16
   b7a46:	f851 4b04 	ldr.w	r4, [r1], #4
   b7a4a:	f843 4b04 	str.w	r4, [r3], #4
   b7a4e:	4291      	cmp	r1, r2
   b7a50:	d1f9      	bne.n	b7a46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7a52:	780a      	ldrb	r2, [r1, #0]
   b7a54:	701a      	strb	r2, [r3, #0]
}
   b7a56:	bd10      	pop	{r4, pc}
   b7a58:	000b9aa0 	.word	0x000b9aa0

000b7a5c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7a5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7a5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7a62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7a66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7a6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7a6e:	2304      	movs	r3, #4
   b7a70:	6041      	str	r1, [r0, #4]
   b7a72:	7503      	strb	r3, [r0, #20]
}
   b7a74:	bd10      	pop	{r4, pc}
	...

000b7a78 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7a78:	b507      	push	{r0, r1, r2, lr}
   b7a7a:	4b06      	ldr	r3, [pc, #24]	; (b7a94 <_ZN9IPAddressC1EPKh+0x1c>)
   b7a7c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7a7e:	78cb      	ldrb	r3, [r1, #3]
   b7a80:	9300      	str	r3, [sp, #0]
   b7a82:	788b      	ldrb	r3, [r1, #2]
   b7a84:	784a      	ldrb	r2, [r1, #1]
   b7a86:	7809      	ldrb	r1, [r1, #0]
   b7a88:	f7ff ffe8 	bl	b7a5c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7a8c:	b003      	add	sp, #12
   b7a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7a92:	bf00      	nop
   b7a94:	000b9aa0 	.word	0x000b9aa0

000b7a98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a98:	7441      	strb	r1, [r0, #17]
}
   b7a9a:	4770      	bx	lr

000b7a9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7a9c:	4770      	bx	lr

000b7a9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7a9e:	4770      	bx	lr

000b7aa0 <_ZN9USBSerial4readEv>:
{
   b7aa0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7aa2:	2100      	movs	r1, #0
   b7aa4:	7c00      	ldrb	r0, [r0, #16]
   b7aa6:	f7ff f885 	bl	b6bb4 <HAL_USB_USART_Receive_Data>
}
   b7aaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aae:	bd08      	pop	{r3, pc}

000b7ab0 <_ZN9USBSerial4peekEv>:
{
   b7ab0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7ab2:	2101      	movs	r1, #1
   b7ab4:	7c00      	ldrb	r0, [r0, #16]
   b7ab6:	f7ff f87d 	bl	b6bb4 <HAL_USB_USART_Receive_Data>
}
   b7aba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7abe:	bd08      	pop	{r3, pc}

000b7ac0 <_ZN9USBSerial17availableForWriteEv>:
{
   b7ac0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7ac2:	7c00      	ldrb	r0, [r0, #16]
   b7ac4:	f7ff f86e 	bl	b6ba4 <HAL_USB_USART_Available_Data_For_Write>
}
   b7ac8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7acc:	bd08      	pop	{r3, pc}

000b7ace <_ZN9USBSerial9availableEv>:
{
   b7ace:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7ad0:	7c00      	ldrb	r0, [r0, #16]
   b7ad2:	f7ff f85f 	bl	b6b94 <HAL_USB_USART_Available_Data>
}
   b7ad6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ada:	bd08      	pop	{r3, pc}

000b7adc <_ZN9USBSerial5writeEh>:
{
   b7adc:	b513      	push	{r0, r1, r4, lr}
   b7ade:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ae0:	7c00      	ldrb	r0, [r0, #16]
{
   b7ae2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ae4:	f7ff f85e 	bl	b6ba4 <HAL_USB_USART_Available_Data_For_Write>
   b7ae8:	2800      	cmp	r0, #0
   b7aea:	9901      	ldr	r1, [sp, #4]
   b7aec:	dc01      	bgt.n	b7af2 <_ZN9USBSerial5writeEh+0x16>
   b7aee:	7c60      	ldrb	r0, [r4, #17]
   b7af0:	b120      	cbz	r0, b7afc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7af2:	7c20      	ldrb	r0, [r4, #16]
   b7af4:	f7ff f866 	bl	b6bc4 <HAL_USB_USART_Send_Data>
   b7af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7afc:	b002      	add	sp, #8
   b7afe:	bd10      	pop	{r4, pc}

000b7b00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b00:	7c00      	ldrb	r0, [r0, #16]
   b7b02:	f7ff b867 	b.w	b6bd4 <HAL_USB_USART_Flush_Data>

000b7b06 <_ZN9USBSerialD0Ev>:
   b7b06:	b510      	push	{r4, lr}
   b7b08:	2114      	movs	r1, #20
   b7b0a:	4604      	mov	r4, r0
   b7b0c:	f7fd fa7b 	bl	b5006 <_ZdlPvj>
   b7b10:	4620      	mov	r0, r4
   b7b12:	bd10      	pop	{r4, pc}

000b7b14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b14:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b1a:	4604      	mov	r4, r0
   b7b1c:	4608      	mov	r0, r1
   b7b1e:	2100      	movs	r1, #0
   b7b20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b24:	4b04      	ldr	r3, [pc, #16]	; (b7b38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b28:	2301      	movs	r3, #1
  _serial = serial;
   b7b2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b2e:	4611      	mov	r1, r2
   b7b30:	f7ff f820 	bl	b6b74 <HAL_USB_USART_Init>
}
   b7b34:	4620      	mov	r0, r4
   b7b36:	bd10      	pop	{r4, pc}
   b7b38:	000b9ab4 	.word	0x000b9ab4

000b7b3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7b3c:	7c00      	ldrb	r0, [r0, #16]
   b7b3e:	2200      	movs	r2, #0
   b7b40:	f7ff b820 	b.w	b6b84 <HAL_USB_USART_Begin>

000b7b44 <_Z19acquireSerialBufferv>:
{
   b7b44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7b46:	2214      	movs	r2, #20
{
   b7b48:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7b4a:	2100      	movs	r1, #0
   b7b4c:	f001 fbd6 	bl	b92fc <memset>
}
   b7b50:	4620      	mov	r0, r4
   b7b52:	bd10      	pop	{r4, pc}

000b7b54 <_Z16_fetch_usbserialv>:
{
   b7b54:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b56:	4c0f      	ldr	r4, [pc, #60]	; (b7b94 <_Z16_fetch_usbserialv+0x40>)
{
   b7b58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7b5a:	a803      	add	r0, sp, #12
   b7b5c:	f7ff fff2 	bl	b7b44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b60:	7821      	ldrb	r1, [r4, #0]
   b7b62:	f3bf 8f5b 	dmb	ish
   b7b66:	f011 0101 	ands.w	r1, r1, #1
   b7b6a:	d10f      	bne.n	b7b8c <_Z16_fetch_usbserialv+0x38>
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	9101      	str	r1, [sp, #4]
   b7b70:	f7fd fa4b 	bl	b500a <__cxa_guard_acquire>
   b7b74:	9901      	ldr	r1, [sp, #4]
   b7b76:	b148      	cbz	r0, b7b8c <_Z16_fetch_usbserialv+0x38>
   b7b78:	aa03      	add	r2, sp, #12
   b7b7a:	4807      	ldr	r0, [pc, #28]	; (b7b98 <_Z16_fetch_usbserialv+0x44>)
   b7b7c:	f7ff ffca 	bl	b7b14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7fd fa47 	bl	b5014 <__cxa_guard_release>
   b7b86:	4805      	ldr	r0, [pc, #20]	; (b7b9c <_Z16_fetch_usbserialv+0x48>)
   b7b88:	f001 fba4 	bl	b92d4 <atexit>
	return _usbserial;
}
   b7b8c:	4802      	ldr	r0, [pc, #8]	; (b7b98 <_Z16_fetch_usbserialv+0x44>)
   b7b8e:	b008      	add	sp, #32
   b7b90:	bd10      	pop	{r4, pc}
   b7b92:	bf00      	nop
   b7b94:	2003e70c 	.word	0x2003e70c
   b7b98:	2003e710 	.word	0x2003e710
   b7b9c:	000b7a9d 	.word	0x000b7a9d

000b7ba0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7ba0:	4770      	bx	lr

000b7ba2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7ba2:	7441      	strb	r1, [r0, #17]
}
   b7ba4:	4770      	bx	lr

000b7ba6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7ba6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7ba8:	7c00      	ldrb	r0, [r0, #16]
   b7baa:	f7fe ff3b 	bl	b6a24 <hal_usart_available_data_for_write>
}
   b7bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bb2:	bd08      	pop	{r3, pc}

000b7bb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7bb4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7bb6:	7c00      	ldrb	r0, [r0, #16]
   b7bb8:	f7fe ff0c 	bl	b69d4 <hal_usart_available>
}
   b7bbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bc0:	bd08      	pop	{r3, pc}

000b7bc2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7bc2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7bc4:	7c00      	ldrb	r0, [r0, #16]
   b7bc6:	f7fe ff15 	bl	b69f4 <hal_usart_peek>
}
   b7bca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7bce:	bd08      	pop	{r3, pc}

000b7bd0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7bd0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7bd2:	7c00      	ldrb	r0, [r0, #16]
   b7bd4:	f7fe ff06 	bl	b69e4 <hal_usart_read>
}
   b7bd8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7bdc:	bd08      	pop	{r3, pc}

000b7bde <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7bde:	7c00      	ldrb	r0, [r0, #16]
   b7be0:	f7fe bf10 	b.w	b6a04 <hal_usart_flush>

000b7be4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7be6:	7c45      	ldrb	r5, [r0, #17]
{
   b7be8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7bea:	b12d      	cbz	r5, b7bf8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7bec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7bee:	b003      	add	sp, #12
   b7bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7bf4:	f7fe bee6 	b.w	b69c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7bf8:	7c00      	ldrb	r0, [r0, #16]
   b7bfa:	9101      	str	r1, [sp, #4]
   b7bfc:	f7fe ff12 	bl	b6a24 <hal_usart_available_data_for_write>
   b7c00:	2800      	cmp	r0, #0
   b7c02:	9901      	ldr	r1, [sp, #4]
   b7c04:	dcf2      	bgt.n	b7bec <_ZN11USARTSerial5writeEh+0x8>
}
   b7c06:	4628      	mov	r0, r5
   b7c08:	b003      	add	sp, #12
   b7c0a:	bd30      	pop	{r4, r5, pc}

000b7c0c <_ZN11USARTSerialD0Ev>:
   b7c0c:	b510      	push	{r4, lr}
   b7c0e:	2114      	movs	r1, #20
   b7c10:	4604      	mov	r4, r0
   b7c12:	f7fd f9f8 	bl	b5006 <_ZdlPvj>
   b7c16:	4620      	mov	r0, r4
   b7c18:	bd10      	pop	{r4, pc}
	...

000b7c1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7c1c:	b510      	push	{r4, lr}
   b7c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c22:	4604      	mov	r4, r0
   b7c24:	4608      	mov	r0, r1
   b7c26:	4611      	mov	r1, r2
   b7c28:	2200      	movs	r2, #0
   b7c2a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c2e:	4b04      	ldr	r3, [pc, #16]	; (b7c40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7c30:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c32:	2301      	movs	r3, #1
  _serial = serial;
   b7c34:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c36:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7c38:	f7fe fefc 	bl	b6a34 <hal_usart_init_ex>
}
   b7c3c:	4620      	mov	r0, r4
   b7c3e:	bd10      	pop	{r4, pc}
   b7c40:	000b9ae8 	.word	0x000b9ae8

000b7c44 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7c44:	b510      	push	{r4, lr}
      if (_M_empty())
   b7c46:	6883      	ldr	r3, [r0, #8]
   b7c48:	4604      	mov	r4, r0
   b7c4a:	b90b      	cbnz	r3, b7c50 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7c4c:	f000 fab8 	bl	b81c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7c50:	68c3      	ldr	r3, [r0, #12]
   b7c52:	4798      	blx	r3
      if (_M_manager)
   b7c54:	68a3      	ldr	r3, [r4, #8]
   b7c56:	b11b      	cbz	r3, b7c60 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7c58:	2203      	movs	r2, #3
   b7c5a:	4621      	mov	r1, r4
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7c60:	4620      	mov	r0, r4
   b7c62:	2110      	movs	r1, #16
}
   b7c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7c68:	f7fd b9cd 	b.w	b5006 <_ZdlPvj>

000b7c6c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7c6c:	4770      	bx	lr

000b7c6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c70:	4606      	mov	r6, r0
   b7c72:	4615      	mov	r5, r2
   b7c74:	460c      	mov	r4, r1
   b7c76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7c78:	42bc      	cmp	r4, r7
   b7c7a:	d006      	beq.n	b7c8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7c7c:	6833      	ldr	r3, [r6, #0]
   b7c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7c82:	689b      	ldr	r3, [r3, #8]
   b7c84:	4630      	mov	r0, r6
   b7c86:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7c88:	e7f6      	b.n	b7c78 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7c8a:	4628      	mov	r0, r5
   b7c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c8e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7c8e:	7c00      	ldrb	r0, [r0, #16]
   b7c90:	2200      	movs	r2, #0
   b7c92:	f7fe beef 	b.w	b6a74 <hal_i2c_write>

000b7c96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7c96:	7c00      	ldrb	r0, [r0, #16]
   b7c98:	2100      	movs	r1, #0
   b7c9a:	f7fe bef3 	b.w	b6a84 <hal_i2c_available>

000b7c9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7c9e:	7c00      	ldrb	r0, [r0, #16]
   b7ca0:	2100      	movs	r1, #0
   b7ca2:	f7fe bef7 	b.w	b6a94 <hal_i2c_read>

000b7ca6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7ca6:	7c00      	ldrb	r0, [r0, #16]
   b7ca8:	2100      	movs	r1, #0
   b7caa:	f7fe befb 	b.w	b6aa4 <hal_i2c_peek>

000b7cae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7cae:	7c00      	ldrb	r0, [r0, #16]
   b7cb0:	2100      	movs	r1, #0
   b7cb2:	f7fe beff 	b.w	b6ab4 <hal_i2c_flush>

000b7cb6 <_ZN7TwoWireD0Ev>:
   b7cb6:	b510      	push	{r4, lr}
   b7cb8:	2114      	movs	r1, #20
   b7cba:	4604      	mov	r4, r0
   b7cbc:	f7fd f9a3 	bl	b5006 <_ZdlPvj>
   b7cc0:	4620      	mov	r0, r4
   b7cc2:	bd10      	pop	{r4, pc}

000b7cc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7cc4:	b538      	push	{r3, r4, r5, lr}
   b7cc6:	4604      	mov	r4, r0
   b7cc8:	4615      	mov	r5, r2
   b7cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7cce:	2200      	movs	r2, #0
   b7cd0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7cd4:	4b09      	ldr	r3, [pc, #36]	; (b7cfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7cd6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7cd8:	4608      	mov	r0, r1
   b7cda:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7cdc:	4629      	mov	r1, r5
   b7cde:	f7fe fef9 	bl	b6ad4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7ce2:	30bf      	adds	r0, #191	; 0xbf
   b7ce4:	d108      	bne.n	b7cf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7ce6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7ce8:	07db      	lsls	r3, r3, #31
   b7cea:	d505      	bpl.n	b7cf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7cec:	6868      	ldr	r0, [r5, #4]
   b7cee:	f7ff f845 	bl	b6d7c <free>
    free(conf.tx_buffer);
   b7cf2:	68e8      	ldr	r0, [r5, #12]
   b7cf4:	f7ff f842 	bl	b6d7c <free>
}
   b7cf8:	4620      	mov	r0, r4
   b7cfa:	bd38      	pop	{r3, r4, r5, pc}
   b7cfc:	000b9b1c 	.word	0x000b9b1c

000b7d00 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7d00:	2300      	movs	r3, #0
   b7d02:	7c00      	ldrb	r0, [r0, #16]
   b7d04:	461a      	mov	r2, r3
   b7d06:	4619      	mov	r1, r3
   b7d08:	f7fe be9c 	b.w	b6a44 <hal_i2c_begin>

000b7d0c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7d0e:	2200      	movs	r2, #0
   b7d10:	2314      	movs	r3, #20
   b7d12:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7d16:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7d1a:	780b      	ldrb	r3, [r1, #0]
   b7d1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7d20:	684b      	ldr	r3, [r1, #4]
   b7d22:	9303      	str	r3, [sp, #12]
   b7d24:	68cb      	ldr	r3, [r1, #12]
   b7d26:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7d28:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7d2a:	7a0b      	ldrb	r3, [r1, #8]
   b7d2c:	9305      	str	r3, [sp, #20]
   b7d2e:	a901      	add	r1, sp, #4
   b7d30:	f7fe fed8 	bl	b6ae4 <hal_i2c_request_ex>
}
   b7d34:	b007      	add	sp, #28
   b7d36:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d3a <_ZN7TwoWire11requestFromEhjh>:
{
   b7d3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7d3c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7d3e:	f88d 1000 	strb.w	r1, [sp]
   b7d42:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7d46:	9103      	str	r1, [sp, #12]
   b7d48:	bf18      	it	ne
   b7d4a:	2301      	movne	r3, #1
   b7d4c:	4669      	mov	r1, sp
    size_ = size;
   b7d4e:	9201      	str	r2, [sp, #4]
   b7d50:	f88d 3008 	strb.w	r3, [sp, #8]
   b7d54:	f7ff ffda 	bl	b7d0c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7d58:	b005      	add	sp, #20
   b7d5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b7d5e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7d5e:	2301      	movs	r3, #1
   b7d60:	f7ff bfeb 	b.w	b7d3a <_ZN7TwoWire11requestFromEhjh>

000b7d64 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7d64:	7c00      	ldrb	r0, [r0, #16]
   b7d66:	2200      	movs	r2, #0
   b7d68:	f7fe be74 	b.w	b6a54 <hal_i2c_begin_transmission>

000b7d6c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7d6c:	b2c9      	uxtb	r1, r1
   b7d6e:	f7ff bff9 	b.w	b7d64 <_ZN7TwoWire17beginTransmissionEh>

000b7d72 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7d72:	7c00      	ldrb	r0, [r0, #16]
   b7d74:	2200      	movs	r2, #0
   b7d76:	f7fe be75 	b.w	b6a64 <hal_i2c_end_transmission>

000b7d7a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7d7a:	2101      	movs	r1, #1
   b7d7c:	f7ff bff9 	b.w	b7d72 <_ZN7TwoWire15endTransmissionEh>

000b7d80 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7d80:	2200      	movs	r2, #0
   b7d82:	6840      	ldr	r0, [r0, #4]
   b7d84:	4611      	mov	r1, r2
   b7d86:	f7fe bf81 	b.w	b6c8c <network_ready>

000b7d8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d8a:	2200      	movs	r2, #0
   b7d8c:	6840      	ldr	r0, [r0, #4]
   b7d8e:	4611      	mov	r1, r2
   b7d90:	f7fe bf9c 	b.w	b6ccc <network_listening>

000b7d94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7d94:	2200      	movs	r2, #0
   b7d96:	6840      	ldr	r0, [r0, #4]
   b7d98:	4611      	mov	r1, r2
   b7d9a:	f7fe bfa7 	b.w	b6cec <network_get_listen_timeout>

000b7d9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7d9e:	6840      	ldr	r0, [r0, #4]
   b7da0:	2200      	movs	r2, #0
   b7da2:	f7fe bf9b 	b.w	b6cdc <network_set_listen_timeout>

000b7da6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7da6:	6840      	ldr	r0, [r0, #4]
   b7da8:	2200      	movs	r2, #0
   b7daa:	f081 0101 	eor.w	r1, r1, #1
   b7dae:	f7fe bf85 	b.w	b6cbc <network_listen>

000b7db2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7db2:	2300      	movs	r3, #0
   b7db4:	6840      	ldr	r0, [r0, #4]
   b7db6:	461a      	mov	r2, r3
   b7db8:	4619      	mov	r1, r3
   b7dba:	f7fe bf77 	b.w	b6cac <network_off>

000b7dbe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	6840      	ldr	r0, [r0, #4]
   b7dc2:	461a      	mov	r2, r3
   b7dc4:	4619      	mov	r1, r3
   b7dc6:	f7fe bf69 	b.w	b6c9c <network_on>

000b7dca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7dca:	2200      	movs	r2, #0
   b7dcc:	6840      	ldr	r0, [r0, #4]
   b7dce:	4611      	mov	r1, r2
   b7dd0:	f7fe bf4c 	b.w	b6c6c <network_connecting>

000b7dd4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7dd4:	6840      	ldr	r0, [r0, #4]
   b7dd6:	2200      	movs	r2, #0
   b7dd8:	2102      	movs	r1, #2
   b7dda:	f7fe bf4f 	b.w	b6c7c <network_disconnect>

000b7dde <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7dde:	2300      	movs	r3, #0
   b7de0:	6840      	ldr	r0, [r0, #4]
   b7de2:	461a      	mov	r2, r3
   b7de4:	f7fe bf3a 	b.w	b6c5c <network_connect>

000b7de8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7de8:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7dea:	2204      	movs	r2, #4
   b7dec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7dee:	4a02      	ldr	r2, [pc, #8]	; (b7df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7df0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7df2:	4770      	bx	lr
   b7df4:	2003e724 	.word	0x2003e724
   b7df8:	000b9b48 	.word	0x000b9b48

000b7dfc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7dfc:	2300      	movs	r3, #0
   b7dfe:	6840      	ldr	r0, [r0, #4]
   b7e00:	461a      	mov	r2, r3
   b7e02:	f7fe bf2b 	b.w	b6c5c <network_connect>

000b7e06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7e06:	6840      	ldr	r0, [r0, #4]
   b7e08:	2200      	movs	r2, #0
   b7e0a:	2102      	movs	r1, #2
   b7e0c:	f7fe bf36 	b.w	b6c7c <network_disconnect>

000b7e10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7e10:	2200      	movs	r2, #0
   b7e12:	6840      	ldr	r0, [r0, #4]
   b7e14:	4611      	mov	r1, r2
   b7e16:	f7fe bf29 	b.w	b6c6c <network_connecting>

000b7e1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7e1a:	2200      	movs	r2, #0
   b7e1c:	6840      	ldr	r0, [r0, #4]
   b7e1e:	4611      	mov	r1, r2
   b7e20:	f7fe bf34 	b.w	b6c8c <network_ready>

000b7e24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7e24:	2300      	movs	r3, #0
   b7e26:	6840      	ldr	r0, [r0, #4]
   b7e28:	461a      	mov	r2, r3
   b7e2a:	4619      	mov	r1, r3
   b7e2c:	f7fe bf36 	b.w	b6c9c <network_on>

000b7e30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7e30:	2300      	movs	r3, #0
   b7e32:	6840      	ldr	r0, [r0, #4]
   b7e34:	461a      	mov	r2, r3
   b7e36:	4619      	mov	r1, r3
   b7e38:	f7fe bf38 	b.w	b6cac <network_off>

000b7e3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7e3c:	6840      	ldr	r0, [r0, #4]
   b7e3e:	2100      	movs	r1, #0
   b7e40:	f7fe bf5c 	b.w	b6cfc <network_is_on>

000b7e44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7e44:	6840      	ldr	r0, [r0, #4]
   b7e46:	2100      	movs	r1, #0
   b7e48:	f7fe bf60 	b.w	b6d0c <network_is_off>

000b7e4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7e4c:	6840      	ldr	r0, [r0, #4]
   b7e4e:	2200      	movs	r2, #0
   b7e50:	f081 0101 	eor.w	r1, r1, #1
   b7e54:	f7fe bf32 	b.w	b6cbc <network_listen>

000b7e58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7e58:	6840      	ldr	r0, [r0, #4]
   b7e5a:	2200      	movs	r2, #0
   b7e5c:	f7fe bf3e 	b.w	b6cdc <network_set_listen_timeout>

000b7e60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7e60:	2200      	movs	r2, #0
   b7e62:	6840      	ldr	r0, [r0, #4]
   b7e64:	4611      	mov	r1, r2
   b7e66:	f7fe bf41 	b.w	b6cec <network_get_listen_timeout>

000b7e6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7e6a:	2200      	movs	r2, #0
   b7e6c:	6840      	ldr	r0, [r0, #4]
   b7e6e:	4611      	mov	r1, r2
   b7e70:	f7fe bf2c 	b.w	b6ccc <network_listening>

000b7e74 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b7e74:	6840      	ldr	r0, [r0, #4]
   b7e76:	2100      	movs	r1, #0
   b7e78:	f7fe bf58 	b.w	b6d2c <network_is_preferred>

000b7e7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e80:	b095      	sub	sp, #84	; 0x54
   b7e82:	4614      	mov	r4, r2
   b7e84:	460d      	mov	r5, r1
   b7e86:	4607      	mov	r7, r0
    IPAddress addr;
   b7e88:	f7ff fdc8 	bl	b7a1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7e8c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7e8e:	221c      	movs	r2, #28
   b7e90:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7e92:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7e94:	f001 fa32 	bl	b92fc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7e98:	2340      	movs	r3, #64	; 0x40
   b7e9a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7e9c:	4620      	mov	r0, r4
   b7e9e:	466b      	mov	r3, sp
   b7ea0:	aa0c      	add	r2, sp, #48	; 0x30
   b7ea2:	2100      	movs	r1, #0
   b7ea4:	f7fe fd2e 	bl	b6904 <netdb_getaddrinfo>
    if (!r) {
   b7ea8:	4604      	mov	r4, r0
   b7eaa:	2800      	cmp	r0, #0
   b7eac:	d14b      	bne.n	b7f46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7eae:	4602      	mov	r2, r0
   b7eb0:	2101      	movs	r1, #1
   b7eb2:	6868      	ldr	r0, [r5, #4]
   b7eb4:	f7fe feea 	bl	b6c8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7eb8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7eba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7ebc:	4622      	mov	r2, r4
   b7ebe:	6868      	ldr	r0, [r5, #4]
   b7ec0:	f7fe fee4 	bl	b6c8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7ec4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7ec6:	4681      	mov	r9, r0
        bool ok = false;
   b7ec8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7eca:	2e00      	cmp	r6, #0
   b7ecc:	d03b      	beq.n	b7f46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7ece:	2900      	cmp	r1, #0
   b7ed0:	d139      	bne.n	b7f46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7ed2:	6873      	ldr	r3, [r6, #4]
   b7ed4:	2b02      	cmp	r3, #2
   b7ed6:	d003      	beq.n	b7ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7ed8:	2b0a      	cmp	r3, #10
   b7eda:	d011      	beq.n	b7f00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7edc:	69f6      	ldr	r6, [r6, #28]
   b7ede:	e7f4      	b.n	b7eca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7ee0:	f1b8 0f00 	cmp.w	r8, #0
   b7ee4:	d0fa      	beq.n	b7edc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7ee6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7ee8:	a806      	add	r0, sp, #24
   b7eea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7eec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7eee:	f7ff fdc3 	bl	b7a78 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7ef4:	1d3c      	adds	r4, r7, #4
   b7ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ef8:	682b      	ldr	r3, [r5, #0]
   b7efa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7efc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7efe:	e7ed      	b.n	b7edc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7f00:	f1b9 0f00 	cmp.w	r9, #0
   b7f04:	d0ea      	beq.n	b7edc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7f06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7f08:	2210      	movs	r2, #16
   b7f0a:	a801      	add	r0, sp, #4
   b7f0c:	f001 f9f6 	bl	b92fc <memset>
                    a.v = 6;
   b7f10:	2306      	movs	r3, #6
   b7f12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7f16:	ad01      	add	r5, sp, #4
   b7f18:	f104 0308 	add.w	r3, r4, #8
   b7f1c:	3418      	adds	r4, #24
   b7f1e:	6818      	ldr	r0, [r3, #0]
   b7f20:	6859      	ldr	r1, [r3, #4]
   b7f22:	462a      	mov	r2, r5
   b7f24:	c203      	stmia	r2!, {r0, r1}
   b7f26:	3308      	adds	r3, #8
   b7f28:	42a3      	cmp	r3, r4
   b7f2a:	4615      	mov	r5, r2
   b7f2c:	d1f7      	bne.n	b7f1e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7f2e:	a901      	add	r1, sp, #4
   b7f30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7f32:	ad07      	add	r5, sp, #28
   b7f34:	f7ff fd80 	bl	b7a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f3a:	1d3c      	adds	r4, r7, #4
   b7f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f3e:	682b      	ldr	r3, [r5, #0]
   b7f40:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7f42:	4649      	mov	r1, r9
   b7f44:	e7ca      	b.n	b7edc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7f46:	9800      	ldr	r0, [sp, #0]
   b7f48:	f7fe fcd4 	bl	b68f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7f4c:	4638      	mov	r0, r7
   b7f4e:	b015      	add	sp, #84	; 0x54
   b7f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7f54 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b7f54:	3803      	subs	r0, #3
   b7f56:	2802      	cmp	r0, #2
   b7f58:	bf9a      	itte	ls
   b7f5a:	4b02      	ldrls	r3, [pc, #8]	; (b7f64 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b7f5c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b7f60:	4801      	ldrhi	r0, [pc, #4]	; (b7f68 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b7f62:	4770      	bx	lr
   b7f64:	000b9b84 	.word	0x000b9b84
   b7f68:	2003e72c 	.word	0x2003e72c

000b7f6c <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b7f6c:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b7f6e:	2200      	movs	r2, #0
   b7f70:	6840      	ldr	r0, [r0, #4]
   b7f72:	f7fe fed3 	bl	b6d1c <network_prefer>
}
   b7f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b7f7a:	f7ff bfeb 	b.w	b7f54 <_ZN5spark12NetworkClass4fromEm>
	...

000b7f80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7f80:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7f82:	4a03      	ldr	r2, [pc, #12]	; (b7f90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7f84:	601a      	str	r2, [r3, #0]
   b7f86:	2200      	movs	r2, #0
   b7f88:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7f8a:	4770      	bx	lr
   b7f8c:	2003e72c 	.word	0x2003e72c
   b7f90:	000b9b98 	.word	0x000b9b98

000b7f94 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7f94:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7f96:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7f98:	d902      	bls.n	b7fa0 <pinAvailable+0xc>
    return false;
   b7f9a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7f9c:	b002      	add	sp, #8
   b7f9e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7fa0:	f1a0 030b 	sub.w	r3, r0, #11
   b7fa4:	2b02      	cmp	r3, #2
   b7fa6:	d81a      	bhi.n	b7fde <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7fa8:	4c17      	ldr	r4, [pc, #92]	; (b8008 <pinAvailable+0x74>)
   b7faa:	7821      	ldrb	r1, [r4, #0]
   b7fac:	f3bf 8f5b 	dmb	ish
   b7fb0:	f011 0101 	ands.w	r1, r1, #1
   b7fb4:	d10b      	bne.n	b7fce <pinAvailable+0x3a>
   b7fb6:	4620      	mov	r0, r4
   b7fb8:	9101      	str	r1, [sp, #4]
   b7fba:	f7fd f826 	bl	b500a <__cxa_guard_acquire>
   b7fbe:	9901      	ldr	r1, [sp, #4]
   b7fc0:	b128      	cbz	r0, b7fce <pinAvailable+0x3a>
   b7fc2:	4812      	ldr	r0, [pc, #72]	; (b800c <pinAvailable+0x78>)
   b7fc4:	f7fe ff74 	bl	b6eb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7fc8:	4620      	mov	r0, r4
   b7fca:	f7fd f823 	bl	b5014 <__cxa_guard_release>
   b7fce:	4b0f      	ldr	r3, [pc, #60]	; (b800c <pinAvailable+0x78>)
   b7fd0:	7818      	ldrb	r0, [r3, #0]
   b7fd2:	f7fe fda7 	bl	b6b24 <hal_spi_is_enabled>
   b7fd6:	2800      	cmp	r0, #0
   b7fd8:	d1df      	bne.n	b7f9a <pinAvailable+0x6>
  return true; // 'pin' is available
   b7fda:	2001      	movs	r0, #1
   b7fdc:	e7de      	b.n	b7f9c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7fde:	2801      	cmp	r0, #1
   b7fe0:	d809      	bhi.n	b7ff6 <pinAvailable+0x62>
   b7fe2:	f000 f8c7 	bl	b8174 <_Z19__fetch_global_Wirev>
   b7fe6:	2100      	movs	r1, #0
   b7fe8:	7c00      	ldrb	r0, [r0, #16]
   b7fea:	f7fe fd6b 	bl	b6ac4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7fee:	f080 0001 	eor.w	r0, r0, #1
   b7ff2:	b2c0      	uxtb	r0, r0
   b7ff4:	e7d2      	b.n	b7f9c <pinAvailable+0x8>
   b7ff6:	3809      	subs	r0, #9
   b7ff8:	2801      	cmp	r0, #1
   b7ffa:	d8ee      	bhi.n	b7fda <pinAvailable+0x46>
   b7ffc:	f000 f87a 	bl	b80f4 <_Z22__fetch_global_Serial1v>
   b8000:	7c00      	ldrb	r0, [r0, #16]
   b8002:	f7fe fd07 	bl	b6a14 <hal_usart_is_enabled>
   b8006:	e7f2      	b.n	b7fee <pinAvailable+0x5a>
   b8008:	2003e6c0 	.word	0x2003e6c0
   b800c:	2003e6c4 	.word	0x2003e6c4

000b8010 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8010:	2823      	cmp	r0, #35	; 0x23
{
   b8012:	b538      	push	{r3, r4, r5, lr}
   b8014:	4604      	mov	r4, r0
   b8016:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8018:	d80a      	bhi.n	b8030 <pinMode+0x20>
   b801a:	29ff      	cmp	r1, #255	; 0xff
   b801c:	d008      	beq.n	b8030 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b801e:	f7ff ffb9 	bl	b7f94 <pinAvailable>
   b8022:	b128      	cbz	r0, b8030 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8024:	4629      	mov	r1, r5
   b8026:	4620      	mov	r0, r4
}
   b8028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b802c:	f7fe bc7a 	b.w	b6924 <hal_gpio_mode>
}
   b8030:	bd38      	pop	{r3, r4, r5, pc}

000b8032 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b8032:	b538      	push	{r3, r4, r5, lr}
   b8034:	4604      	mov	r4, r0
   b8036:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8038:	f7fe fc7c 	bl	b6934 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b803c:	28ff      	cmp	r0, #255	; 0xff
   b803e:	d010      	beq.n	b8062 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8040:	2806      	cmp	r0, #6
   b8042:	d804      	bhi.n	b804e <digitalWrite+0x1c>
   b8044:	234d      	movs	r3, #77	; 0x4d
   b8046:	fa23 f000 	lsr.w	r0, r3, r0
   b804a:	07c3      	lsls	r3, r0, #31
   b804c:	d409      	bmi.n	b8062 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b804e:	4620      	mov	r0, r4
   b8050:	f7ff ffa0 	bl	b7f94 <pinAvailable>
   b8054:	b128      	cbz	r0, b8062 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8056:	4629      	mov	r1, r5
   b8058:	4620      	mov	r0, r4
}
   b805a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b805e:	f7fe bc71 	b.w	b6944 <hal_gpio_write>
}
   b8062:	bd38      	pop	{r3, r4, r5, pc}

000b8064 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8064:	b510      	push	{r4, lr}
   b8066:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8068:	f7fe fc64 	bl	b6934 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b806c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b806e:	b2db      	uxtb	r3, r3
   b8070:	2b01      	cmp	r3, #1
   b8072:	d908      	bls.n	b8086 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8074:	4620      	mov	r0, r4
   b8076:	f7ff ff8d 	bl	b7f94 <pinAvailable>
   b807a:	b120      	cbz	r0, b8086 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b807c:	4620      	mov	r0, r4
}
   b807e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b8082:	f7fe bc67 	b.w	b6954 <hal_gpio_read>
}
   b8086:	2000      	movs	r0, #0
   b8088:	bd10      	pop	{r4, pc}

000b808a <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b808a:	280d      	cmp	r0, #13
{
   b808c:	b510      	push	{r4, lr}
   b808e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8090:	bf9c      	itt	ls
   b8092:	340e      	addls	r4, #14
   b8094:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b8096:	4620      	mov	r0, r4
   b8098:	f7ff ff7c 	bl	b7f94 <pinAvailable>
   b809c:	b150      	cbz	r0, b80b4 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b809e:	2103      	movs	r1, #3
   b80a0:	4620      	mov	r0, r4
   b80a2:	f7fe fc37 	bl	b6914 <hal_pin_validate_function>
   b80a6:	2803      	cmp	r0, #3
   b80a8:	d104      	bne.n	b80b4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b80aa:	4620      	mov	r0, r4
}
   b80ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b80b0:	f7fe bc58 	b.w	b6964 <hal_adc_read>
}
   b80b4:	2000      	movs	r0, #0
   b80b6:	bd10      	pop	{r4, pc}

000b80b8 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   b80b8:	f7fe bc5c 	b.w	b6974 <hal_gpio_pulse_in>

000b80bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80bc:	4770      	bx	lr
	...

000b80c0 <_Z20acquireSerial1Bufferv>:
{
   b80c0:	b538      	push	{r3, r4, r5, lr}
   b80c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b80c4:	2514      	movs	r5, #20
   b80c6:	462a      	mov	r2, r5
   b80c8:	2100      	movs	r1, #0
   b80ca:	f001 f917 	bl	b92fc <memset>
   b80ce:	8025      	strh	r5, [r4, #0]
   b80d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80d2:	4907      	ldr	r1, [pc, #28]	; (b80f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b80d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b80d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80da:	f000 f86f 	bl	b81bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80de:	4904      	ldr	r1, [pc, #16]	; (b80f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b80e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80e2:	4628      	mov	r0, r5
   b80e4:	f000 f86a 	bl	b81bc <_ZnajRKSt9nothrow_t>
    };
   b80e8:	60e0      	str	r0, [r4, #12]
}
   b80ea:	4620      	mov	r0, r4
   b80ec:	bd38      	pop	{r3, r4, r5, pc}
   b80ee:	bf00      	nop
   b80f0:	000b9bd4 	.word	0x000b9bd4

000b80f4 <_Z22__fetch_global_Serial1v>:
{
   b80f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80f6:	4d0e      	ldr	r5, [pc, #56]	; (b8130 <_Z22__fetch_global_Serial1v+0x3c>)
   b80f8:	7829      	ldrb	r1, [r5, #0]
   b80fa:	f3bf 8f5b 	dmb	ish
   b80fe:	f011 0401 	ands.w	r4, r1, #1
{
   b8102:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8104:	d111      	bne.n	b812a <_Z22__fetch_global_Serial1v+0x36>
   b8106:	4628      	mov	r0, r5
   b8108:	f7fc ff7f 	bl	b500a <__cxa_guard_acquire>
   b810c:	b168      	cbz	r0, b812a <_Z22__fetch_global_Serial1v+0x36>
   b810e:	a801      	add	r0, sp, #4
   b8110:	f7ff ffd6 	bl	b80c0 <_Z20acquireSerial1Bufferv>
   b8114:	aa01      	add	r2, sp, #4
   b8116:	4621      	mov	r1, r4
   b8118:	4806      	ldr	r0, [pc, #24]	; (b8134 <_Z22__fetch_global_Serial1v+0x40>)
   b811a:	f7ff fd7f 	bl	b7c1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b811e:	4628      	mov	r0, r5
   b8120:	f7fc ff78 	bl	b5014 <__cxa_guard_release>
   b8124:	4804      	ldr	r0, [pc, #16]	; (b8138 <_Z22__fetch_global_Serial1v+0x44>)
   b8126:	f001 f8d5 	bl	b92d4 <atexit>
    return serial1;
}
   b812a:	4802      	ldr	r0, [pc, #8]	; (b8134 <_Z22__fetch_global_Serial1v+0x40>)
   b812c:	b007      	add	sp, #28
   b812e:	bd30      	pop	{r4, r5, pc}
   b8130:	2003e734 	.word	0x2003e734
   b8134:	2003e738 	.word	0x2003e738
   b8138:	000b80bd 	.word	0x000b80bd

000b813c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b813c:	4770      	bx	lr
	...

000b8140 <_Z17acquireWireBufferv>:
{
   b8140:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8142:	4b0a      	ldr	r3, [pc, #40]	; (b816c <_Z17acquireWireBufferv+0x2c>)
   b8144:	6003      	str	r3, [r0, #0]
   b8146:	2301      	movs	r3, #1
{
   b8148:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b814a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b814c:	4908      	ldr	r1, [pc, #32]	; (b8170 <_Z17acquireWireBufferv+0x30>)
   b814e:	2020      	movs	r0, #32
   b8150:	f000 f834 	bl	b81bc <_ZnajRKSt9nothrow_t>
	};
   b8154:	2520      	movs	r5, #32
   b8156:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8158:	4905      	ldr	r1, [pc, #20]	; (b8170 <_Z17acquireWireBufferv+0x30>)
	};
   b815a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b815c:	4628      	mov	r0, r5
   b815e:	f000 f82d 	bl	b81bc <_ZnajRKSt9nothrow_t>
	};
   b8162:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8166:	4620      	mov	r0, r4
   b8168:	bd38      	pop	{r3, r4, r5, pc}
   b816a:	bf00      	nop
   b816c:	00010018 	.word	0x00010018
   b8170:	000b9bd4 	.word	0x000b9bd4

000b8174 <_Z19__fetch_global_Wirev>:
{
   b8174:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8176:	4d0e      	ldr	r5, [pc, #56]	; (b81b0 <_Z19__fetch_global_Wirev+0x3c>)
   b8178:	7829      	ldrb	r1, [r5, #0]
   b817a:	f3bf 8f5b 	dmb	ish
   b817e:	f011 0401 	ands.w	r4, r1, #1
{
   b8182:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8184:	d111      	bne.n	b81aa <_Z19__fetch_global_Wirev+0x36>
   b8186:	4628      	mov	r0, r5
   b8188:	f7fc ff3f 	bl	b500a <__cxa_guard_acquire>
   b818c:	b168      	cbz	r0, b81aa <_Z19__fetch_global_Wirev+0x36>
   b818e:	4668      	mov	r0, sp
   b8190:	f7ff ffd6 	bl	b8140 <_Z17acquireWireBufferv>
   b8194:	466a      	mov	r2, sp
   b8196:	4621      	mov	r1, r4
   b8198:	4806      	ldr	r0, [pc, #24]	; (b81b4 <_Z19__fetch_global_Wirev+0x40>)
   b819a:	f7ff fd93 	bl	b7cc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b819e:	4628      	mov	r0, r5
   b81a0:	f7fc ff38 	bl	b5014 <__cxa_guard_release>
   b81a4:	4804      	ldr	r0, [pc, #16]	; (b81b8 <_Z19__fetch_global_Wirev+0x44>)
   b81a6:	f001 f895 	bl	b92d4 <atexit>
	return wire;
}
   b81aa:	4802      	ldr	r0, [pc, #8]	; (b81b4 <_Z19__fetch_global_Wirev+0x40>)
   b81ac:	b007      	add	sp, #28
   b81ae:	bd30      	pop	{r4, r5, pc}
   b81b0:	2003e750 	.word	0x2003e750
   b81b4:	2003e754 	.word	0x2003e754
   b81b8:	000b813d 	.word	0x000b813d

000b81bc <_ZnajRKSt9nothrow_t>:
   b81bc:	f7fc bf21 	b.w	b5002 <_Znaj>

000b81c0 <_ZSt25__throw_bad_function_callv>:
   b81c0:	b508      	push	{r3, lr}
   b81c2:	f7fe fdf3 	bl	b6dac <abort>
	...

000b81c8 <scalbn>:
   b81c8:	b538      	push	{r3, r4, r5, lr}
   b81ca:	ec53 2b10 	vmov	r2, r3, d0
   b81ce:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b81d2:	4604      	mov	r4, r0
   b81d4:	469c      	mov	ip, r3
   b81d6:	bb89      	cbnz	r1, b823c <scalbn+0x74>
   b81d8:	ee10 1a10 	vmov	r1, s0
   b81dc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b81e0:	ea5c 0101 	orrs.w	r1, ip, r1
   b81e4:	d029      	beq.n	b823a <scalbn+0x72>
   b81e6:	4619      	mov	r1, r3
   b81e8:	2200      	movs	r2, #0
   b81ea:	4b3d      	ldr	r3, [pc, #244]	; (b82e0 <scalbn+0x118>)
   b81ec:	4d3d      	ldr	r5, [pc, #244]	; (b82e4 <scalbn+0x11c>)
   b81ee:	ee10 0a10 	vmov	r0, s0
   b81f2:	f7fc f8d1 	bl	b4398 <__aeabi_dmul>
   b81f6:	42ac      	cmp	r4, r5
   b81f8:	4602      	mov	r2, r0
   b81fa:	460b      	mov	r3, r1
   b81fc:	db16      	blt.n	b822c <scalbn+0x64>
   b81fe:	468c      	mov	ip, r1
   b8200:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8204:	3936      	subs	r1, #54	; 0x36
   b8206:	4421      	add	r1, r4
   b8208:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b820c:	4281      	cmp	r1, r0
   b820e:	dc21      	bgt.n	b8254 <scalbn+0x8c>
   b8210:	2900      	cmp	r1, #0
   b8212:	dc47      	bgt.n	b82a4 <scalbn+0xdc>
   b8214:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8218:	da34      	bge.n	b8284 <scalbn+0xbc>
   b821a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b821e:	428c      	cmp	r4, r1
   b8220:	dc18      	bgt.n	b8254 <scalbn+0x8c>
   b8222:	2b00      	cmp	r3, #0
   b8224:	a126      	add	r1, pc, #152	; (adr r1, b82c0 <scalbn+0xf8>)
   b8226:	e9d1 0100 	ldrd	r0, r1, [r1]
   b822a:	db44      	blt.n	b82b6 <scalbn+0xee>
   b822c:	a324      	add	r3, pc, #144	; (adr r3, b82c0 <scalbn+0xf8>)
   b822e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8232:	f7fc f8b1 	bl	b4398 <__aeabi_dmul>
   b8236:	ec41 0b10 	vmov	d0, r0, r1
   b823a:	bd38      	pop	{r3, r4, r5, pc}
   b823c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8240:	4281      	cmp	r1, r0
   b8242:	d1e0      	bne.n	b8206 <scalbn+0x3e>
   b8244:	ee10 0a10 	vmov	r0, s0
   b8248:	4619      	mov	r1, r3
   b824a:	f7fb feef 	bl	b402c <__adddf3>
   b824e:	ec41 0b10 	vmov	d0, r0, r1
   b8252:	bd38      	pop	{r3, r4, r5, pc}
   b8254:	2b00      	cmp	r3, #0
   b8256:	a11c      	add	r1, pc, #112	; (adr r1, b82c8 <scalbn+0x100>)
   b8258:	e9d1 0100 	ldrd	r0, r1, [r1]
   b825c:	db07      	blt.n	b826e <scalbn+0xa6>
   b825e:	a31a      	add	r3, pc, #104	; (adr r3, b82c8 <scalbn+0x100>)
   b8260:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8264:	f7fc f898 	bl	b4398 <__aeabi_dmul>
   b8268:	ec41 0b10 	vmov	d0, r0, r1
   b826c:	bd38      	pop	{r3, r4, r5, pc}
   b826e:	a118      	add	r1, pc, #96	; (adr r1, b82d0 <scalbn+0x108>)
   b8270:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8274:	a314      	add	r3, pc, #80	; (adr r3, b82c8 <scalbn+0x100>)
   b8276:	e9d3 2300 	ldrd	r2, r3, [r3]
   b827a:	f7fc f88d 	bl	b4398 <__aeabi_dmul>
   b827e:	ec41 0b10 	vmov	d0, r0, r1
   b8282:	e7f3      	b.n	b826c <scalbn+0xa4>
   b8284:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8288:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b828c:	3136      	adds	r1, #54	; 0x36
   b828e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8292:	4610      	mov	r0, r2
   b8294:	4619      	mov	r1, r3
   b8296:	2200      	movs	r2, #0
   b8298:	4b13      	ldr	r3, [pc, #76]	; (b82e8 <scalbn+0x120>)
   b829a:	f7fc f87d 	bl	b4398 <__aeabi_dmul>
   b829e:	ec41 0b10 	vmov	d0, r0, r1
   b82a2:	bd38      	pop	{r3, r4, r5, pc}
   b82a4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b82a8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b82ac:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b82b0:	ec43 2b10 	vmov	d0, r2, r3
   b82b4:	bd38      	pop	{r3, r4, r5, pc}
   b82b6:	a108      	add	r1, pc, #32	; (adr r1, b82d8 <scalbn+0x110>)
   b82b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b82bc:	e7b6      	b.n	b822c <scalbn+0x64>
   b82be:	bf00      	nop
   b82c0:	c2f8f359 	.word	0xc2f8f359
   b82c4:	01a56e1f 	.word	0x01a56e1f
   b82c8:	8800759c 	.word	0x8800759c
   b82cc:	7e37e43c 	.word	0x7e37e43c
   b82d0:	8800759c 	.word	0x8800759c
   b82d4:	fe37e43c 	.word	0xfe37e43c
   b82d8:	c2f8f359 	.word	0xc2f8f359
   b82dc:	81a56e1f 	.word	0x81a56e1f
   b82e0:	43500000 	.word	0x43500000
   b82e4:	ffff3cb0 	.word	0xffff3cb0
   b82e8:	3c900000 	.word	0x3c900000
   b82ec:	00000000 	.word	0x00000000

000b82f0 <pow>:
   b82f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82f2:	ed2d 8b02 	vpush	{d8}
   b82f6:	ec57 6b10 	vmov	r6, r7, d0
   b82fa:	ec55 4b11 	vmov	r4, r5, d1
   b82fe:	f000 f8cb 	bl	b8498 <__ieee754_pow>
   b8302:	4b63      	ldr	r3, [pc, #396]	; (b8490 <pow+0x1a0>)
   b8304:	eeb0 8a40 	vmov.f32	s16, s0
   b8308:	eef0 8a60 	vmov.f32	s17, s1
   b830c:	f993 3000 	ldrsb.w	r3, [r3]
   b8310:	3301      	adds	r3, #1
   b8312:	d02a      	beq.n	b836a <pow+0x7a>
   b8314:	4622      	mov	r2, r4
   b8316:	462b      	mov	r3, r5
   b8318:	4620      	mov	r0, r4
   b831a:	4629      	mov	r1, r5
   b831c:	f7fc fad6 	bl	b48cc <__aeabi_dcmpun>
   b8320:	bb18      	cbnz	r0, b836a <pow+0x7a>
   b8322:	4632      	mov	r2, r6
   b8324:	463b      	mov	r3, r7
   b8326:	4630      	mov	r0, r6
   b8328:	4639      	mov	r1, r7
   b832a:	f7fc facf 	bl	b48cc <__aeabi_dcmpun>
   b832e:	2800      	cmp	r0, #0
   b8330:	d144      	bne.n	b83bc <pow+0xcc>
   b8332:	2200      	movs	r2, #0
   b8334:	2300      	movs	r3, #0
   b8336:	4630      	mov	r0, r6
   b8338:	4639      	mov	r1, r7
   b833a:	f7fc fa95 	bl	b4868 <__aeabi_dcmpeq>
   b833e:	b1d8      	cbz	r0, b8378 <pow+0x88>
   b8340:	2200      	movs	r2, #0
   b8342:	2300      	movs	r3, #0
   b8344:	4620      	mov	r0, r4
   b8346:	4629      	mov	r1, r5
   b8348:	f7fc fa8e 	bl	b4868 <__aeabi_dcmpeq>
   b834c:	2800      	cmp	r0, #0
   b834e:	d13d      	bne.n	b83cc <pow+0xdc>
   b8350:	ec45 4b10 	vmov	d0, r4, r5
   b8354:	f000 ff10 	bl	b9178 <finite>
   b8358:	b138      	cbz	r0, b836a <pow+0x7a>
   b835a:	4620      	mov	r0, r4
   b835c:	4629      	mov	r1, r5
   b835e:	2200      	movs	r2, #0
   b8360:	2300      	movs	r3, #0
   b8362:	f7fc fa8b 	bl	b487c <__aeabi_dcmplt>
   b8366:	2800      	cmp	r0, #0
   b8368:	d15c      	bne.n	b8424 <pow+0x134>
   b836a:	eeb0 0a48 	vmov.f32	s0, s16
   b836e:	eef0 0a68 	vmov.f32	s1, s17
   b8372:	ecbd 8b02 	vpop	{d8}
   b8376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8378:	eeb0 0a48 	vmov.f32	s0, s16
   b837c:	eef0 0a68 	vmov.f32	s1, s17
   b8380:	f000 fefa 	bl	b9178 <finite>
   b8384:	b358      	cbz	r0, b83de <pow+0xee>
   b8386:	ec51 0b18 	vmov	r0, r1, d8
   b838a:	2200      	movs	r2, #0
   b838c:	2300      	movs	r3, #0
   b838e:	f7fc fa6b 	bl	b4868 <__aeabi_dcmpeq>
   b8392:	2800      	cmp	r0, #0
   b8394:	d0e9      	beq.n	b836a <pow+0x7a>
   b8396:	ec47 6b10 	vmov	d0, r6, r7
   b839a:	f000 feed 	bl	b9178 <finite>
   b839e:	2800      	cmp	r0, #0
   b83a0:	d0e3      	beq.n	b836a <pow+0x7a>
   b83a2:	ec45 4b10 	vmov	d0, r4, r5
   b83a6:	f000 fee7 	bl	b9178 <finite>
   b83aa:	2800      	cmp	r0, #0
   b83ac:	d0dd      	beq.n	b836a <pow+0x7a>
   b83ae:	f7fe fd0d 	bl	b6dcc <__errno>
   b83b2:	2322      	movs	r3, #34	; 0x22
   b83b4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b8470 <pow+0x180>
   b83b8:	6003      	str	r3, [r0, #0]
   b83ba:	e7d6      	b.n	b836a <pow+0x7a>
   b83bc:	4620      	mov	r0, r4
   b83be:	4629      	mov	r1, r5
   b83c0:	2200      	movs	r2, #0
   b83c2:	2300      	movs	r3, #0
   b83c4:	f7fc fa50 	bl	b4868 <__aeabi_dcmpeq>
   b83c8:	2800      	cmp	r0, #0
   b83ca:	d0ce      	beq.n	b836a <pow+0x7a>
   b83cc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b8478 <pow+0x188>
   b83d0:	eeb0 0a48 	vmov.f32	s0, s16
   b83d4:	eef0 0a68 	vmov.f32	s1, s17
   b83d8:	ecbd 8b02 	vpop	{d8}
   b83dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b83de:	ec47 6b10 	vmov	d0, r6, r7
   b83e2:	f000 fec9 	bl	b9178 <finite>
   b83e6:	2800      	cmp	r0, #0
   b83e8:	d0cd      	beq.n	b8386 <pow+0x96>
   b83ea:	ec45 4b10 	vmov	d0, r4, r5
   b83ee:	f000 fec3 	bl	b9178 <finite>
   b83f2:	2800      	cmp	r0, #0
   b83f4:	d0c7      	beq.n	b8386 <pow+0x96>
   b83f6:	ec53 2b18 	vmov	r2, r3, d8
   b83fa:	ee18 0a10 	vmov	r0, s16
   b83fe:	4619      	mov	r1, r3
   b8400:	f7fc fa64 	bl	b48cc <__aeabi_dcmpun>
   b8404:	bb20      	cbnz	r0, b8450 <pow+0x160>
   b8406:	f7fe fce1 	bl	b6dcc <__errno>
   b840a:	4603      	mov	r3, r0
   b840c:	2222      	movs	r2, #34	; 0x22
   b840e:	601a      	str	r2, [r3, #0]
   b8410:	4630      	mov	r0, r6
   b8412:	4639      	mov	r1, r7
   b8414:	2200      	movs	r2, #0
   b8416:	2300      	movs	r3, #0
   b8418:	f7fc fa30 	bl	b487c <__aeabi_dcmplt>
   b841c:	b948      	cbnz	r0, b8432 <pow+0x142>
   b841e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b8480 <pow+0x190>
   b8422:	e7a2      	b.n	b836a <pow+0x7a>
   b8424:	f7fe fcd2 	bl	b6dcc <__errno>
   b8428:	2321      	movs	r3, #33	; 0x21
   b842a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b8488 <pow+0x198>
   b842e:	6003      	str	r3, [r0, #0]
   b8430:	e79b      	b.n	b836a <pow+0x7a>
   b8432:	ec45 4b10 	vmov	d0, r4, r5
   b8436:	f000 feb3 	bl	b91a0 <rint>
   b843a:	4622      	mov	r2, r4
   b843c:	ec51 0b10 	vmov	r0, r1, d0
   b8440:	462b      	mov	r3, r5
   b8442:	f7fc fa11 	bl	b4868 <__aeabi_dcmpeq>
   b8446:	2800      	cmp	r0, #0
   b8448:	d1e9      	bne.n	b841e <pow+0x12e>
   b844a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b8488 <pow+0x198>
   b844e:	e78c      	b.n	b836a <pow+0x7a>
   b8450:	f7fe fcbc 	bl	b6dcc <__errno>
   b8454:	2200      	movs	r2, #0
   b8456:	2300      	movs	r3, #0
   b8458:	2121      	movs	r1, #33	; 0x21
   b845a:	6001      	str	r1, [r0, #0]
   b845c:	4610      	mov	r0, r2
   b845e:	4619      	mov	r1, r3
   b8460:	f7fc f8c4 	bl	b45ec <__aeabi_ddiv>
   b8464:	ec41 0b18 	vmov	d8, r0, r1
   b8468:	e77f      	b.n	b836a <pow+0x7a>
   b846a:	bf00      	nop
   b846c:	f3af 8000 	nop.w
	...
   b847c:	3ff00000 	.word	0x3ff00000
   b8480:	00000000 	.word	0x00000000
   b8484:	7ff00000 	.word	0x7ff00000
   b8488:	00000000 	.word	0x00000000
   b848c:	fff00000 	.word	0xfff00000
   b8490:	2003e5d8 	.word	0x2003e5d8
   b8494:	00000000 	.word	0x00000000

000b8498 <__ieee754_pow>:
   b8498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b849c:	ec57 6b11 	vmov	r6, r7, d1
   b84a0:	ed2d 8b0c 	vpush	{d8-d13}
   b84a4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b84a8:	ea5a 0206 	orrs.w	r2, sl, r6
   b84ac:	b087      	sub	sp, #28
   b84ae:	d03d      	beq.n	b852c <__ieee754_pow+0x94>
   b84b0:	ec55 4b10 	vmov	r4, r5, d0
   b84b4:	4972      	ldr	r1, [pc, #456]	; (b8680 <__ieee754_pow+0x1e8>)
   b84b6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b84ba:	4588      	cmp	r8, r1
   b84bc:	ee10 2a10 	vmov	r2, s0
   b84c0:	46a9      	mov	r9, r5
   b84c2:	dc2c      	bgt.n	b851e <__ieee754_pow+0x86>
   b84c4:	ee11 3a10 	vmov	r3, s2
   b84c8:	46bb      	mov	fp, r7
   b84ca:	d036      	beq.n	b853a <__ieee754_pow+0xa2>
   b84cc:	458a      	cmp	sl, r1
   b84ce:	dc26      	bgt.n	b851e <__ieee754_pow+0x86>
   b84d0:	496b      	ldr	r1, [pc, #428]	; (b8680 <__ieee754_pow+0x1e8>)
   b84d2:	458a      	cmp	sl, r1
   b84d4:	d021      	beq.n	b851a <__ieee754_pow+0x82>
   b84d6:	f1b9 0f00 	cmp.w	r9, #0
   b84da:	db39      	blt.n	b8550 <__ieee754_pow+0xb8>
   b84dc:	2100      	movs	r1, #0
   b84de:	9100      	str	r1, [sp, #0]
   b84e0:	2b00      	cmp	r3, #0
   b84e2:	d151      	bne.n	b8588 <__ieee754_pow+0xf0>
   b84e4:	4b66      	ldr	r3, [pc, #408]	; (b8680 <__ieee754_pow+0x1e8>)
   b84e6:	459a      	cmp	sl, r3
   b84e8:	f000 80a2 	beq.w	b8630 <__ieee754_pow+0x198>
   b84ec:	4b65      	ldr	r3, [pc, #404]	; (b8684 <__ieee754_pow+0x1ec>)
   b84ee:	459a      	cmp	sl, r3
   b84f0:	f000 80b0 	beq.w	b8654 <__ieee754_pow+0x1bc>
   b84f4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b84f8:	f000 84c0 	beq.w	b8e7c <__ieee754_pow+0x9e4>
   b84fc:	4b62      	ldr	r3, [pc, #392]	; (b8688 <__ieee754_pow+0x1f0>)
   b84fe:	459b      	cmp	fp, r3
   b8500:	d142      	bne.n	b8588 <__ieee754_pow+0xf0>
   b8502:	f1b9 0f00 	cmp.w	r9, #0
   b8506:	db3f      	blt.n	b8588 <__ieee754_pow+0xf0>
   b8508:	ec45 4b10 	vmov	d0, r4, r5
   b850c:	b007      	add	sp, #28
   b850e:	ecbd 8b0c 	vpop	{d8-d13}
   b8512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8516:	f000 bd59 	b.w	b8fcc <__ieee754_sqrt>
   b851a:	2b00      	cmp	r3, #0
   b851c:	d0db      	beq.n	b84d6 <__ieee754_pow+0x3e>
   b851e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8522:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b8526:	ea58 0302 	orrs.w	r3, r8, r2
   b852a:	d109      	bne.n	b8540 <__ieee754_pow+0xa8>
   b852c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b8670 <__ieee754_pow+0x1d8>
   b8530:	b007      	add	sp, #28
   b8532:	ecbd 8b0c 	vpop	{d8-d13}
   b8536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b853a:	b90c      	cbnz	r4, b8540 <__ieee754_pow+0xa8>
   b853c:	45c2      	cmp	sl, r8
   b853e:	ddc7      	ble.n	b84d0 <__ieee754_pow+0x38>
   b8540:	4852      	ldr	r0, [pc, #328]	; (b868c <__ieee754_pow+0x1f4>)
   b8542:	b007      	add	sp, #28
   b8544:	ecbd 8b0c 	vpop	{d8-d13}
   b8548:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b854c:	f000 be20 	b.w	b9190 <nan>
   b8550:	494f      	ldr	r1, [pc, #316]	; (b8690 <__ieee754_pow+0x1f8>)
   b8552:	458a      	cmp	sl, r1
   b8554:	f300 8085 	bgt.w	b8662 <__ieee754_pow+0x1ca>
   b8558:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b855c:	458a      	cmp	sl, r1
   b855e:	dd0f      	ble.n	b8580 <__ieee754_pow+0xe8>
   b8560:	ea4f 512a 	mov.w	r1, sl, asr #20
   b8564:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b8568:	2914      	cmp	r1, #20
   b856a:	f340 849b 	ble.w	b8ea4 <__ieee754_pow+0xa0c>
   b856e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b8572:	fa23 f001 	lsr.w	r0, r3, r1
   b8576:	fa00 f101 	lsl.w	r1, r0, r1
   b857a:	4299      	cmp	r1, r3
   b857c:	f000 84ed 	beq.w	b8f5a <__ieee754_pow+0xac2>
   b8580:	2100      	movs	r1, #0
   b8582:	9100      	str	r1, [sp, #0]
   b8584:	2b00      	cmp	r3, #0
   b8586:	d0b1      	beq.n	b84ec <__ieee754_pow+0x54>
   b8588:	ec45 4b10 	vmov	d0, r4, r5
   b858c:	9202      	str	r2, [sp, #8]
   b858e:	f000 fde9 	bl	b9164 <fabs>
   b8592:	9a02      	ldr	r2, [sp, #8]
   b8594:	bb5a      	cbnz	r2, b85ee <__ieee754_pow+0x156>
   b8596:	f1b8 0f00 	cmp.w	r8, #0
   b859a:	d004      	beq.n	b85a6 <__ieee754_pow+0x10e>
   b859c:	4b39      	ldr	r3, [pc, #228]	; (b8684 <__ieee754_pow+0x1ec>)
   b859e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b85a2:	429a      	cmp	r2, r3
   b85a4:	d123      	bne.n	b85ee <__ieee754_pow+0x156>
   b85a6:	f1bb 0f00 	cmp.w	fp, #0
   b85aa:	da07      	bge.n	b85bc <__ieee754_pow+0x124>
   b85ac:	ec53 2b10 	vmov	r2, r3, d0
   b85b0:	4934      	ldr	r1, [pc, #208]	; (b8684 <__ieee754_pow+0x1ec>)
   b85b2:	2000      	movs	r0, #0
   b85b4:	f7fc f81a 	bl	b45ec <__aeabi_ddiv>
   b85b8:	ec41 0b10 	vmov	d0, r0, r1
   b85bc:	f1b9 0f00 	cmp.w	r9, #0
   b85c0:	dab6      	bge.n	b8530 <__ieee754_pow+0x98>
   b85c2:	9b00      	ldr	r3, [sp, #0]
   b85c4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b85c8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b85cc:	ea58 0303 	orrs.w	r3, r8, r3
   b85d0:	f040 848d 	bne.w	b8eee <__ieee754_pow+0xa56>
   b85d4:	ec53 2b10 	vmov	r2, r3, d0
   b85d8:	4610      	mov	r0, r2
   b85da:	4619      	mov	r1, r3
   b85dc:	f7fb fd24 	bl	b4028 <__aeabi_dsub>
   b85e0:	4602      	mov	r2, r0
   b85e2:	460b      	mov	r3, r1
   b85e4:	f7fc f802 	bl	b45ec <__aeabi_ddiv>
   b85e8:	ec41 0b10 	vmov	d0, r0, r1
   b85ec:	e7a0      	b.n	b8530 <__ieee754_pow+0x98>
   b85ee:	9a00      	ldr	r2, [sp, #0]
   b85f0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b85f4:	3b01      	subs	r3, #1
   b85f6:	9304      	str	r3, [sp, #16]
   b85f8:	4313      	orrs	r3, r2
   b85fa:	d035      	beq.n	b8668 <__ieee754_pow+0x1d0>
   b85fc:	4b25      	ldr	r3, [pc, #148]	; (b8694 <__ieee754_pow+0x1fc>)
   b85fe:	459a      	cmp	sl, r3
   b8600:	dd4c      	ble.n	b869c <__ieee754_pow+0x204>
   b8602:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b8606:	459a      	cmp	sl, r3
   b8608:	4b23      	ldr	r3, [pc, #140]	; (b8698 <__ieee754_pow+0x200>)
   b860a:	f340 83db 	ble.w	b8dc4 <__ieee754_pow+0x92c>
   b860e:	4598      	cmp	r8, r3
   b8610:	f340 8360 	ble.w	b8cd4 <__ieee754_pow+0x83c>
   b8614:	f1bb 0f00 	cmp.w	fp, #0
   b8618:	f340 8360 	ble.w	b8cdc <__ieee754_pow+0x844>
   b861c:	a316      	add	r3, pc, #88	; (adr r3, b8678 <__ieee754_pow+0x1e0>)
   b861e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8622:	4610      	mov	r0, r2
   b8624:	4619      	mov	r1, r3
   b8626:	f7fb feb7 	bl	b4398 <__aeabi_dmul>
   b862a:	ec41 0b10 	vmov	d0, r0, r1
   b862e:	e77f      	b.n	b8530 <__ieee754_pow+0x98>
   b8630:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b8634:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b8638:	4313      	orrs	r3, r2
   b863a:	f43f af77 	beq.w	b852c <__ieee754_pow+0x94>
   b863e:	4b16      	ldr	r3, [pc, #88]	; (b8698 <__ieee754_pow+0x200>)
   b8640:	4598      	cmp	r8, r3
   b8642:	f340 837a 	ble.w	b8d3a <__ieee754_pow+0x8a2>
   b8646:	f1bb 0f00 	cmp.w	fp, #0
   b864a:	f2c0 8347 	blt.w	b8cdc <__ieee754_pow+0x844>
   b864e:	ec47 6b10 	vmov	d0, r6, r7
   b8652:	e76d      	b.n	b8530 <__ieee754_pow+0x98>
   b8654:	f1bb 0f00 	cmp.w	fp, #0
   b8658:	f2c0 841a 	blt.w	b8e90 <__ieee754_pow+0x9f8>
   b865c:	ec45 4b10 	vmov	d0, r4, r5
   b8660:	e766      	b.n	b8530 <__ieee754_pow+0x98>
   b8662:	2102      	movs	r1, #2
   b8664:	9100      	str	r1, [sp, #0]
   b8666:	e73b      	b.n	b84e0 <__ieee754_pow+0x48>
   b8668:	4622      	mov	r2, r4
   b866a:	462b      	mov	r3, r5
   b866c:	e7b4      	b.n	b85d8 <__ieee754_pow+0x140>
   b866e:	bf00      	nop
   b8670:	00000000 	.word	0x00000000
   b8674:	3ff00000 	.word	0x3ff00000
   b8678:	8800759c 	.word	0x8800759c
   b867c:	7e37e43c 	.word	0x7e37e43c
   b8680:	7ff00000 	.word	0x7ff00000
   b8684:	3ff00000 	.word	0x3ff00000
   b8688:	3fe00000 	.word	0x3fe00000
   b868c:	000b9bd8 	.word	0x000b9bd8
   b8690:	433fffff 	.word	0x433fffff
   b8694:	41e00000 	.word	0x41e00000
   b8698:	3fefffff 	.word	0x3fefffff
   b869c:	4be4      	ldr	r3, [pc, #912]	; (b8a30 <__ieee754_pow+0x598>)
   b869e:	ea09 0303 	and.w	r3, r9, r3
   b86a2:	2200      	movs	r2, #0
   b86a4:	b953      	cbnz	r3, b86bc <__ieee754_pow+0x224>
   b86a6:	ec51 0b10 	vmov	r0, r1, d0
   b86aa:	4be2      	ldr	r3, [pc, #904]	; (b8a34 <__ieee754_pow+0x59c>)
   b86ac:	f7fb fe74 	bl	b4398 <__aeabi_dmul>
   b86b0:	ec41 0b10 	vmov	d0, r0, r1
   b86b4:	ee10 8a90 	vmov	r8, s1
   b86b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b86bc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b86c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b86c4:	189a      	adds	r2, r3, r2
   b86c6:	4bdc      	ldr	r3, [pc, #880]	; (b8a38 <__ieee754_pow+0x5a0>)
   b86c8:	9205      	str	r2, [sp, #20]
   b86ca:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b86ce:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b86d2:	4598      	cmp	r8, r3
   b86d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b86d8:	dd07      	ble.n	b86ea <__ieee754_pow+0x252>
   b86da:	4bd8      	ldr	r3, [pc, #864]	; (b8a3c <__ieee754_pow+0x5a4>)
   b86dc:	4598      	cmp	r8, r3
   b86de:	f340 8414 	ble.w	b8f0a <__ieee754_pow+0xa72>
   b86e2:	3201      	adds	r2, #1
   b86e4:	9205      	str	r2, [sp, #20]
   b86e6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b86ea:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b89d0 <__ieee754_pow+0x538>
   b86ee:	ed9f 7bba 	vldr	d7, [pc, #744]	; b89d8 <__ieee754_pow+0x540>
   b86f2:	ec53 2b16 	vmov	r2, r3, d6
   b86f6:	eeb0 ca47 	vmov.f32	s24, s14
   b86fa:	eef0 ca67 	vmov.f32	s25, s15
   b86fe:	2500      	movs	r5, #0
   b8700:	eeb0 da47 	vmov.f32	s26, s14
   b8704:	eef0 da67 	vmov.f32	s27, s15
   b8708:	ec5b ab10 	vmov	sl, fp, d0
   b870c:	46a3      	mov	fp, r4
   b870e:	4650      	mov	r0, sl
   b8710:	4659      	mov	r1, fp
   b8712:	ec43 2b1a 	vmov	d10, r2, r3
   b8716:	f7fb fc87 	bl	b4028 <__aeabi_dsub>
   b871a:	ec53 2b1a 	vmov	r2, r3, d10
   b871e:	4680      	mov	r8, r0
   b8720:	4689      	mov	r9, r1
   b8722:	4650      	mov	r0, sl
   b8724:	4659      	mov	r1, fp
   b8726:	f7fb fc81 	bl	b402c <__adddf3>
   b872a:	4602      	mov	r2, r0
   b872c:	460b      	mov	r3, r1
   b872e:	2000      	movs	r0, #0
   b8730:	49c3      	ldr	r1, [pc, #780]	; (b8a40 <__ieee754_pow+0x5a8>)
   b8732:	f7fb ff5b 	bl	b45ec <__aeabi_ddiv>
   b8736:	ec41 0b1b 	vmov	d11, r0, r1
   b873a:	4640      	mov	r0, r8
   b873c:	ec53 2b1b 	vmov	r2, r3, d11
   b8740:	4649      	mov	r1, r9
   b8742:	f7fb fe29 	bl	b4398 <__aeabi_dmul>
   b8746:	ec41 0b18 	vmov	d8, r0, r1
   b874a:	460a      	mov	r2, r1
   b874c:	4601      	mov	r1, r0
   b874e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b8752:	2100      	movs	r1, #0
   b8754:	9102      	str	r1, [sp, #8]
   b8756:	1064      	asrs	r4, r4, #1
   b8758:	ec4b ab19 	vmov	d9, sl, fp
   b875c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b8760:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b8764:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b8768:	2000      	movs	r0, #0
   b876a:	1959      	adds	r1, r3, r5
   b876c:	4604      	mov	r4, r0
   b876e:	460d      	mov	r5, r1
   b8770:	4602      	mov	r2, r0
   b8772:	460b      	mov	r3, r1
   b8774:	4650      	mov	r0, sl
   b8776:	4659      	mov	r1, fp
   b8778:	f7fb fe0e 	bl	b4398 <__aeabi_dmul>
   b877c:	4602      	mov	r2, r0
   b877e:	460b      	mov	r3, r1
   b8780:	4640      	mov	r0, r8
   b8782:	4649      	mov	r1, r9
   b8784:	f7fb fc50 	bl	b4028 <__aeabi_dsub>
   b8788:	ec53 2b1a 	vmov	r2, r3, d10
   b878c:	4680      	mov	r8, r0
   b878e:	4689      	mov	r9, r1
   b8790:	4620      	mov	r0, r4
   b8792:	4629      	mov	r1, r5
   b8794:	f7fb fc48 	bl	b4028 <__aeabi_dsub>
   b8798:	4602      	mov	r2, r0
   b879a:	460b      	mov	r3, r1
   b879c:	ec51 0b19 	vmov	r0, r1, d9
   b87a0:	f7fb fc42 	bl	b4028 <__aeabi_dsub>
   b87a4:	4652      	mov	r2, sl
   b87a6:	465b      	mov	r3, fp
   b87a8:	f7fb fdf6 	bl	b4398 <__aeabi_dmul>
   b87ac:	4602      	mov	r2, r0
   b87ae:	460b      	mov	r3, r1
   b87b0:	4640      	mov	r0, r8
   b87b2:	4649      	mov	r1, r9
   b87b4:	f7fb fc38 	bl	b4028 <__aeabi_dsub>
   b87b8:	ec53 2b1b 	vmov	r2, r3, d11
   b87bc:	f7fb fdec 	bl	b4398 <__aeabi_dmul>
   b87c0:	ec53 2b18 	vmov	r2, r3, d8
   b87c4:	ec41 0b19 	vmov	d9, r0, r1
   b87c8:	ec51 0b18 	vmov	r0, r1, d8
   b87cc:	f7fb fde4 	bl	b4398 <__aeabi_dmul>
   b87d0:	a383      	add	r3, pc, #524	; (adr r3, b89e0 <__ieee754_pow+0x548>)
   b87d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87d6:	4604      	mov	r4, r0
   b87d8:	460d      	mov	r5, r1
   b87da:	f7fb fddd 	bl	b4398 <__aeabi_dmul>
   b87de:	a382      	add	r3, pc, #520	; (adr r3, b89e8 <__ieee754_pow+0x550>)
   b87e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87e4:	f7fb fc22 	bl	b402c <__adddf3>
   b87e8:	4622      	mov	r2, r4
   b87ea:	462b      	mov	r3, r5
   b87ec:	f7fb fdd4 	bl	b4398 <__aeabi_dmul>
   b87f0:	a37f      	add	r3, pc, #508	; (adr r3, b89f0 <__ieee754_pow+0x558>)
   b87f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87f6:	f7fb fc19 	bl	b402c <__adddf3>
   b87fa:	4622      	mov	r2, r4
   b87fc:	462b      	mov	r3, r5
   b87fe:	f7fb fdcb 	bl	b4398 <__aeabi_dmul>
   b8802:	a37d      	add	r3, pc, #500	; (adr r3, b89f8 <__ieee754_pow+0x560>)
   b8804:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8808:	f7fb fc10 	bl	b402c <__adddf3>
   b880c:	4622      	mov	r2, r4
   b880e:	462b      	mov	r3, r5
   b8810:	f7fb fdc2 	bl	b4398 <__aeabi_dmul>
   b8814:	a37a      	add	r3, pc, #488	; (adr r3, b8a00 <__ieee754_pow+0x568>)
   b8816:	e9d3 2300 	ldrd	r2, r3, [r3]
   b881a:	f7fb fc07 	bl	b402c <__adddf3>
   b881e:	4622      	mov	r2, r4
   b8820:	462b      	mov	r3, r5
   b8822:	f7fb fdb9 	bl	b4398 <__aeabi_dmul>
   b8826:	a378      	add	r3, pc, #480	; (adr r3, b8a08 <__ieee754_pow+0x570>)
   b8828:	e9d3 2300 	ldrd	r2, r3, [r3]
   b882c:	f7fb fbfe 	bl	b402c <__adddf3>
   b8830:	4622      	mov	r2, r4
   b8832:	4680      	mov	r8, r0
   b8834:	4689      	mov	r9, r1
   b8836:	462b      	mov	r3, r5
   b8838:	4620      	mov	r0, r4
   b883a:	4629      	mov	r1, r5
   b883c:	f7fb fdac 	bl	b4398 <__aeabi_dmul>
   b8840:	4602      	mov	r2, r0
   b8842:	460b      	mov	r3, r1
   b8844:	4640      	mov	r0, r8
   b8846:	4649      	mov	r1, r9
   b8848:	f7fb fda6 	bl	b4398 <__aeabi_dmul>
   b884c:	4652      	mov	r2, sl
   b884e:	4604      	mov	r4, r0
   b8850:	460d      	mov	r5, r1
   b8852:	465b      	mov	r3, fp
   b8854:	ec51 0b18 	vmov	r0, r1, d8
   b8858:	f7fb fbe8 	bl	b402c <__adddf3>
   b885c:	ec53 2b19 	vmov	r2, r3, d9
   b8860:	f7fb fd9a 	bl	b4398 <__aeabi_dmul>
   b8864:	4622      	mov	r2, r4
   b8866:	462b      	mov	r3, r5
   b8868:	f7fb fbe0 	bl	b402c <__adddf3>
   b886c:	4652      	mov	r2, sl
   b886e:	4680      	mov	r8, r0
   b8870:	4689      	mov	r9, r1
   b8872:	465b      	mov	r3, fp
   b8874:	4650      	mov	r0, sl
   b8876:	4659      	mov	r1, fp
   b8878:	f7fb fd8e 	bl	b4398 <__aeabi_dmul>
   b887c:	4602      	mov	r2, r0
   b887e:	460b      	mov	r3, r1
   b8880:	ec43 2b1a 	vmov	d10, r2, r3
   b8884:	4b6f      	ldr	r3, [pc, #444]	; (b8a44 <__ieee754_pow+0x5ac>)
   b8886:	2200      	movs	r2, #0
   b8888:	f7fb fbd0 	bl	b402c <__adddf3>
   b888c:	4642      	mov	r2, r8
   b888e:	464b      	mov	r3, r9
   b8890:	f7fb fbcc 	bl	b402c <__adddf3>
   b8894:	2400      	movs	r4, #0
   b8896:	460d      	mov	r5, r1
   b8898:	4622      	mov	r2, r4
   b889a:	462b      	mov	r3, r5
   b889c:	4650      	mov	r0, sl
   b889e:	4659      	mov	r1, fp
   b88a0:	f7fb fd7a 	bl	b4398 <__aeabi_dmul>
   b88a4:	4b67      	ldr	r3, [pc, #412]	; (b8a44 <__ieee754_pow+0x5ac>)
   b88a6:	4682      	mov	sl, r0
   b88a8:	468b      	mov	fp, r1
   b88aa:	2200      	movs	r2, #0
   b88ac:	4620      	mov	r0, r4
   b88ae:	4629      	mov	r1, r5
   b88b0:	f7fb fbba 	bl	b4028 <__aeabi_dsub>
   b88b4:	ec53 2b1a 	vmov	r2, r3, d10
   b88b8:	f7fb fbb6 	bl	b4028 <__aeabi_dsub>
   b88bc:	4602      	mov	r2, r0
   b88be:	460b      	mov	r3, r1
   b88c0:	4640      	mov	r0, r8
   b88c2:	4649      	mov	r1, r9
   b88c4:	f7fb fbb0 	bl	b4028 <__aeabi_dsub>
   b88c8:	ec53 2b18 	vmov	r2, r3, d8
   b88cc:	f7fb fd64 	bl	b4398 <__aeabi_dmul>
   b88d0:	4622      	mov	r2, r4
   b88d2:	462b      	mov	r3, r5
   b88d4:	4604      	mov	r4, r0
   b88d6:	460d      	mov	r5, r1
   b88d8:	ec51 0b19 	vmov	r0, r1, d9
   b88dc:	f7fb fd5c 	bl	b4398 <__aeabi_dmul>
   b88e0:	4602      	mov	r2, r0
   b88e2:	460b      	mov	r3, r1
   b88e4:	4620      	mov	r0, r4
   b88e6:	4629      	mov	r1, r5
   b88e8:	f7fb fba0 	bl	b402c <__adddf3>
   b88ec:	4680      	mov	r8, r0
   b88ee:	4689      	mov	r9, r1
   b88f0:	4642      	mov	r2, r8
   b88f2:	464b      	mov	r3, r9
   b88f4:	4650      	mov	r0, sl
   b88f6:	4659      	mov	r1, fp
   b88f8:	f7fb fb98 	bl	b402c <__adddf3>
   b88fc:	a344      	add	r3, pc, #272	; (adr r3, b8a10 <__ieee754_pow+0x578>)
   b88fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8902:	2000      	movs	r0, #0
   b8904:	4604      	mov	r4, r0
   b8906:	460d      	mov	r5, r1
   b8908:	f7fb fd46 	bl	b4398 <__aeabi_dmul>
   b890c:	4652      	mov	r2, sl
   b890e:	ec41 0b19 	vmov	d9, r0, r1
   b8912:	465b      	mov	r3, fp
   b8914:	4620      	mov	r0, r4
   b8916:	4629      	mov	r1, r5
   b8918:	f7fb fb86 	bl	b4028 <__aeabi_dsub>
   b891c:	4602      	mov	r2, r0
   b891e:	460b      	mov	r3, r1
   b8920:	4640      	mov	r0, r8
   b8922:	4649      	mov	r1, r9
   b8924:	f7fb fb80 	bl	b4028 <__aeabi_dsub>
   b8928:	a33b      	add	r3, pc, #236	; (adr r3, b8a18 <__ieee754_pow+0x580>)
   b892a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b892e:	f7fb fd33 	bl	b4398 <__aeabi_dmul>
   b8932:	4602      	mov	r2, r0
   b8934:	460b      	mov	r3, r1
   b8936:	4620      	mov	r0, r4
   b8938:	4629      	mov	r1, r5
   b893a:	4614      	mov	r4, r2
   b893c:	461d      	mov	r5, r3
   b893e:	a338      	add	r3, pc, #224	; (adr r3, b8a20 <__ieee754_pow+0x588>)
   b8940:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8944:	f7fb fd28 	bl	b4398 <__aeabi_dmul>
   b8948:	4602      	mov	r2, r0
   b894a:	460b      	mov	r3, r1
   b894c:	4620      	mov	r0, r4
   b894e:	4629      	mov	r1, r5
   b8950:	f7fb fb6c 	bl	b402c <__adddf3>
   b8954:	ec53 2b1d 	vmov	r2, r3, d13
   b8958:	f7fb fb68 	bl	b402c <__adddf3>
   b895c:	4680      	mov	r8, r0
   b895e:	9805      	ldr	r0, [sp, #20]
   b8960:	4689      	mov	r9, r1
   b8962:	f7fb fcaf 	bl	b42c4 <__aeabi_i2d>
   b8966:	4642      	mov	r2, r8
   b8968:	4682      	mov	sl, r0
   b896a:	468b      	mov	fp, r1
   b896c:	464b      	mov	r3, r9
   b896e:	ec51 0b19 	vmov	r0, r1, d9
   b8972:	f7fb fb5b 	bl	b402c <__adddf3>
   b8976:	ec53 2b1c 	vmov	r2, r3, d12
   b897a:	f7fb fb57 	bl	b402c <__adddf3>
   b897e:	4652      	mov	r2, sl
   b8980:	465b      	mov	r3, fp
   b8982:	f7fb fb53 	bl	b402c <__adddf3>
   b8986:	4652      	mov	r2, sl
   b8988:	465b      	mov	r3, fp
   b898a:	2000      	movs	r0, #0
   b898c:	4604      	mov	r4, r0
   b898e:	460d      	mov	r5, r1
   b8990:	f7fb fb4a 	bl	b4028 <__aeabi_dsub>
   b8994:	ec53 2b1c 	vmov	r2, r3, d12
   b8998:	f7fb fb46 	bl	b4028 <__aeabi_dsub>
   b899c:	ec53 2b19 	vmov	r2, r3, d9
   b89a0:	f7fb fb42 	bl	b4028 <__aeabi_dsub>
   b89a4:	4602      	mov	r2, r0
   b89a6:	460b      	mov	r3, r1
   b89a8:	4640      	mov	r0, r8
   b89aa:	4649      	mov	r1, r9
   b89ac:	f7fb fb3c 	bl	b4028 <__aeabi_dsub>
   b89b0:	9b00      	ldr	r3, [sp, #0]
   b89b2:	9a04      	ldr	r2, [sp, #16]
   b89b4:	3b01      	subs	r3, #1
   b89b6:	4313      	orrs	r3, r2
   b89b8:	4682      	mov	sl, r0
   b89ba:	468b      	mov	fp, r1
   b89bc:	f040 81b6 	bne.w	b8d2c <__ieee754_pow+0x894>
   b89c0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b8a28 <__ieee754_pow+0x590>
   b89c4:	eeb0 8a47 	vmov.f32	s16, s14
   b89c8:	eef0 8a67 	vmov.f32	s17, s15
   b89cc:	e03c      	b.n	b8a48 <__ieee754_pow+0x5b0>
   b89ce:	bf00      	nop
   b89d0:	00000000 	.word	0x00000000
   b89d4:	3ff00000 	.word	0x3ff00000
	...
   b89e0:	4a454eef 	.word	0x4a454eef
   b89e4:	3fca7e28 	.word	0x3fca7e28
   b89e8:	93c9db65 	.word	0x93c9db65
   b89ec:	3fcd864a 	.word	0x3fcd864a
   b89f0:	a91d4101 	.word	0xa91d4101
   b89f4:	3fd17460 	.word	0x3fd17460
   b89f8:	518f264d 	.word	0x518f264d
   b89fc:	3fd55555 	.word	0x3fd55555
   b8a00:	db6fabff 	.word	0xdb6fabff
   b8a04:	3fdb6db6 	.word	0x3fdb6db6
   b8a08:	33333303 	.word	0x33333303
   b8a0c:	3fe33333 	.word	0x3fe33333
   b8a10:	e0000000 	.word	0xe0000000
   b8a14:	3feec709 	.word	0x3feec709
   b8a18:	dc3a03fd 	.word	0xdc3a03fd
   b8a1c:	3feec709 	.word	0x3feec709
   b8a20:	145b01f5 	.word	0x145b01f5
   b8a24:	be3e2fe0 	.word	0xbe3e2fe0
   b8a28:	00000000 	.word	0x00000000
   b8a2c:	bff00000 	.word	0xbff00000
   b8a30:	7ff00000 	.word	0x7ff00000
   b8a34:	43400000 	.word	0x43400000
   b8a38:	0003988e 	.word	0x0003988e
   b8a3c:	000bb679 	.word	0x000bb679
   b8a40:	3ff00000 	.word	0x3ff00000
   b8a44:	40080000 	.word	0x40080000
   b8a48:	2300      	movs	r3, #0
   b8a4a:	e9cd 6700 	strd	r6, r7, [sp]
   b8a4e:	9300      	str	r3, [sp, #0]
   b8a50:	e9dd 8900 	ldrd	r8, r9, [sp]
   b8a54:	4630      	mov	r0, r6
   b8a56:	4642      	mov	r2, r8
   b8a58:	464b      	mov	r3, r9
   b8a5a:	4639      	mov	r1, r7
   b8a5c:	f7fb fae4 	bl	b4028 <__aeabi_dsub>
   b8a60:	4622      	mov	r2, r4
   b8a62:	462b      	mov	r3, r5
   b8a64:	f7fb fc98 	bl	b4398 <__aeabi_dmul>
   b8a68:	4632      	mov	r2, r6
   b8a6a:	463b      	mov	r3, r7
   b8a6c:	4606      	mov	r6, r0
   b8a6e:	460f      	mov	r7, r1
   b8a70:	4650      	mov	r0, sl
   b8a72:	4659      	mov	r1, fp
   b8a74:	f7fb fc90 	bl	b4398 <__aeabi_dmul>
   b8a78:	4602      	mov	r2, r0
   b8a7a:	460b      	mov	r3, r1
   b8a7c:	4630      	mov	r0, r6
   b8a7e:	4639      	mov	r1, r7
   b8a80:	f7fb fad4 	bl	b402c <__adddf3>
   b8a84:	4642      	mov	r2, r8
   b8a86:	464b      	mov	r3, r9
   b8a88:	4606      	mov	r6, r0
   b8a8a:	460f      	mov	r7, r1
   b8a8c:	4620      	mov	r0, r4
   b8a8e:	4629      	mov	r1, r5
   b8a90:	f7fb fc82 	bl	b4398 <__aeabi_dmul>
   b8a94:	4604      	mov	r4, r0
   b8a96:	460d      	mov	r5, r1
   b8a98:	462b      	mov	r3, r5
   b8a9a:	4630      	mov	r0, r6
   b8a9c:	4639      	mov	r1, r7
   b8a9e:	4622      	mov	r2, r4
   b8aa0:	f7fb fac4 	bl	b402c <__adddf3>
   b8aa4:	4bc2      	ldr	r3, [pc, #776]	; (b8db0 <__ieee754_pow+0x918>)
   b8aa6:	4299      	cmp	r1, r3
   b8aa8:	4680      	mov	r8, r0
   b8aaa:	4689      	mov	r9, r1
   b8aac:	468a      	mov	sl, r1
   b8aae:	f340 8118 	ble.w	b8ce2 <__ieee754_pow+0x84a>
   b8ab2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b8ab6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b8aba:	4303      	orrs	r3, r0
   b8abc:	f040 8207 	bne.w	b8ece <__ieee754_pow+0xa36>
   b8ac0:	a3a3      	add	r3, pc, #652	; (adr r3, b8d50 <__ieee754_pow+0x8b8>)
   b8ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ac6:	4630      	mov	r0, r6
   b8ac8:	4639      	mov	r1, r7
   b8aca:	f7fb faaf 	bl	b402c <__adddf3>
   b8ace:	4602      	mov	r2, r0
   b8ad0:	460b      	mov	r3, r1
   b8ad2:	4640      	mov	r0, r8
   b8ad4:	4649      	mov	r1, r9
   b8ad6:	4690      	mov	r8, r2
   b8ad8:	4699      	mov	r9, r3
   b8ada:	4622      	mov	r2, r4
   b8adc:	462b      	mov	r3, r5
   b8ade:	f7fb faa3 	bl	b4028 <__aeabi_dsub>
   b8ae2:	4602      	mov	r2, r0
   b8ae4:	460b      	mov	r3, r1
   b8ae6:	4640      	mov	r0, r8
   b8ae8:	4649      	mov	r1, r9
   b8aea:	f7fb fee5 	bl	b48b8 <__aeabi_dcmpgt>
   b8aee:	2800      	cmp	r0, #0
   b8af0:	f040 81ed 	bne.w	b8ece <__ieee754_pow+0xa36>
   b8af4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b8afc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8b00:	fa42 f303 	asr.w	r3, r2, r3
   b8b04:	4453      	add	r3, sl
   b8b06:	49ab      	ldr	r1, [pc, #684]	; (b8db4 <__ieee754_pow+0x91c>)
   b8b08:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b8b0c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8b10:	fa41 fc02 	asr.w	ip, r1, r2
   b8b14:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8b1c:	f1c2 0214 	rsb	r2, r2, #20
   b8b20:	fa41 f202 	asr.w	r2, r1, r2
   b8b24:	2000      	movs	r0, #0
   b8b26:	ea23 010c 	bic.w	r1, r3, ip
   b8b2a:	f1ba 0f00 	cmp.w	sl, #0
   b8b2e:	9200      	str	r2, [sp, #0]
   b8b30:	460b      	mov	r3, r1
   b8b32:	4602      	mov	r2, r0
   b8b34:	da02      	bge.n	b8b3c <__ieee754_pow+0x6a4>
   b8b36:	9900      	ldr	r1, [sp, #0]
   b8b38:	4249      	negs	r1, r1
   b8b3a:	9100      	str	r1, [sp, #0]
   b8b3c:	4620      	mov	r0, r4
   b8b3e:	4629      	mov	r1, r5
   b8b40:	f7fb fa72 	bl	b4028 <__aeabi_dsub>
   b8b44:	9b00      	ldr	r3, [sp, #0]
   b8b46:	051b      	lsls	r3, r3, #20
   b8b48:	9302      	str	r3, [sp, #8]
   b8b4a:	4602      	mov	r2, r0
   b8b4c:	460b      	mov	r3, r1
   b8b4e:	4604      	mov	r4, r0
   b8b50:	460d      	mov	r5, r1
   b8b52:	4630      	mov	r0, r6
   b8b54:	4639      	mov	r1, r7
   b8b56:	f7fb fa69 	bl	b402c <__adddf3>
   b8b5a:	4689      	mov	r9, r1
   b8b5c:	f04f 0800 	mov.w	r8, #0
   b8b60:	a37d      	add	r3, pc, #500	; (adr r3, b8d58 <__ieee754_pow+0x8c0>)
   b8b62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b66:	4640      	mov	r0, r8
   b8b68:	4649      	mov	r1, r9
   b8b6a:	f7fb fc15 	bl	b4398 <__aeabi_dmul>
   b8b6e:	4622      	mov	r2, r4
   b8b70:	462b      	mov	r3, r5
   b8b72:	4682      	mov	sl, r0
   b8b74:	468b      	mov	fp, r1
   b8b76:	4640      	mov	r0, r8
   b8b78:	4649      	mov	r1, r9
   b8b7a:	f7fb fa55 	bl	b4028 <__aeabi_dsub>
   b8b7e:	4602      	mov	r2, r0
   b8b80:	460b      	mov	r3, r1
   b8b82:	4630      	mov	r0, r6
   b8b84:	4639      	mov	r1, r7
   b8b86:	f7fb fa4f 	bl	b4028 <__aeabi_dsub>
   b8b8a:	a375      	add	r3, pc, #468	; (adr r3, b8d60 <__ieee754_pow+0x8c8>)
   b8b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b90:	f7fb fc02 	bl	b4398 <__aeabi_dmul>
   b8b94:	a374      	add	r3, pc, #464	; (adr r3, b8d68 <__ieee754_pow+0x8d0>)
   b8b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b9a:	4604      	mov	r4, r0
   b8b9c:	460d      	mov	r5, r1
   b8b9e:	4640      	mov	r0, r8
   b8ba0:	4649      	mov	r1, r9
   b8ba2:	f7fb fbf9 	bl	b4398 <__aeabi_dmul>
   b8ba6:	4602      	mov	r2, r0
   b8ba8:	460b      	mov	r3, r1
   b8baa:	4620      	mov	r0, r4
   b8bac:	4629      	mov	r1, r5
   b8bae:	f7fb fa3d 	bl	b402c <__adddf3>
   b8bb2:	4606      	mov	r6, r0
   b8bb4:	460f      	mov	r7, r1
   b8bb6:	4632      	mov	r2, r6
   b8bb8:	463b      	mov	r3, r7
   b8bba:	4650      	mov	r0, sl
   b8bbc:	4659      	mov	r1, fp
   b8bbe:	f7fb fa35 	bl	b402c <__adddf3>
   b8bc2:	4652      	mov	r2, sl
   b8bc4:	465b      	mov	r3, fp
   b8bc6:	4604      	mov	r4, r0
   b8bc8:	460d      	mov	r5, r1
   b8bca:	f7fb fa2d 	bl	b4028 <__aeabi_dsub>
   b8bce:	4602      	mov	r2, r0
   b8bd0:	460b      	mov	r3, r1
   b8bd2:	4630      	mov	r0, r6
   b8bd4:	4639      	mov	r1, r7
   b8bd6:	f7fb fa27 	bl	b4028 <__aeabi_dsub>
   b8bda:	4622      	mov	r2, r4
   b8bdc:	4680      	mov	r8, r0
   b8bde:	4689      	mov	r9, r1
   b8be0:	462b      	mov	r3, r5
   b8be2:	4620      	mov	r0, r4
   b8be4:	4629      	mov	r1, r5
   b8be6:	f7fb fbd7 	bl	b4398 <__aeabi_dmul>
   b8bea:	a361      	add	r3, pc, #388	; (adr r3, b8d70 <__ieee754_pow+0x8d8>)
   b8bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bf0:	4606      	mov	r6, r0
   b8bf2:	460f      	mov	r7, r1
   b8bf4:	f7fb fbd0 	bl	b4398 <__aeabi_dmul>
   b8bf8:	a35f      	add	r3, pc, #380	; (adr r3, b8d78 <__ieee754_pow+0x8e0>)
   b8bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bfe:	f7fb fa13 	bl	b4028 <__aeabi_dsub>
   b8c02:	4632      	mov	r2, r6
   b8c04:	463b      	mov	r3, r7
   b8c06:	f7fb fbc7 	bl	b4398 <__aeabi_dmul>
   b8c0a:	a35d      	add	r3, pc, #372	; (adr r3, b8d80 <__ieee754_pow+0x8e8>)
   b8c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8c10:	f7fb fa0c 	bl	b402c <__adddf3>
   b8c14:	4632      	mov	r2, r6
   b8c16:	463b      	mov	r3, r7
   b8c18:	f7fb fbbe 	bl	b4398 <__aeabi_dmul>
   b8c1c:	a35a      	add	r3, pc, #360	; (adr r3, b8d88 <__ieee754_pow+0x8f0>)
   b8c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8c22:	f7fb fa01 	bl	b4028 <__aeabi_dsub>
   b8c26:	4632      	mov	r2, r6
   b8c28:	463b      	mov	r3, r7
   b8c2a:	f7fb fbb5 	bl	b4398 <__aeabi_dmul>
   b8c2e:	a358      	add	r3, pc, #352	; (adr r3, b8d90 <__ieee754_pow+0x8f8>)
   b8c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8c34:	f7fb f9fa 	bl	b402c <__adddf3>
   b8c38:	4632      	mov	r2, r6
   b8c3a:	463b      	mov	r3, r7
   b8c3c:	f7fb fbac 	bl	b4398 <__aeabi_dmul>
   b8c40:	4602      	mov	r2, r0
   b8c42:	460b      	mov	r3, r1
   b8c44:	4620      	mov	r0, r4
   b8c46:	4629      	mov	r1, r5
   b8c48:	f7fb f9ee 	bl	b4028 <__aeabi_dsub>
   b8c4c:	4606      	mov	r6, r0
   b8c4e:	460f      	mov	r7, r1
   b8c50:	4632      	mov	r2, r6
   b8c52:	463b      	mov	r3, r7
   b8c54:	4620      	mov	r0, r4
   b8c56:	4629      	mov	r1, r5
   b8c58:	f7fb fb9e 	bl	b4398 <__aeabi_dmul>
   b8c5c:	4602      	mov	r2, r0
   b8c5e:	460b      	mov	r3, r1
   b8c60:	4630      	mov	r0, r6
   b8c62:	4639      	mov	r1, r7
   b8c64:	4616      	mov	r6, r2
   b8c66:	461f      	mov	r7, r3
   b8c68:	2200      	movs	r2, #0
   b8c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8c6e:	f7fb f9db 	bl	b4028 <__aeabi_dsub>
   b8c72:	4602      	mov	r2, r0
   b8c74:	460b      	mov	r3, r1
   b8c76:	4630      	mov	r0, r6
   b8c78:	4639      	mov	r1, r7
   b8c7a:	f7fb fcb7 	bl	b45ec <__aeabi_ddiv>
   b8c7e:	4642      	mov	r2, r8
   b8c80:	4606      	mov	r6, r0
   b8c82:	460f      	mov	r7, r1
   b8c84:	464b      	mov	r3, r9
   b8c86:	4620      	mov	r0, r4
   b8c88:	4629      	mov	r1, r5
   b8c8a:	f7fb fb85 	bl	b4398 <__aeabi_dmul>
   b8c8e:	4642      	mov	r2, r8
   b8c90:	464b      	mov	r3, r9
   b8c92:	f7fb f9cb 	bl	b402c <__adddf3>
   b8c96:	4602      	mov	r2, r0
   b8c98:	460b      	mov	r3, r1
   b8c9a:	4630      	mov	r0, r6
   b8c9c:	4639      	mov	r1, r7
   b8c9e:	f7fb f9c3 	bl	b4028 <__aeabi_dsub>
   b8ca2:	4622      	mov	r2, r4
   b8ca4:	462b      	mov	r3, r5
   b8ca6:	f7fb f9bf 	bl	b4028 <__aeabi_dsub>
   b8caa:	4602      	mov	r2, r0
   b8cac:	460b      	mov	r3, r1
   b8cae:	2000      	movs	r0, #0
   b8cb0:	4941      	ldr	r1, [pc, #260]	; (b8db8 <__ieee754_pow+0x920>)
   b8cb2:	f7fb f9b9 	bl	b4028 <__aeabi_dsub>
   b8cb6:	9a02      	ldr	r2, [sp, #8]
   b8cb8:	460b      	mov	r3, r1
   b8cba:	4413      	add	r3, r2
   b8cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b8cc0:	f2c0 8143 	blt.w	b8f4a <__ieee754_pow+0xab2>
   b8cc4:	4619      	mov	r1, r3
   b8cc6:	ec53 2b18 	vmov	r2, r3, d8
   b8cca:	f7fb fb65 	bl	b4398 <__aeabi_dmul>
   b8cce:	ec41 0b10 	vmov	d0, r0, r1
   b8cd2:	e42d      	b.n	b8530 <__ieee754_pow+0x98>
   b8cd4:	f1bb 0f00 	cmp.w	fp, #0
   b8cd8:	f6ff aca0 	blt.w	b861c <__ieee754_pow+0x184>
   b8cdc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8d98 <__ieee754_pow+0x900>
   b8ce0:	e426      	b.n	b8530 <__ieee754_pow+0x98>
   b8ce2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b8dc0 <__ieee754_pow+0x928>
   b8ce6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8cea:	4563      	cmp	r3, ip
   b8cec:	f340 80e7 	ble.w	b8ebe <__ieee754_pow+0xa26>
   b8cf0:	4b32      	ldr	r3, [pc, #200]	; (b8dbc <__ieee754_pow+0x924>)
   b8cf2:	440b      	add	r3, r1
   b8cf4:	4303      	orrs	r3, r0
   b8cf6:	d10a      	bne.n	b8d0e <__ieee754_pow+0x876>
   b8cf8:	4622      	mov	r2, r4
   b8cfa:	462b      	mov	r3, r5
   b8cfc:	f7fb f994 	bl	b4028 <__aeabi_dsub>
   b8d00:	4632      	mov	r2, r6
   b8d02:	463b      	mov	r3, r7
   b8d04:	f7fb fdce 	bl	b48a4 <__aeabi_dcmpge>
   b8d08:	2800      	cmp	r0, #0
   b8d0a:	f43f aef3 	beq.w	b8af4 <__ieee754_pow+0x65c>
   b8d0e:	a324      	add	r3, pc, #144	; (adr r3, b8da0 <__ieee754_pow+0x908>)
   b8d10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8d14:	ec51 0b18 	vmov	r0, r1, d8
   b8d18:	f7fb fb3e 	bl	b4398 <__aeabi_dmul>
   b8d1c:	a320      	add	r3, pc, #128	; (adr r3, b8da0 <__ieee754_pow+0x908>)
   b8d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8d22:	f7fb fb39 	bl	b4398 <__aeabi_dmul>
   b8d26:	ec41 0b10 	vmov	d0, r0, r1
   b8d2a:	e401      	b.n	b8530 <__ieee754_pow+0x98>
   b8d2c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b8da8 <__ieee754_pow+0x910>
   b8d30:	eeb0 8a47 	vmov.f32	s16, s14
   b8d34:	eef0 8a67 	vmov.f32	s17, s15
   b8d38:	e686      	b.n	b8a48 <__ieee754_pow+0x5b0>
   b8d3a:	f1bb 0f00 	cmp.w	fp, #0
   b8d3e:	dacd      	bge.n	b8cdc <__ieee754_pow+0x844>
   b8d40:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b8d44:	ee00 6a10 	vmov	s0, r6
   b8d48:	ee00 3a90 	vmov	s1, r3
   b8d4c:	f7ff bbf0 	b.w	b8530 <__ieee754_pow+0x98>
   b8d50:	652b82fe 	.word	0x652b82fe
   b8d54:	3c971547 	.word	0x3c971547
   b8d58:	00000000 	.word	0x00000000
   b8d5c:	3fe62e43 	.word	0x3fe62e43
   b8d60:	fefa39ef 	.word	0xfefa39ef
   b8d64:	3fe62e42 	.word	0x3fe62e42
   b8d68:	0ca86c39 	.word	0x0ca86c39
   b8d6c:	be205c61 	.word	0xbe205c61
   b8d70:	72bea4d0 	.word	0x72bea4d0
   b8d74:	3e663769 	.word	0x3e663769
   b8d78:	c5d26bf1 	.word	0xc5d26bf1
   b8d7c:	3ebbbd41 	.word	0x3ebbbd41
   b8d80:	af25de2c 	.word	0xaf25de2c
   b8d84:	3f11566a 	.word	0x3f11566a
   b8d88:	16bebd93 	.word	0x16bebd93
   b8d8c:	3f66c16c 	.word	0x3f66c16c
   b8d90:	5555553e 	.word	0x5555553e
   b8d94:	3fc55555 	.word	0x3fc55555
	...
   b8da0:	c2f8f359 	.word	0xc2f8f359
   b8da4:	01a56e1f 	.word	0x01a56e1f
   b8da8:	00000000 	.word	0x00000000
   b8dac:	3ff00000 	.word	0x3ff00000
   b8db0:	408fffff 	.word	0x408fffff
   b8db4:	000fffff 	.word	0x000fffff
   b8db8:	3ff00000 	.word	0x3ff00000
   b8dbc:	3f6f3400 	.word	0x3f6f3400
   b8dc0:	4090cbff 	.word	0x4090cbff
   b8dc4:	4598      	cmp	r8, r3
   b8dc6:	db85      	blt.n	b8cd4 <__ieee754_pow+0x83c>
   b8dc8:	4b7d      	ldr	r3, [pc, #500]	; (b8fc0 <__ieee754_pow+0xb28>)
   b8dca:	4598      	cmp	r8, r3
   b8dcc:	f73f ac22 	bgt.w	b8614 <__ieee754_pow+0x17c>
   b8dd0:	ec51 0b10 	vmov	r0, r1, d0
   b8dd4:	4b7a      	ldr	r3, [pc, #488]	; (b8fc0 <__ieee754_pow+0xb28>)
   b8dd6:	2200      	movs	r2, #0
   b8dd8:	f7fb f926 	bl	b4028 <__aeabi_dsub>
   b8ddc:	a368      	add	r3, pc, #416	; (adr r3, b8f80 <__ieee754_pow+0xae8>)
   b8dde:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8de2:	4604      	mov	r4, r0
   b8de4:	460d      	mov	r5, r1
   b8de6:	f7fb fad7 	bl	b4398 <__aeabi_dmul>
   b8dea:	a367      	add	r3, pc, #412	; (adr r3, b8f88 <__ieee754_pow+0xaf0>)
   b8dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8df0:	4682      	mov	sl, r0
   b8df2:	468b      	mov	fp, r1
   b8df4:	4620      	mov	r0, r4
   b8df6:	4629      	mov	r1, r5
   b8df8:	f7fb face 	bl	b4398 <__aeabi_dmul>
   b8dfc:	4b71      	ldr	r3, [pc, #452]	; (b8fc4 <__ieee754_pow+0xb2c>)
   b8dfe:	ec41 0b18 	vmov	d8, r0, r1
   b8e02:	2200      	movs	r2, #0
   b8e04:	4620      	mov	r0, r4
   b8e06:	4629      	mov	r1, r5
   b8e08:	f7fb fac6 	bl	b4398 <__aeabi_dmul>
   b8e0c:	4602      	mov	r2, r0
   b8e0e:	460b      	mov	r3, r1
   b8e10:	a15f      	add	r1, pc, #380	; (adr r1, b8f90 <__ieee754_pow+0xaf8>)
   b8e12:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8e16:	f7fb f907 	bl	b4028 <__aeabi_dsub>
   b8e1a:	4622      	mov	r2, r4
   b8e1c:	462b      	mov	r3, r5
   b8e1e:	f7fb fabb 	bl	b4398 <__aeabi_dmul>
   b8e22:	4602      	mov	r2, r0
   b8e24:	460b      	mov	r3, r1
   b8e26:	2000      	movs	r0, #0
   b8e28:	4967      	ldr	r1, [pc, #412]	; (b8fc8 <__ieee754_pow+0xb30>)
   b8e2a:	f7fb f8fd 	bl	b4028 <__aeabi_dsub>
   b8e2e:	4622      	mov	r2, r4
   b8e30:	4680      	mov	r8, r0
   b8e32:	4689      	mov	r9, r1
   b8e34:	462b      	mov	r3, r5
   b8e36:	4620      	mov	r0, r4
   b8e38:	4629      	mov	r1, r5
   b8e3a:	f7fb faad 	bl	b4398 <__aeabi_dmul>
   b8e3e:	4602      	mov	r2, r0
   b8e40:	460b      	mov	r3, r1
   b8e42:	4640      	mov	r0, r8
   b8e44:	4649      	mov	r1, r9
   b8e46:	f7fb faa7 	bl	b4398 <__aeabi_dmul>
   b8e4a:	a353      	add	r3, pc, #332	; (adr r3, b8f98 <__ieee754_pow+0xb00>)
   b8e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e50:	f7fb faa2 	bl	b4398 <__aeabi_dmul>
   b8e54:	4602      	mov	r2, r0
   b8e56:	460b      	mov	r3, r1
   b8e58:	ec51 0b18 	vmov	r0, r1, d8
   b8e5c:	f7fb f8e4 	bl	b4028 <__aeabi_dsub>
   b8e60:	4680      	mov	r8, r0
   b8e62:	4689      	mov	r9, r1
   b8e64:	4642      	mov	r2, r8
   b8e66:	464b      	mov	r3, r9
   b8e68:	4650      	mov	r0, sl
   b8e6a:	4659      	mov	r1, fp
   b8e6c:	f7fb f8de 	bl	b402c <__adddf3>
   b8e70:	2000      	movs	r0, #0
   b8e72:	4652      	mov	r2, sl
   b8e74:	465b      	mov	r3, fp
   b8e76:	4604      	mov	r4, r0
   b8e78:	460d      	mov	r5, r1
   b8e7a:	e591      	b.n	b89a0 <__ieee754_pow+0x508>
   b8e7c:	4622      	mov	r2, r4
   b8e7e:	462b      	mov	r3, r5
   b8e80:	4620      	mov	r0, r4
   b8e82:	4629      	mov	r1, r5
   b8e84:	f7fb fa88 	bl	b4398 <__aeabi_dmul>
   b8e88:	ec41 0b10 	vmov	d0, r0, r1
   b8e8c:	f7ff bb50 	b.w	b8530 <__ieee754_pow+0x98>
   b8e90:	494b      	ldr	r1, [pc, #300]	; (b8fc0 <__ieee754_pow+0xb28>)
   b8e92:	2000      	movs	r0, #0
   b8e94:	4622      	mov	r2, r4
   b8e96:	462b      	mov	r3, r5
   b8e98:	f7fb fba8 	bl	b45ec <__aeabi_ddiv>
   b8e9c:	ec41 0b10 	vmov	d0, r0, r1
   b8ea0:	f7ff bb46 	b.w	b8530 <__ieee754_pow+0x98>
   b8ea4:	2b00      	cmp	r3, #0
   b8ea6:	d144      	bne.n	b8f32 <__ieee754_pow+0xa9a>
   b8ea8:	f1c1 0114 	rsb	r1, r1, #20
   b8eac:	fa4a f001 	asr.w	r0, sl, r1
   b8eb0:	fa00 f101 	lsl.w	r1, r0, r1
   b8eb4:	4551      	cmp	r1, sl
   b8eb6:	d05a      	beq.n	b8f6e <__ieee754_pow+0xad6>
   b8eb8:	9300      	str	r3, [sp, #0]
   b8eba:	f7ff bb17 	b.w	b84ec <__ieee754_pow+0x54>
   b8ebe:	4a42      	ldr	r2, [pc, #264]	; (b8fc8 <__ieee754_pow+0xb30>)
   b8ec0:	4293      	cmp	r3, r2
   b8ec2:	dc5b      	bgt.n	b8f7c <__ieee754_pow+0xae4>
   b8ec4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8ec8:	9102      	str	r1, [sp, #8]
   b8eca:	9100      	str	r1, [sp, #0]
   b8ecc:	e646      	b.n	b8b5c <__ieee754_pow+0x6c4>
   b8ece:	a334      	add	r3, pc, #208	; (adr r3, b8fa0 <__ieee754_pow+0xb08>)
   b8ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ed4:	ec51 0b18 	vmov	r0, r1, d8
   b8ed8:	f7fb fa5e 	bl	b4398 <__aeabi_dmul>
   b8edc:	a330      	add	r3, pc, #192	; (adr r3, b8fa0 <__ieee754_pow+0xb08>)
   b8ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ee2:	f7fb fa59 	bl	b4398 <__aeabi_dmul>
   b8ee6:	ec41 0b10 	vmov	d0, r0, r1
   b8eea:	f7ff bb21 	b.w	b8530 <__ieee754_pow+0x98>
   b8eee:	9b00      	ldr	r3, [sp, #0]
   b8ef0:	2b01      	cmp	r3, #1
   b8ef2:	f47f ab1d 	bne.w	b8530 <__ieee754_pow+0x98>
   b8ef6:	ee10 1a90 	vmov	r1, s1
   b8efa:	ee10 2a10 	vmov	r2, s0
   b8efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8f02:	ec43 2b10 	vmov	d0, r2, r3
   b8f06:	f7ff bb13 	b.w	b8530 <__ieee754_pow+0x98>
   b8f0a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8fa8 <__ieee754_pow+0xb10>
   b8f0e:	eeb0 ca47 	vmov.f32	s24, s14
   b8f12:	eef0 ca67 	vmov.f32	s25, s15
   b8f16:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8fb0 <__ieee754_pow+0xb18>
   b8f1a:	eeb0 da47 	vmov.f32	s26, s14
   b8f1e:	eef0 da67 	vmov.f32	s27, s15
   b8f22:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8fb8 <__ieee754_pow+0xb20>
   b8f26:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b8f2a:	ec53 2b17 	vmov	r2, r3, d7
   b8f2e:	f7ff bbeb 	b.w	b8708 <__ieee754_pow+0x270>
   b8f32:	ec45 4b10 	vmov	d0, r4, r5
   b8f36:	9200      	str	r2, [sp, #0]
   b8f38:	f000 f914 	bl	b9164 <fabs>
   b8f3c:	9a00      	ldr	r2, [sp, #0]
   b8f3e:	2a00      	cmp	r2, #0
   b8f40:	f47f ab92 	bne.w	b8668 <__ieee754_pow+0x1d0>
   b8f44:	9200      	str	r2, [sp, #0]
   b8f46:	f7ff bb26 	b.w	b8596 <__ieee754_pow+0xfe>
   b8f4a:	ec41 0b10 	vmov	d0, r0, r1
   b8f4e:	9800      	ldr	r0, [sp, #0]
   b8f50:	f7ff f93a 	bl	b81c8 <scalbn>
   b8f54:	ec51 0b10 	vmov	r0, r1, d0
   b8f58:	e6b5      	b.n	b8cc6 <__ieee754_pow+0x82e>
   b8f5a:	f000 0001 	and.w	r0, r0, #1
   b8f5e:	f1c0 0102 	rsb	r1, r0, #2
   b8f62:	9100      	str	r1, [sp, #0]
   b8f64:	2b00      	cmp	r3, #0
   b8f66:	f43f aac1 	beq.w	b84ec <__ieee754_pow+0x54>
   b8f6a:	f7ff bb0d 	b.w	b8588 <__ieee754_pow+0xf0>
   b8f6e:	f000 0001 	and.w	r0, r0, #1
   b8f72:	f1c0 0302 	rsb	r3, r0, #2
   b8f76:	9300      	str	r3, [sp, #0]
   b8f78:	f7ff bab8 	b.w	b84ec <__ieee754_pow+0x54>
   b8f7c:	151b      	asrs	r3, r3, #20
   b8f7e:	e5bb      	b.n	b8af8 <__ieee754_pow+0x660>
   b8f80:	60000000 	.word	0x60000000
   b8f84:	3ff71547 	.word	0x3ff71547
   b8f88:	f85ddf44 	.word	0xf85ddf44
   b8f8c:	3e54ae0b 	.word	0x3e54ae0b
   b8f90:	55555555 	.word	0x55555555
   b8f94:	3fd55555 	.word	0x3fd55555
   b8f98:	652b82fe 	.word	0x652b82fe
   b8f9c:	3ff71547 	.word	0x3ff71547
   b8fa0:	8800759c 	.word	0x8800759c
   b8fa4:	7e37e43c 	.word	0x7e37e43c
   b8fa8:	40000000 	.word	0x40000000
   b8fac:	3fe2b803 	.word	0x3fe2b803
   b8fb0:	43cfd006 	.word	0x43cfd006
   b8fb4:	3e4cfdeb 	.word	0x3e4cfdeb
   b8fb8:	00000000 	.word	0x00000000
   b8fbc:	3ff80000 	.word	0x3ff80000
   b8fc0:	3ff00000 	.word	0x3ff00000
   b8fc4:	3fd00000 	.word	0x3fd00000
   b8fc8:	3fe00000 	.word	0x3fe00000

000b8fcc <__ieee754_sqrt>:
   b8fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fd0:	4a63      	ldr	r2, [pc, #396]	; (b9160 <__ieee754_sqrt+0x194>)
   b8fd2:	ec55 4b10 	vmov	r4, r5, d0
   b8fd6:	43aa      	bics	r2, r5
   b8fd8:	f000 809f 	beq.w	b911a <__ieee754_sqrt+0x14e>
   b8fdc:	2d00      	cmp	r5, #0
   b8fde:	ee10 ca10 	vmov	ip, s0
   b8fe2:	462b      	mov	r3, r5
   b8fe4:	dd54      	ble.n	b9090 <__ieee754_sqrt+0xc4>
   b8fe6:	1529      	asrs	r1, r5, #20
   b8fe8:	d063      	beq.n	b90b2 <__ieee754_sqrt+0xe6>
   b8fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8fee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8ff2:	07c9      	lsls	r1, r1, #31
   b8ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8ff8:	d404      	bmi.n	b9004 <__ieee754_sqrt+0x38>
   b8ffa:	005b      	lsls	r3, r3, #1
   b8ffc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9000:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9004:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b9008:	2600      	movs	r6, #0
   b900a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b900e:	107f      	asrs	r7, r7, #1
   b9010:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9014:	f04f 0e16 	mov.w	lr, #22
   b9018:	4634      	mov	r4, r6
   b901a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b901e:	18a1      	adds	r1, r4, r2
   b9020:	4299      	cmp	r1, r3
   b9022:	dc02      	bgt.n	b902a <__ieee754_sqrt+0x5e>
   b9024:	1a5b      	subs	r3, r3, r1
   b9026:	188c      	adds	r4, r1, r2
   b9028:	4416      	add	r6, r2
   b902a:	005b      	lsls	r3, r3, #1
   b902c:	f1be 0e01 	subs.w	lr, lr, #1
   b9030:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9034:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9038:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b903c:	d1ef      	bne.n	b901e <__ieee754_sqrt+0x52>
   b903e:	4675      	mov	r5, lr
   b9040:	2020      	movs	r0, #32
   b9042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b9046:	e00a      	b.n	b905e <__ieee754_sqrt+0x92>
   b9048:	d044      	beq.n	b90d4 <__ieee754_sqrt+0x108>
   b904a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b904e:	3801      	subs	r0, #1
   b9050:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b9054:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9058:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b905c:	d043      	beq.n	b90e6 <__ieee754_sqrt+0x11a>
   b905e:	42a3      	cmp	r3, r4
   b9060:	eb02 010e 	add.w	r1, r2, lr
   b9064:	ddf0      	ble.n	b9048 <__ieee754_sqrt+0x7c>
   b9066:	2900      	cmp	r1, #0
   b9068:	eb01 0e02 	add.w	lr, r1, r2
   b906c:	db0a      	blt.n	b9084 <__ieee754_sqrt+0xb8>
   b906e:	46a0      	mov	r8, r4
   b9070:	1b1b      	subs	r3, r3, r4
   b9072:	4561      	cmp	r1, ip
   b9074:	bf88      	it	hi
   b9076:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b907a:	ebac 0c01 	sub.w	ip, ip, r1
   b907e:	4415      	add	r5, r2
   b9080:	4644      	mov	r4, r8
   b9082:	e7e2      	b.n	b904a <__ieee754_sqrt+0x7e>
   b9084:	f1be 0f00 	cmp.w	lr, #0
   b9088:	dbf1      	blt.n	b906e <__ieee754_sqrt+0xa2>
   b908a:	f104 0801 	add.w	r8, r4, #1
   b908e:	e7ef      	b.n	b9070 <__ieee754_sqrt+0xa4>
   b9090:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b9094:	4322      	orrs	r2, r4
   b9096:	d038      	beq.n	b910a <__ieee754_sqrt+0x13e>
   b9098:	2d00      	cmp	r5, #0
   b909a:	d14e      	bne.n	b913a <__ieee754_sqrt+0x16e>
   b909c:	4629      	mov	r1, r5
   b909e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b90a2:	3915      	subs	r1, #21
   b90a4:	4613      	mov	r3, r2
   b90a6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b90aa:	2a00      	cmp	r2, #0
   b90ac:	d0f7      	beq.n	b909e <__ieee754_sqrt+0xd2>
   b90ae:	02d6      	lsls	r6, r2, #11
   b90b0:	d450      	bmi.n	b9154 <__ieee754_sqrt+0x188>
   b90b2:	2000      	movs	r0, #0
   b90b4:	005b      	lsls	r3, r3, #1
   b90b6:	02dd      	lsls	r5, r3, #11
   b90b8:	4604      	mov	r4, r0
   b90ba:	f100 0001 	add.w	r0, r0, #1
   b90be:	d5f9      	bpl.n	b90b4 <__ieee754_sqrt+0xe8>
   b90c0:	461a      	mov	r2, r3
   b90c2:	4663      	mov	r3, ip
   b90c4:	fa0c fc00 	lsl.w	ip, ip, r0
   b90c8:	f1c0 0020 	rsb	r0, r0, #32
   b90cc:	40c3      	lsrs	r3, r0
   b90ce:	1b09      	subs	r1, r1, r4
   b90d0:	4313      	orrs	r3, r2
   b90d2:	e78a      	b.n	b8fea <__ieee754_sqrt+0x1e>
   b90d4:	4561      	cmp	r1, ip
   b90d6:	d8b8      	bhi.n	b904a <__ieee754_sqrt+0x7e>
   b90d8:	2900      	cmp	r1, #0
   b90da:	eb01 0e02 	add.w	lr, r1, r2
   b90de:	dbd1      	blt.n	b9084 <__ieee754_sqrt+0xb8>
   b90e0:	4698      	mov	r8, r3
   b90e2:	2300      	movs	r3, #0
   b90e4:	e7c9      	b.n	b907a <__ieee754_sqrt+0xae>
   b90e6:	ea53 030c 	orrs.w	r3, r3, ip
   b90ea:	d110      	bne.n	b910e <__ieee754_sqrt+0x142>
   b90ec:	0868      	lsrs	r0, r5, #1
   b90ee:	1071      	asrs	r1, r6, #1
   b90f0:	07f3      	lsls	r3, r6, #31
   b90f2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b90f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b90fa:	bf48      	it	mi
   b90fc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b9100:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b9104:	4602      	mov	r2, r0
   b9106:	ec43 2b10 	vmov	d0, r2, r3
   b910a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b910e:	1c6a      	adds	r2, r5, #1
   b9110:	bf16      	itet	ne
   b9112:	1c68      	addne	r0, r5, #1
   b9114:	3601      	addeq	r6, #1
   b9116:	0840      	lsrne	r0, r0, #1
   b9118:	e7e9      	b.n	b90ee <__ieee754_sqrt+0x122>
   b911a:	ee10 2a10 	vmov	r2, s0
   b911e:	ee10 0a10 	vmov	r0, s0
   b9122:	462b      	mov	r3, r5
   b9124:	4629      	mov	r1, r5
   b9126:	f7fb f937 	bl	b4398 <__aeabi_dmul>
   b912a:	4622      	mov	r2, r4
   b912c:	462b      	mov	r3, r5
   b912e:	f7fa ff7d 	bl	b402c <__adddf3>
   b9132:	ec41 0b10 	vmov	d0, r0, r1
   b9136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b913a:	ee10 2a10 	vmov	r2, s0
   b913e:	4620      	mov	r0, r4
   b9140:	4629      	mov	r1, r5
   b9142:	f7fa ff71 	bl	b4028 <__aeabi_dsub>
   b9146:	4602      	mov	r2, r0
   b9148:	460b      	mov	r3, r1
   b914a:	f7fb fa4f 	bl	b45ec <__aeabi_ddiv>
   b914e:	ec41 0b10 	vmov	d0, r0, r1
   b9152:	e7da      	b.n	b910a <__ieee754_sqrt+0x13e>
   b9154:	4663      	mov	r3, ip
   b9156:	2020      	movs	r0, #32
   b9158:	f04f 34ff 	mov.w	r4, #4294967295
   b915c:	e7b6      	b.n	b90cc <__ieee754_sqrt+0x100>
   b915e:	bf00      	nop
   b9160:	7ff00000 	.word	0x7ff00000

000b9164 <fabs>:
   b9164:	ec51 0b10 	vmov	r0, r1, d0
   b9168:	ee10 2a10 	vmov	r2, s0
   b916c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b9170:	ec43 2b10 	vmov	d0, r2, r3
   b9174:	4770      	bx	lr
   b9176:	bf00      	nop

000b9178 <finite>:
   b9178:	b082      	sub	sp, #8
   b917a:	ed8d 0b00 	vstr	d0, [sp]
   b917e:	9801      	ldr	r0, [sp, #4]
   b9180:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b9184:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b9188:	0fc0      	lsrs	r0, r0, #31
   b918a:	b002      	add	sp, #8
   b918c:	4770      	bx	lr
   b918e:	bf00      	nop

000b9190 <nan>:
   b9190:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9198 <nan+0x8>
   b9194:	4770      	bx	lr
   b9196:	bf00      	nop
   b9198:	00000000 	.word	0x00000000
   b919c:	7ff80000 	.word	0x7ff80000

000b91a0 <rint>:
   b91a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b91a2:	ec53 2b10 	vmov	r2, r3, d0
   b91a6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b91aa:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b91ae:	2913      	cmp	r1, #19
   b91b0:	ee10 0a10 	vmov	r0, s0
   b91b4:	b083      	sub	sp, #12
   b91b6:	461c      	mov	r4, r3
   b91b8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b91bc:	dc3a      	bgt.n	b9234 <rint+0x94>
   b91be:	2900      	cmp	r1, #0
   b91c0:	db30      	blt.n	b9224 <rint+0x84>
   b91c2:	4d42      	ldr	r5, [pc, #264]	; (b92cc <rint+0x12c>)
   b91c4:	fa45 fc01 	asr.w	ip, r5, r1
   b91c8:	ea03 050c 	and.w	r5, r3, ip
   b91cc:	4315      	orrs	r5, r2
   b91ce:	d02d      	beq.n	b922c <rint+0x8c>
   b91d0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b91d4:	4318      	orrs	r0, r3
   b91d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b91da:	d00c      	beq.n	b91f6 <rint+0x56>
   b91dc:	ea24 0c0c 	bic.w	ip, r4, ip
   b91e0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b91e4:	2913      	cmp	r1, #19
   b91e6:	fa44 f101 	asr.w	r1, r4, r1
   b91ea:	bf0c      	ite	eq
   b91ec:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b91f0:	2000      	movne	r0, #0
   b91f2:	ea4c 0401 	orr.w	r4, ip, r1
   b91f6:	4936      	ldr	r1, [pc, #216]	; (b92d0 <rint+0x130>)
   b91f8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b91fc:	4623      	mov	r3, r4
   b91fe:	e9de 4500 	ldrd	r4, r5, [lr]
   b9202:	4602      	mov	r2, r0
   b9204:	4629      	mov	r1, r5
   b9206:	4620      	mov	r0, r4
   b9208:	f7fa ff10 	bl	b402c <__adddf3>
   b920c:	e9cd 0100 	strd	r0, r1, [sp]
   b9210:	e9dd 0100 	ldrd	r0, r1, [sp]
   b9214:	4622      	mov	r2, r4
   b9216:	462b      	mov	r3, r5
   b9218:	f7fa ff06 	bl	b4028 <__aeabi_dsub>
   b921c:	ec41 0b10 	vmov	d0, r0, r1
   b9220:	b003      	add	sp, #12
   b9222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9224:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b9228:	4311      	orrs	r1, r2
   b922a:	d124      	bne.n	b9276 <rint+0xd6>
   b922c:	ec43 2b10 	vmov	d0, r2, r3
   b9230:	b003      	add	sp, #12
   b9232:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9234:	2933      	cmp	r1, #51	; 0x33
   b9236:	dd08      	ble.n	b924a <rint+0xaa>
   b9238:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b923c:	d1f6      	bne.n	b922c <rint+0x8c>
   b923e:	4619      	mov	r1, r3
   b9240:	f7fa fef4 	bl	b402c <__adddf3>
   b9244:	ec41 0b10 	vmov	d0, r0, r1
   b9248:	e7f2      	b.n	b9230 <rint+0x90>
   b924a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b924e:	f04f 31ff 	mov.w	r1, #4294967295
   b9252:	fa21 f10c 	lsr.w	r1, r1, ip
   b9256:	420a      	tst	r2, r1
   b9258:	d0e8      	beq.n	b922c <rint+0x8c>
   b925a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b925e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b9262:	d0c8      	beq.n	b91f6 <rint+0x56>
   b9264:	ea20 0303 	bic.w	r3, r0, r3
   b9268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b926c:	fa40 fc0c 	asr.w	ip, r0, ip
   b9270:	ea43 000c 	orr.w	r0, r3, ip
   b9274:	e7bf      	b.n	b91f6 <rint+0x56>
   b9276:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b927a:	4318      	orrs	r0, r3
   b927c:	4a14      	ldr	r2, [pc, #80]	; (b92d0 <rint+0x130>)
   b927e:	4243      	negs	r3, r0
   b9280:	4303      	orrs	r3, r0
   b9282:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b9286:	0b1b      	lsrs	r3, r3, #12
   b9288:	0c62      	lsrs	r2, r4, #17
   b928a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b928e:	0452      	lsls	r2, r2, #17
   b9290:	ea43 0702 	orr.w	r7, r3, r2
   b9294:	463b      	mov	r3, r7
   b9296:	e9de 6700 	ldrd	r6, r7, [lr]
   b929a:	ee10 2a10 	vmov	r2, s0
   b929e:	4630      	mov	r0, r6
   b92a0:	4639      	mov	r1, r7
   b92a2:	f7fa fec3 	bl	b402c <__adddf3>
   b92a6:	e9cd 0100 	strd	r0, r1, [sp]
   b92aa:	4632      	mov	r2, r6
   b92ac:	463b      	mov	r3, r7
   b92ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   b92b2:	f7fa feb9 	bl	b4028 <__aeabi_dsub>
   b92b6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b92ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b92be:	4602      	mov	r2, r0
   b92c0:	ea41 0304 	orr.w	r3, r1, r4
   b92c4:	ec43 2b10 	vmov	d0, r2, r3
   b92c8:	b003      	add	sp, #12
   b92ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b92cc:	000fffff 	.word	0x000fffff
   b92d0:	000b9be0 	.word	0x000b9be0

000b92d4 <atexit>:
   b92d4:	2300      	movs	r3, #0
   b92d6:	4601      	mov	r1, r0
   b92d8:	461a      	mov	r2, r3
   b92da:	4618      	mov	r0, r3
   b92dc:	f000 b862 	b.w	b93a4 <__register_exitproc>

000b92e0 <memcpy>:
   b92e0:	440a      	add	r2, r1
   b92e2:	4291      	cmp	r1, r2
   b92e4:	f100 33ff 	add.w	r3, r0, #4294967295
   b92e8:	d100      	bne.n	b92ec <memcpy+0xc>
   b92ea:	4770      	bx	lr
   b92ec:	b510      	push	{r4, lr}
   b92ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b92f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b92f6:	4291      	cmp	r1, r2
   b92f8:	d1f9      	bne.n	b92ee <memcpy+0xe>
   b92fa:	bd10      	pop	{r4, pc}

000b92fc <memset>:
   b92fc:	4402      	add	r2, r0
   b92fe:	4603      	mov	r3, r0
   b9300:	4293      	cmp	r3, r2
   b9302:	d100      	bne.n	b9306 <memset+0xa>
   b9304:	4770      	bx	lr
   b9306:	f803 1b01 	strb.w	r1, [r3], #1
   b930a:	e7f9      	b.n	b9300 <memset+0x4>

000b930c <srand>:
   b930c:	b538      	push	{r3, r4, r5, lr}
   b930e:	4b10      	ldr	r3, [pc, #64]	; (b9350 <srand+0x44>)
   b9310:	681d      	ldr	r5, [r3, #0]
   b9312:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9314:	4604      	mov	r4, r0
   b9316:	b9b3      	cbnz	r3, b9346 <srand+0x3a>
   b9318:	2018      	movs	r0, #24
   b931a:	f7fd fd27 	bl	b6d6c <malloc>
   b931e:	4602      	mov	r2, r0
   b9320:	63a8      	str	r0, [r5, #56]	; 0x38
   b9322:	b920      	cbnz	r0, b932e <srand+0x22>
   b9324:	4b0b      	ldr	r3, [pc, #44]	; (b9354 <srand+0x48>)
   b9326:	480c      	ldr	r0, [pc, #48]	; (b9358 <srand+0x4c>)
   b9328:	2142      	movs	r1, #66	; 0x42
   b932a:	f7fd fd57 	bl	b6ddc <__assert_func>
   b932e:	490b      	ldr	r1, [pc, #44]	; (b935c <srand+0x50>)
   b9330:	4b0b      	ldr	r3, [pc, #44]	; (b9360 <srand+0x54>)
   b9332:	e9c0 1300 	strd	r1, r3, [r0]
   b9336:	4b0b      	ldr	r3, [pc, #44]	; (b9364 <srand+0x58>)
   b9338:	6083      	str	r3, [r0, #8]
   b933a:	230b      	movs	r3, #11
   b933c:	8183      	strh	r3, [r0, #12]
   b933e:	2100      	movs	r1, #0
   b9340:	2001      	movs	r0, #1
   b9342:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9346:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9348:	2200      	movs	r2, #0
   b934a:	611c      	str	r4, [r3, #16]
   b934c:	615a      	str	r2, [r3, #20]
   b934e:	bd38      	pop	{r3, r4, r5, pc}
   b9350:	2003e5dc 	.word	0x2003e5dc
   b9354:	000b9bf0 	.word	0x000b9bf0
   b9358:	000b9c07 	.word	0x000b9c07
   b935c:	abcd330e 	.word	0xabcd330e
   b9360:	e66d1234 	.word	0xe66d1234
   b9364:	0005deec 	.word	0x0005deec

000b9368 <strdup>:
   b9368:	4b02      	ldr	r3, [pc, #8]	; (b9374 <strdup+0xc>)
   b936a:	4601      	mov	r1, r0
   b936c:	6818      	ldr	r0, [r3, #0]
   b936e:	f000 b803 	b.w	b9378 <_strdup_r>
   b9372:	bf00      	nop
   b9374:	2003e5dc 	.word	0x2003e5dc

000b9378 <_strdup_r>:
   b9378:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b937a:	4604      	mov	r4, r0
   b937c:	4608      	mov	r0, r1
   b937e:	460d      	mov	r5, r1
   b9380:	f7fb fdfa 	bl	b4f78 <strlen>
   b9384:	1c42      	adds	r2, r0, #1
   b9386:	4611      	mov	r1, r2
   b9388:	4620      	mov	r0, r4
   b938a:	9201      	str	r2, [sp, #4]
   b938c:	f7fd fd16 	bl	b6dbc <_malloc_r>
   b9390:	4604      	mov	r4, r0
   b9392:	b118      	cbz	r0, b939c <_strdup_r+0x24>
   b9394:	9a01      	ldr	r2, [sp, #4]
   b9396:	4629      	mov	r1, r5
   b9398:	f7ff ffa2 	bl	b92e0 <memcpy>
   b939c:	4620      	mov	r0, r4
   b939e:	b003      	add	sp, #12
   b93a0:	bd30      	pop	{r4, r5, pc}
	...

000b93a4 <__register_exitproc>:
   b93a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9464 <__register_exitproc+0xc0>
   b93ac:	4606      	mov	r6, r0
   b93ae:	f8d8 0000 	ldr.w	r0, [r8]
   b93b2:	461f      	mov	r7, r3
   b93b4:	460d      	mov	r5, r1
   b93b6:	4691      	mov	r9, r2
   b93b8:	f000 f856 	bl	b9468 <__retarget_lock_acquire_recursive>
   b93bc:	4b25      	ldr	r3, [pc, #148]	; (b9454 <__register_exitproc+0xb0>)
   b93be:	681c      	ldr	r4, [r3, #0]
   b93c0:	b934      	cbnz	r4, b93d0 <__register_exitproc+0x2c>
   b93c2:	4c25      	ldr	r4, [pc, #148]	; (b9458 <__register_exitproc+0xb4>)
   b93c4:	601c      	str	r4, [r3, #0]
   b93c6:	4b25      	ldr	r3, [pc, #148]	; (b945c <__register_exitproc+0xb8>)
   b93c8:	b113      	cbz	r3, b93d0 <__register_exitproc+0x2c>
   b93ca:	681b      	ldr	r3, [r3, #0]
   b93cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b93d0:	6863      	ldr	r3, [r4, #4]
   b93d2:	2b1f      	cmp	r3, #31
   b93d4:	dd07      	ble.n	b93e6 <__register_exitproc+0x42>
   b93d6:	f8d8 0000 	ldr.w	r0, [r8]
   b93da:	f000 f847 	bl	b946c <__retarget_lock_release_recursive>
   b93de:	f04f 30ff 	mov.w	r0, #4294967295
   b93e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b93e6:	b34e      	cbz	r6, b943c <__register_exitproc+0x98>
   b93e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b93ec:	b988      	cbnz	r0, b9412 <__register_exitproc+0x6e>
   b93ee:	4b1c      	ldr	r3, [pc, #112]	; (b9460 <__register_exitproc+0xbc>)
   b93f0:	b923      	cbnz	r3, b93fc <__register_exitproc+0x58>
   b93f2:	f8d8 0000 	ldr.w	r0, [r8]
   b93f6:	f000 f838 	bl	b946a <__retarget_lock_release>
   b93fa:	e7f0      	b.n	b93de <__register_exitproc+0x3a>
   b93fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9400:	f7fd fcb4 	bl	b6d6c <malloc>
   b9404:	2800      	cmp	r0, #0
   b9406:	d0f4      	beq.n	b93f2 <__register_exitproc+0x4e>
   b9408:	2300      	movs	r3, #0
   b940a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b940e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9412:	6863      	ldr	r3, [r4, #4]
   b9414:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9418:	2201      	movs	r2, #1
   b941a:	409a      	lsls	r2, r3
   b941c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9420:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9424:	4313      	orrs	r3, r2
   b9426:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b942a:	2e02      	cmp	r6, #2
   b942c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9430:	bf02      	ittt	eq
   b9432:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9436:	4313      	orreq	r3, r2
   b9438:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b943c:	6863      	ldr	r3, [r4, #4]
   b943e:	f8d8 0000 	ldr.w	r0, [r8]
   b9442:	1c5a      	adds	r2, r3, #1
   b9444:	3302      	adds	r3, #2
   b9446:	6062      	str	r2, [r4, #4]
   b9448:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b944c:	f000 f80e 	bl	b946c <__retarget_lock_release_recursive>
   b9450:	2000      	movs	r0, #0
   b9452:	e7c6      	b.n	b93e2 <__register_exitproc+0x3e>
   b9454:	2003e7f4 	.word	0x2003e7f4
   b9458:	2003e768 	.word	0x2003e768
   b945c:	00000000 	.word	0x00000000
   b9460:	000b6d6d 	.word	0x000b6d6d
   b9464:	2003e640 	.word	0x2003e640

000b9468 <__retarget_lock_acquire_recursive>:
   b9468:	4770      	bx	lr

000b946a <__retarget_lock_release>:
   b946a:	4770      	bx	lr

000b946c <__retarget_lock_release_recursive>:
   b946c:	4770      	bx	lr

000b946e <link_code_end>:
	...

000b9470 <dynalib_user>:
   b9470:	4f89 000b 4fc5 000b 4fed 000b 4ff1 000b     .O...O...O...O..
   b9480:	0000 0000 6941 2072 7551 6c61 7469 2079     ....Air Quality 
   b9490:	6553 736e 726f 7220 6165 7964 002e 6941     Sensor ready..Ai
   b94a0:	2072 7551 6c61 7469 2079 6553 736e 726f     r Quality Sensor
   b94b0:	4520 5252 524f 0021 6150 7472 6369 656c      ERROR!.Particle
   b94c0:	4100 7269 5120 6175 696c 7974 4d00 6e6f     .Air Quality.Mon
   b94d0:	7469 726f 5600 5245 202e 3100 302e 2e30     itor.VER. .1.00.
   b94e0:	3130 4200 454d 3832 2030 6553 736e 726f     01.BME280 Sensor
   b94f0:	7220 6165 7964 002e 4d42 3245 3038 5320      ready..BME280 S
   b9500:	6e65 6f73 2072 5245 4f52 2152 4e00 6e6f     ensor ERROR!.Non
   b9510:	0065 6144 676e 7265 4800 6769 2068 6f50     e.Danger.High Po
   b9520:	6c6c 7475 6f69 006e 6f4c 2077 6f50 6c6c     llution.Low Poll
   b9530:	7475 6f69 006e 7246 7365 2068 6941 0072     ution.Fresh Air.
   b9540:	504c 3a4f 2520 756c 5200 7461 6f69 203a     LPO: %lu.Ratio: 
   b9550:	6625 2525 4300 6e6f 6563 746e 6172 6974     %f%%.Concentrati
   b9560:	6e6f 203a 6625 7020 7363 4c2f 5400 6d65     on: %f pcs/L.Tem
   b9570:	3a70 0020 0043 7548 696d 6964 7974 203a     p: .C.Humidity: 
   b9580:	5000 6572 7373 203a 2000 5068 0061 7544     .Press: . hPa.Du
   b9590:	7473 203a 4200 7461 003a 2025 0028 2956     st: .Bat:.% (.V)
   b95a0:	4300 6168 6772 6e69 3a67 0020 2020 2020     .Charging: .    
   b95b0:	2020 2020 2020 2020 2020 2020 5400 7572                 .Tru
   b95c0:	0065 6146 736c 0065 6576 0072 6574 706d     e.False.ver.temp
   b95d0:	6800 6d75 6469 7469 0079 7270 7365 7573     .humidity.pressu
   b95e0:	6572 6100 7269 712d 6175 696c 7974 6100     re.air-quality.a
   b95f0:	5f71 6f76 746c 6761 0065 7161 645f 6c65     q_voltage.aq_del
   b9600:	6174 765f 6400 7375 2d74 706c 006f 7564     ta_v.dust-lpo.du
   b9610:	7473 722d 7461 6f69 6400 7375 2d74 6f63     st-ratio.dust-co
   b9620:	636e 6e65 7274 7461 6f69 006e 6e65 2d76     ncentration.env-
   b9630:	6176 736c 4100 7269 5120 6175 696c 7974     vals.Air Quality
   b9640:	203a 7325 5400 6d65 3a70 2520 0066 7250     : %s.Temp: %f.Pr
   b9650:	7365 7573 6572 203a 6625 4800 6d75 6469     essure: %f.Humid
   b9660:	7469 3a79 2520 0066                         ity: %f.

000b9668 <_ZTV16JsonWriterStaticILj256EE>:
	...
   b9670:	501d 000b 5031 000b 6564 6166 6c75 2074     .P..1P..default 
   b9680:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b9690:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b96a0:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b96b0:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b96bc <_ZTVN8particle11SPISettingsE>:
	...
   b96c4:	59b1 000b 5985 000b 5987 000b 755c 3025     .Y...Y...Y..\u%0
   b96d4:	5834 2500 2a2e 0066                         4X.%.*f.

000b96dc <_ZTV10JsonBuffer>:
	...
   b96e4:	62b9 000b 62d5 000b                         .b...b..

000b96ec <_ZTV10JsonWriter>:
	...
   b96f4:	62e9 000b 62fd 000b                         .b...b..

000b96fc <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   b96fc:	0000 0000                                   ....

000b9700 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   b9700:	0002 0000                                   ....

000b9704 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   b9704:	0001 0000                                   ....

000b9708 <_ZN16AirQualitySensor9FRESH_AIRE>:
   b9708:	0003 0000 002d                              ....-.

000b970e <_ZL9BasicFont>:
	...
   b9716:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   b9726:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   b9736:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   b9746:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   b9756:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   b9766:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   b9776:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   b9786:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   b9796:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   b97a6:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   b97b6:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   b97c6:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   b97d6:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   b97e6:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   b97f6:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   b9806:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   b9816:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   b9826:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   b9836:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   b9846:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   b9856:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   b9866:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   b9876:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   b9886:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   b9896:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   b98a6:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   b98b6:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   b98c6:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   b98d6:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   b98e6:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   b98f6:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   b9906:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   b9916:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   b9926:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   b9936:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   b9946:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   b9956:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   b9966:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   b9976:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   b9986:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   b9996:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   b99a6:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   b99b6:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   b99c6:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   b99d6:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   b99e6:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   b99f6:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   b9a06:	0200 0505 0002 0000 0000                    ..........

000b9a10 <_ZTVN5spark13EthernetClassE>:
	...
   b9a18:	6e5b 000b 6e51 000b 6e47 000b 6e3d 000b     [n..Qn..Gn..=n..
   b9a28:	6e31 000b 6e25 000b 7e3d 000b 7e45 000b     1n..%n..=~..E~..
   b9a38:	6e19 000b 6e11 000b 6e07 000b 6dfd 000b     .n...n...n...m..
   b9a48:	7f6d 000b 7e75 000b 7e7d 000b               m...u~..}~..

000b9a54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9a54:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b9a64:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b9a74:	7361 7463 6d69 0065                         asctime.

000b9a7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9a84:	7479 000b 747f 000b 74bd 000b 748d 000b     yt...t...t...t..
   b9a94:	747b 000b                                   {t..

000b9a98 <_ZTV9IPAddress>:
	...
   b9aa0:	79b9 000b 79a9 000b 79ab 000b               .y...y...y..

000b9aac <_ZTV9USBSerial>:
	...
   b9ab4:	7a9f 000b 7b07 000b 7add 000b 718d 000b     .z...{...z...q..
   b9ac4:	7acf 000b 7aa1 000b 7ab1 000b 7b01 000b     .z...z...z...{..
   b9ad4:	72df 000b 7ac1 000b 7a99 000b               .r...z...z..

000b9ae0 <_ZTV11USARTSerial>:
	...
   b9ae8:	7ba1 000b 7c0d 000b 7be5 000b 718d 000b     .{...|...{...q..
   b9af8:	7bb5 000b 7bd1 000b 7bc3 000b 7bdf 000b     .{...{...{...{..
   b9b08:	72df 000b 7ba3 000b 7ba7 000b               .r...{...{..

000b9b14 <_ZTV7TwoWire>:
	...
   b9b1c:	7c6d 000b 7cb7 000b 7c8f 000b 7c6f 000b     m|...|...|..o|..
   b9b2c:	7c97 000b 7c9f 000b 7ca7 000b 7caf 000b     .|...|...|...|..
   b9b3c:	72df 000b                                   .r..

000b9b40 <_ZTVN5spark9WiFiClassE>:
	...
   b9b48:	7ddf 000b 7dd5 000b 7dcb 000b 7d81 000b     .}...}...}...}..
   b9b58:	7dbf 000b 7db3 000b 7e3d 000b 7e45 000b     .}...}..=~..E~..
   b9b68:	7da7 000b 7d9f 000b 7d95 000b 7d8b 000b     .}...}...}...}..
   b9b78:	7f6d 000b 7e75 000b 7e7d 000b               m...u~..}~..

000b9b84 <CSWTCH.109>:
   b9b84:	e6d0 2003 e724 2003 e72c 2003               ... $.. ,.. 

000b9b90 <_ZTVN5spark12NetworkClassE>:
	...
   b9b98:	7dfd 000b 7e07 000b 7e11 000b 7e1b 000b     .}...~...~...~..
   b9ba8:	7e25 000b 7e31 000b 7e3d 000b 7e45 000b     %~..1~..=~..E~..
   b9bb8:	7e4d 000b 7e59 000b 7e61 000b 7e6b 000b     M~..Y~..a~..k~..
   b9bc8:	7f6d 000b 7e75 000b 7e7d 000b               m...u~..}~..

000b9bd4 <_ZSt7nothrow>:
	...

000b9be0 <TWO52>:
   b9be0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b9bf0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b9c00:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b9c10:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b9c20:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b9c30:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b9c40:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b9c50:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b9c60:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b9c70:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b9c80:	2e64 0063                                   d.c.

000b9c84 <link_const_data_end>:
   b9c84:	000b5959 	.word	0x000b5959
   b9c88:	000b6e65 	.word	0x000b6e65
   b9c8c:	000b701d 	.word	0x000b701d
   b9c90:	000b717d 	.word	0x000b717d
   b9c94:	000b7309 	.word	0x000b7309
   b9c98:	000b7319 	.word	0x000b7319
   b9c9c:	000b7335 	.word	0x000b7335
   b9ca0:	000b7de9 	.word	0x000b7de9
   b9ca4:	000b7f81 	.word	0x000b7f81
